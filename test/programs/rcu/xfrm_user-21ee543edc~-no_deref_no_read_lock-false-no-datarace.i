/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 7 ".tmp_xfrm_user.c"
struct device;
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/types.h"
typedef __u16 __le16;
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef _Bool bool;
#line 31 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __s32 int32_t;
#line 106 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __u8 uint8_t;
#line 108 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef unsigned int fmode_t;
#line 159 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef unsigned int oom_flags_t;
#line 177 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 177 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 182 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 182 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 183 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 188
struct hlist_node;
#line 188 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 192 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 203 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/slab.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/export.h"
struct module;
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/ptrace.h"
struct __anonstruct____missing_field_name_9 {
   unsigned int a ;
   unsigned int b ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/ptrace.h"
struct __anonstruct____missing_field_name_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/ptrace.h"
union __anonunion____missing_field_name_8 {
   struct __anonstruct____missing_field_name_9 __annonCompField4 ;
   struct __anonstruct____missing_field_name_10 __annonCompField5 ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion____missing_field_name_8 __annonCompField6 ;
};
#line 12 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 16 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 238 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 240 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};
#line 240 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;
#line 328
struct page;
#line 328 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 336
struct file;
#line 349
struct seq_file;
#line 386
struct thread_struct;
#line 388
struct mm_struct;
#line 389
struct task_struct;
#line 390
struct cpumask;
#line 327 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/spinlock_types.h"
union __anonunion____missing_field_name_15 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion____missing_field_name_15 __annonCompField7 ;
};
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/rwlock.h"
struct __anonstruct____missing_field_name_17 {
   u32 read ;
   s32 write ;
};
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_16 {
   s64 lock ;
   struct __anonstruct____missing_field_name_17 __annonCompField8 ;
};
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_16 arch_rwlock_t;
#line 142 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dynamic_debug.h"
struct net_device;
#line 372 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/printk.h"
struct file_operations;
#line 384
struct completion;
#line 416 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernel.h"
struct pid;
#line 527 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 102 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/bug.h"
struct timespec;
#line 127 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/vm86.h"
union __anonunion____missing_field_name_22 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_22 __annonCompField10 ;
};
#line 306 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 14 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 663 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 162 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 294 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 312 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_27 {
   u64 rip ;
   u64 rdp ;
};
#line 312 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_28 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 312 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_26 {
   struct __anonstruct____missing_field_name_27 __annonCompField14 ;
   struct __anonstruct____missing_field_name_28 __annonCompField15 ;
};
#line 312 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_29 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 312 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_26 __annonCompField16 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_29 __annonCompField17 ;
};
#line 346 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 367 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 372 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct lwp_struct {
   u8 reserved[128U] ;
};
#line 377 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct bndregs_struct {
   u64 bndregs[8U] ;
};
#line 381 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct bndcsr_struct {
   u64 cfg_reg_u ;
   u64 status_reg ;
};
#line 386 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 392 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
   struct lwp_struct lwp ;
   struct bndregs_struct bndregs ;
   struct bndcsr_struct bndcsr ;
};
#line 401 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 465
struct kmem_cache;
#line 466
struct perf_event;
#line 467 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned char fpu_counter ;
};
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 152 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/barrier.h"
struct lockdep_map;
#line 55 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
};
#line 530 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock_types.h"
struct __anonstruct____missing_field_name_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock_types.h"
union __anonunion____missing_field_name_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_33 __annonCompField19 ;
};
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion____missing_field_name_32 __annonCompField20 ;
};
#line 76 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/jump_label.h"
struct jump_entry;
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;
#line 37 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 412 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock.h"
struct mutex;
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/thread.h"
typedef unsigned long pthread_t;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 920 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/wait.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 51 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 259 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 259 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 98 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 806 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 68 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 198
struct rw_semaphore;
#line 199 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 155 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 225 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rcupdate.h"
struct notifier_block;
#line 1041 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rcupdate.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 323 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ktime.h"
typedef union ktime ktime_t;
#line 388
struct tvec_base;
#line 389 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 266
struct workqueue_struct;
#line 267
struct work_struct;
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 107 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 51 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 63 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 897 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mmzone.h"
struct ctl_table;
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 64 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 301
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 308
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 316
struct wakeup_source;
#line 527 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 534
struct dev_pm_qos;
#line 534 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device * , s32  ) ;
   struct dev_pm_qos *qos ;
};
#line 594 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/pci_iomap.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 87
struct vm_area_struct;
#line 341 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/clocksource.h"
struct device_node;
#line 1282 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mmzone.h"
struct llist_node;
#line 64 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 56 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kmemleak.h"
struct mem_cgroup;
#line 336 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
struct idr_layer {
   int prefix ;
   unsigned long bitmap[4U] ;
   struct idr_layer *ary[256U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 38 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   int cur ;
   spinlock_t lock ;
};
#line 121 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};
#line 150 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 182
struct dentry;
#line 183
struct iattr;
#line 184
struct super_block;
#line 185
struct file_system_type;
#line 186
struct kernfs_open_node;
#line 187
struct kernfs_iattrs;
#line 210
struct kernfs_root;
#line 210 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 85 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_node;
#line 85 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 89
struct kernfs_ops;
#line 89 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops  const  *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
};
#line 95 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
union __anonunion____missing_field_name_128 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 95 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const   *name ;
   struct rb_node rb ;
   void const   *ns ;
   unsigned int hash ;
   union __anonunion____missing_field_name_128 __annonCompField31 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};
#line 137 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root * , int * , char * ) ;
   int (*show_options)(struct seq_file * , struct kernfs_root * ) ;
   int (*mkdir)(struct kernfs_node * , char const   * , umode_t  ) ;
   int (*rmdir)(struct kernfs_node * ) ;
   int (*rename)(struct kernfs_node * , struct kernfs_node * , char const   * ) ;
};
#line 154 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   wait_queue_head_t deactivate_waitq ;
};
#line 166
struct vm_operations_struct;
#line 166 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct  const  *vm_ops ;
};
#line 182 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   ssize_t (*read)(struct kernfs_open_file * , char * , size_t  , loff_t  ) ;
   size_t atomic_write_len ;
   ssize_t (*write)(struct kernfs_open_file * , char * , size_t  , loff_t  ) ;
   int (*mmap)(struct kernfs_open_file * , struct vm_area_struct * ) ;
   struct lock_class_key lockdep_key ;
};
#line 456
struct sock;
#line 457
struct kobject;
#line 458
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 464 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 83 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/highuid.h"
struct user_namespace;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uidgid.h"
struct __anonstruct_kuid_t_129 {
   uid_t val ;
};
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_129 kuid_t;
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uidgid.h"
struct __anonstruct_kgid_t_130 {
   gid_t val ;
};
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_130 kgid_t;
#line 127 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/stat.h"
struct bin_attribute;
#line 37 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/stat.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 37 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 67 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 470 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 50 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kset;
#line 50
struct kobj_type;
#line 50 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 112 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 120 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 128 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 145 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 250 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kobject.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 48 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 58
struct memcg_cache_params;
#line 58
struct kmem_cache_node;
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   struct kset *memcg_kset ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 508 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
struct __anonstruct____missing_field_name_132 {
   struct callback_head callback_head ;
   struct kmem_cache *memcg_caches[0U] ;
};
#line 508 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
struct __anonstruct____missing_field_name_133 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 508 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
union __anonunion____missing_field_name_131 {
   struct __anonstruct____missing_field_name_132 __annonCompField32 ;
   struct __anonstruct____missing_field_name_133 __annonCompField33 ;
};
#line 508 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_131 __annonCompField34 ;
};
#line 62 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 109 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uaccess.h"
struct scatterlist;
#line 835 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct __anonstruct____missing_field_name_137 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
union __anonunion____missing_field_name_136 {
   struct __anonstruct____missing_field_name_137 __annonCompField35 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion____missing_field_name_136 __annonCompField36 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_header * , struct ctl_table * ) ;
};
#line 37 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kmod.h"
struct cred;
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 48 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/elf.h"
struct kernel_param;
#line 53 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/elf.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/moduleparam.h"
struct kparam_string;
#line 58
struct kparam_array;
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/moduleparam.h"
union __anonunion____missing_field_name_142 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_142 __annonCompField37 ;
};
#line 70 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 76 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 461 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/moduleparam.h"
struct mod_arch_specific {

};
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/module.h"
struct module_param_attrs;
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};
#line 46 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 205
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 212 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 226
struct module_sect_attrs;
#line 226
struct module_notes_attrs;
#line 226
struct tracepoint;
#line 226
struct ftrace_event_call;
#line 226 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 648 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/module.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 38 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 222 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/fcntl.h"
struct inode;
#line 45 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 54
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/uprobes.h"
struct __anonstruct____missing_field_name_145 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/uprobes.h"
struct __anonstruct____missing_field_name_146 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/uprobes.h"
union __anonunion____missing_field_name_144 {
   struct __anonstruct____missing_field_name_145 __annonCompField39 ;
   struct __anonstruct____missing_field_name_146 __annonCompField40 ;
};
#line 61
struct uprobe;
#line 61
struct return_instance;
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion____missing_field_name_144 __annonCompField41 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 93 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct xol_area;
#line 94 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 130
struct address_space;
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_147 {
   struct address_space *mapping ;
   void *s_mem ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_149 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_153 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_152 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_153 __annonCompField44 ;
   int units ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_151 {
   union __anonunion____missing_field_name_152 __annonCompField45 ;
   atomic_t _count ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_150 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_151 __annonCompField46 ;
   unsigned int active ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_148 {
   union __anonunion____missing_field_name_149 __annonCompField43 ;
   union __anonunion____missing_field_name_150 __annonCompField47 ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_155 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 131
struct slab;
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_154 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_155 __annonCompField49 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   pgtable_t pmd_huge_pte ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_156 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   union __anonunion____missing_field_name_147 __annonCompField42 ;
   struct __anonstruct____missing_field_name_148 __annonCompField48 ;
   union __anonunion____missing_field_name_154 __annonCompField50 ;
   union __anonunion____missing_field_name_156 __annonCompField51 ;
   unsigned long debug_flags ;
};
#line 187 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 239 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct __anonstruct_linear_158 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 239 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
union __anonunion_shared_157 {
   struct __anonstruct_linear_158 linear ;
   struct list_head nonlinear ;
};
#line 239
struct anon_vma;
#line 239
struct mempolicy;
#line 239 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_157 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 311 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 317 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 330 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};
#line 338 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 343
struct kioctx_table;
#line 344
struct linux_binfmt;
#line 344
struct mmu_notifier_mm;
#line 344 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 158 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kmemcheck.h"
enum ldv_16294 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/net.h"
typedef enum ldv_16294 socket_state;
#line 54
struct poll_table_struct;
#line 55
struct pipe_inode_info;
#line 56
struct net;
#line 73
struct fasync_struct;
#line 73 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 94 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/net.h"
struct proto_ops;
#line 94 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 120
struct kiocb;
#line 121 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   int (*set_peek_off)(struct sock * , int  ) ;
};
#line 161 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 138 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/checksum.h"
struct sk_buff;
#line 153
struct klist_node;
#line 37 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct path;
#line 68 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};
#line 35 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 196
struct pinctrl;
#line 197
struct pinctrl_state;
#line 194 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 42 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct device_driver;
#line 16
struct driver_private;
#line 17
struct class;
#line 18
struct subsys_private;
#line 19
struct bus_type;
#line 20
struct iommu_ops;
#line 21
struct iommu_group;
#line 60 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct device_attribute;
#line 60 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group  const  **bus_groups ;
   struct attribute_group  const  **dev_groups ;
   struct attribute_group  const  **drv_groups ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*online)(struct device * ) ;
   int (*offline)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 138
struct device_type;
#line 195
struct of_device_id;
#line 195
struct acpi_device_id;
#line 195 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 321
struct class_attribute;
#line 321 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group  const  **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 414 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 482 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 510 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 634 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 643
struct acpi_device;
#line 644 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct acpi_dev_node {
   struct acpi_device *companion ;
};
#line 650
struct dma_coherent_mem;
#line 650 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
};
#line 792 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 93 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   nodemask_t nodes_to_scan ;
   int nid ;
};
#line 26 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker * , struct shrink_control * ) ;
   unsigned long (*scan_objects)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};
#line 71
struct file_ra_state;
#line 72
struct user_struct;
#line 73
struct writeback_control;
#line 188 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};
#line 221 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   void (*map_pages)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 2099 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 38 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1153 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 163 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 474 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/hrtimer.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 70 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 77 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 218 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/capability.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 4 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sem.h"
struct sem_undo_list;
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_161 {
   unsigned long sig[1U] ;
};
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_161 sigset_t;
#line 25
struct siginfo;
#line 17 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_164 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_165 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_167 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_168 {
   long _band ;
   int _fd ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_169 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_162 {
   int _pad[28U] ;
   struct __anonstruct__kill_163 _kill ;
   struct __anonstruct__timer_164 _timer ;
   struct __anonstruct__rt_165 _rt ;
   struct __anonstruct__sigchld_166 _sigchld ;
   struct __anonstruct__sigfault_167 _sigfault ;
   struct __anonstruct__sigpoll_168 _sigpoll ;
   struct __anonstruct__sigsys_169 _sigsys ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_162 _sifields ;
};
#line 109 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 251 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 265 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 448
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 455
struct pid_namespace;
#line 455 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 174 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 46 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 40 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 11 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/latencytop.h"
struct assoc_array_ptr;
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 31 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
typedef int32_t key_serial_t;
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 35
struct key;
#line 36
struct signal_struct;
#line 37
struct key_type;
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const   *description ;
   size_t desc_len ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_172 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 123
struct key_user;
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_173 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
struct __anonstruct____missing_field_name_175 {
   struct key_type *type ;
   char *description ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_174 {
   struct keyring_index_key index_key ;
   struct __anonstruct____missing_field_name_175 __annonCompField54 ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
union __anonunion_type_data_176 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
union __anonunion_payload_178 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_177 {
   union __anonunion_payload_178 payload ;
   struct assoc_array keys ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_172 __annonCompField52 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_173 __annonCompField53 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion____missing_field_name_174 __annonCompField55 ;
   union __anonunion_type_data_176 type_data ;
   union __anonunion____missing_field_name_177 __annonCompField56 ;
};
#line 345
struct audit_context;
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 125 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct futex_pi_state;
#line 126
struct robust_list_head;
#line 127
struct bio_list;
#line 128
struct fs_struct;
#line 129
struct perf_event_context;
#line 130
struct blk_plug;
#line 186
struct cfs_rq;
#line 187
struct task_group;
#line 432 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 471 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 479 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 486 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 498 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 518 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 560
struct autogroup;
#line 561
struct tty_struct;
#line 561
struct taskstats;
#line 561
struct tty_audit_buf;
#line 561 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 741 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 785
struct backing_dev_info;
#line 786
struct reclaim_state;
#line 787 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 801 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 987
struct io_context;
#line 1015
struct uts_namespace;
#line 1016 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 1024 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 1036 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1071 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 1103
struct rt_rq;
#line 1103 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1119 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};
#line 1177 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1598 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int may_oom : 1 ;
};
#line 1605
struct sched_class;
#line 1605
struct files_struct;
#line 1605
struct css_set;
#line 1605
struct compat_robust_list_head;
#line 1605
struct numa_group;
#line 1605
struct ftrace_ret_stack;
#line 1605 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct task_struct *pi_top_task ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults_memory ;
   unsigned long total_numa_faults ;
   unsigned long *numa_faults_buffer_memory ;
   unsigned long *numa_faults_cpu ;
   unsigned long *numa_faults_buffer_cpu ;
   unsigned long numa_faults_locality[2U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow_keys.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 137 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 147 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 355 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 356 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
struct __anonstruct____missing_field_name_183 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};
#line 356 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_182 {
   u64 v64 ;
   struct __anonstruct____missing_field_name_183 __annonCompField59 ;
};
#line 356 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion____missing_field_name_182 __annonCompField60 ;
};
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_184 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};
#line 409
struct sec_path;
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
struct __anonstruct____missing_field_name_186 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_185 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_186 __annonCompField62 ;
};
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_187 {
   unsigned int napi_id ;
   dma_cookie_t dma_cookie ;
};
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_188 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 reserved_tailroom ;
};
#line 409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion____missing_field_name_184 __annonCompField61 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_185 __annonCompField63 ;
   __u32 priority ;
   __u8 local_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   __u8 ndisc_nodetype : 2 ;
   __u8 pfmemalloc : 1 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 head_frag : 1 ;
   __u8 encapsulation : 1 ;
   union __anonunion____missing_field_name_187 __annonCompField64 ;
   __u32 secmark ;
   union __anonunion____missing_field_name_188 __annonCompField65 ;
   __be16 inner_protocol ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 633
struct dst_entry;
#line 701
struct rtable;
#line 134 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/pfkeyv2.h"
struct sadb_alg {
   __u8 sadb_alg_id ;
   __u8 sadb_alg_ivlen ;
   __u16 sadb_alg_minbits ;
   __u16 sadb_alg_maxbits ;
   __u16 sadb_alg_reserved ;
};
#line 279
struct vfsmount;
#line 280
struct qstr;
#line 281
struct nameidata;
#line 282
struct fown_struct;
#line 287
struct xfrm_sec_ctx;
#line 103 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/security.h"
struct flowi;
#line 104
struct xfrm_selector;
#line 105
struct xfrm_policy;
#line 106
struct xfrm_state;
#line 107
struct xfrm_user_sec_ctx;
#line 124
struct request_sock;
#line 359 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/irq.h"
struct proc_dir_entry;
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/hardirq.h"
struct hlist_nulls_node;
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 84 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 48 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 53
enum dev_pm_qos_req_type {
    DEV_PM_QOS_RESUME_LATENCY = 1,
    DEV_PM_QOS_LATENCY_TOLERANCE = 2,
    DEV_PM_QOS_FLAGS = 3
} ;
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm_qos.h"
union __anonunion_data_191 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_191 data ;
   struct device *dev ;
};
#line 68
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 74 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   s32 no_constraint_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 88 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 93 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints resume_latency ;
   struct pm_qos_constraints latency_tolerance ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *resume_latency_req ;
   struct dev_pm_qos_request *latency_tolerance_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/delay.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 43 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_192 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 43 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_192 sync_serial_settings;
#line 50 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_193 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 50 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_193 te1_settings;
#line 55 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_194 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 55 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_194 raw_hdlc_proto;
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_195 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_195 fr_proto;
#line 69 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_196 {
   unsigned int dlci ;
};
#line 69 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_196 fr_proto_pvc;
#line 74 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_197 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 74 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_197 fr_proto_pvc_info;
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_198 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_198 cisco_proto;
#line 117 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 177 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_199 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 177 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_199 ifs_ifsu ;
};
#line 195 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_200 {
   char ifrn_name[16U] ;
};
#line 195 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_201 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 195 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_200 ifr_ifrn ;
   union __anonunion_ifr_ifru_201 ifr_ifru ;
};
#line 91 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kdev_t.h"
struct hlist_bl_node;
#line 91 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rculist_bl.h"
struct __anonstruct____missing_field_name_204 {
   spinlock_t lock ;
   unsigned int count ;
};
#line 114 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rculist_bl.h"
union __anonunion____missing_field_name_203 {
   struct __anonstruct____missing_field_name_204 __annonCompField67 ;
};
#line 114 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion____missing_field_name_203 __annonCompField68 ;
};
#line 49 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockref.h"
struct __anonstruct____missing_field_name_206 {
   u32 hash ;
   u32 len ;
};
#line 49 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockref.h"
union __anonunion____missing_field_name_205 {
   struct __anonstruct____missing_field_name_206 __annonCompField69 ;
   u64 hash_len ;
};
#line 49 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/lockref.h"
struct qstr {
   union __anonunion____missing_field_name_205 __annonCompField70 ;
   unsigned char const   *name ;
};
#line 90 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dcache.h"
struct dentry_operations;
#line 90 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dcache.h"
union __anonunion_d_u_207 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 90 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_207 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 142 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct dentry  const  * , unsigned int  ,
                    char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 477 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/path.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_head list ;
   long nr_items ;
};
#line 30 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   nodemask_t active_nodes ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/radix-tree.h"
struct __anonstruct____missing_field_name_209 {
   struct radix_tree_node *parent ;
   void *private_data ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/radix-tree.h"
union __anonunion____missing_field_name_208 {
   struct __anonstruct____missing_field_name_209 __annonCompField71 ;
   struct callback_head callback_head ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion____missing_field_name_208 __annonCompField72 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};
#line 105 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 45 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 30 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/percpu-rwsem.h"
struct block_device;
#line 31
struct cgroup_subsys_state;
#line 59 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/fs.h"
struct export_operations;
#line 61
struct kstatfs;
#line 62
struct swap_info_struct;
#line 69 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 249 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 76 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 151 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 152 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 166 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
   __u32 qfs_pad ;
};
#line 196 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_statv {
   __s8 qs_version ;
   __u8 qs_pad1 ;
   __u16 qs_flags ;
   __u32 qs_incoredqs ;
   struct fs_qfilestatv qs_uquota ;
   struct fs_qfilestatv qs_gquota ;
   struct fs_qfilestatv qs_pquota ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
   __u64 qs_pad2[8U] ;
};
#line 212
struct dquot;
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/projid.h"
struct __anonstruct_kprojid_t_210 {
   projid_t val ;
};
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_210 kprojid_t;
#line 119 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
typedef long long qsize_t;
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
union __anonunion____missing_field_name_211 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct kqid {
   union __anonunion____missing_field_name_211 __annonCompField73 ;
   enum quota_type type ;
};
#line 178 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xstatev)(struct super_block * , struct fs_quota_statv * ) ;
};
#line 333 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 379 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 319 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned int  , unsigned int  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , unsigned long  , unsigned long  ) ;
   void (*is_dirty_writeback)(struct page * , bool * , bool * ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 379 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 402
struct request_queue;
#line 403
struct hd_struct;
#line 403
struct gendisk;
#line 403 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 475
struct posix_acl;
#line 476
struct inode_operations;
#line 476 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_214 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 476 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_215 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 476
struct file_lock;
#line 476
struct cdev;
#line 476 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_216 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 476 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion____missing_field_name_214 __annonCompField74 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion____missing_field_name_215 __annonCompField75 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_216 __annonCompField76 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};
#line 712 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 720 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 743 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
union __anonunion_f_u_217 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 743 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct file {
   union __anonunion_f_u_217 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};
#line 833 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 834 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 839 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   unsigned long (*lm_owner_key)(struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 857
struct nlm_lockowner;
#line 858 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_219 {
   struct list_head link ;
   int state ;
};
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_218 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_219 afs ;
};
#line 19 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_218 fl_u ;
};
#line 960 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1154 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1170
struct super_operations;
#line 1170
struct xattr_handler;
#line 1170
struct mtd_info;
#line 1170 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
};
#line 1400 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1438 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct dir_context {
   int (*actor)(void * , char const   * , int  , loff_t  , u64  , unsigned int  ) ;
   loff_t pos ;
};
#line 1443 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*iterate)(struct file * , struct dir_context * ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 1481 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*rename2)(struct inode * , struct dentry * , struct inode * , struct dentry * ,
                  unsigned int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
   int (*tmpfile)(struct inode * , struct dentry * , umode_t  ) ;
   int (*set_acl)(struct inode * , struct posix_acl * , int  ) ;
};
#line 1528 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   long (*nr_cached_objects)(struct super_block * , int  ) ;
   long (*free_cached_objects)(struct super_block * , long  , int  ) ;
};
#line 1742 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 276 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 280 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 703 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/compat.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 125 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 187 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 211 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 233 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 259 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 288 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 305 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 404 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 441 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 469 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 568 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 600 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 642 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 675 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 691 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 711 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 722 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 741 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 767 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 901 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 909 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 985 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 252 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ethtool.h"
union __anonunion_in6_u_236 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 252 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/ethtool.h"
struct in6_addr {
   union __anonunion_in6_u_236 in6_u ;
};
#line 46 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/in6.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct __anonstruct_ports_237 {
   __be16 dport ;
   __be16 sport ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct __anonstruct_icmpt_238 {
   __u8 type ;
   __u8 code ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct __anonstruct_dnports_239 {
   __le16 dport ;
   __le16 sport ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct __anonstruct_mht_240 {
   __u8 type ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_237 ports ;
   struct __anonstruct_icmpt_238 icmpt ;
   struct __anonstruct_dnports_239 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_240 mht ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
};
#line 113 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
};
#line 130 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
};
#line 150 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
union __anonunion_u_241 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 150 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct flowi {
   union __anonunion_u_241 u ;
};
#line 202
struct flow_cache_ops;
#line 203 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct flow_cache_object {
   struct flow_cache_ops  const  *ops ;
};
#line 214 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct flow_cache_ops {
   struct flow_cache_object *(*get)(struct flow_cache_object * ) ;
   int (*check)(struct flow_cache_object * ) ;
   void (*delete)(struct flow_cache_object * ) ;
};
#line 235
struct prot_inuse;
#line 236 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct u64_stats_sync {

};
#line 145 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 67 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 83 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 100 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[8U] ;
};
#line 106 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[103U] ;
};
#line 112 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 118 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   struct list_head lru_list ;
   spinlock_t lru_lock ;
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 180 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 181
struct ipv4_devconf;
#line 182
struct fib_rules_ops;
#line 183
struct fib_table;
#line 184 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
};
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 27
struct inet_peer_base;
#line 27
struct xt_table;
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};
#line 95
struct neighbour;
#line 95 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 34
struct rt6_info;
#line 34
struct rt6_statistics;
#line 34
struct fib6_table;
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t rt_genid ;
};
#line 79 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 85 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 14 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
   u16 max_dsize ;
};
#line 21
struct sctp_mib;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 133 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 324 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netfilter.h"
struct nlattr;
#line 337
struct nf_logger;
#line 338 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger  const  *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};
#line 17 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/netfilter.h"
struct ebt_table;
#line 18 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
   bool ulog_warn_deprecated ;
   bool ebt_ulog_warn_deprecated ;
};
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 43 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 48 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 53 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 64 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct hlist_nulls_head tmpl ;
};
#line 72
struct ip_conntrack_stat;
#line 72
struct nf_ct_event_notifier;
#line 72
struct nf_exp_event_notifier;
#line 72 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};
#line 111
struct nft_af_info;
#line 112 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   u8 gencursor ;
   u8 genctr ;
};
#line 16 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
union __anonunion_xfrm_address_t_242 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 16 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
typedef union __anonunion_xfrm_address_t_242 xfrm_address_t;
#line 17 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_id {
   xfrm_address_t daddr ;
   __be32 spi ;
   __u8 proto ;
};
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_sec_ctx {
   __u8 ctx_doi ;
   __u8 ctx_alg ;
   __u16 ctx_len ;
   __u32 ctx_sid ;
   char ctx_str[0U] ;
};
#line 35 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_selector {
   xfrm_address_t daddr ;
   xfrm_address_t saddr ;
   __be16 dport ;
   __be16 dport_mask ;
   __be16 sport ;
   __be16 sport_mask ;
   __u16 family ;
   __u8 prefixlen_d ;
   __u8 prefixlen_s ;
   __u8 proto ;
   int ifindex ;
   __kernel_uid32_t user ;
};
#line 60 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_lifetime_cfg {
   __u64 soft_byte_limit ;
   __u64 hard_byte_limit ;
   __u64 soft_packet_limit ;
   __u64 hard_packet_limit ;
   __u64 soft_add_expires_seconds ;
   __u64 hard_add_expires_seconds ;
   __u64 soft_use_expires_seconds ;
   __u64 hard_use_expires_seconds ;
};
#line 73 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_lifetime_cur {
   __u64 bytes ;
   __u64 packets ;
   __u64 add_time ;
   __u64 use_time ;
};
#line 80 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_replay_state {
   __u32 oseq ;
   __u32 seq ;
   __u32 bitmap ;
};
#line 86 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_replay_state_esn {
   unsigned int bmp_len ;
   __u32 oseq ;
   __u32 seq ;
   __u32 oseq_hi ;
   __u32 seq_hi ;
   __u32 replay_window ;
   __u32 bmp[0U] ;
};
#line 98 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_algo {
   char alg_name[64U] ;
   unsigned int alg_key_len ;
   char alg_key[0U] ;
};
#line 104 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_algo_auth {
   char alg_name[64U] ;
   unsigned int alg_key_len ;
   unsigned int alg_trunc_len ;
   char alg_key[0U] ;
};
#line 111 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_algo_aead {
   char alg_name[64U] ;
   unsigned int alg_key_len ;
   unsigned int alg_icv_len ;
   char alg_key[0U] ;
};
#line 118 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_stats {
   __u32 replay_window ;
   __u32 replay ;
   __u32 integrity_failed ;
};
#line 174 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_sec_ctx {
   __u16 len ;
   __u16 exttype ;
   __u8 ctx_alg ;
   __u8 ctx_doi ;
   __u16 ctx_len ;
};
#line 232 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_tmpl {
   struct xfrm_id id ;
   __u16 family ;
   xfrm_address_t saddr ;
   __u32 reqid ;
   __u8 mode ;
   __u8 share ;
   __u8 optional ;
   __u32 aalgos ;
   __u32 ealgos ;
   __u32 calgos ;
};
#line 245 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_encap_tmpl {
   __u16 encap_type ;
   __be16 encap_sport ;
   __be16 encap_dport ;
   xfrm_address_t encap_oa ;
};
#line 264 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_userpolicy_type {
   __u8 type ;
   __u16 reserved1 ;
   __u8 reserved2 ;
};
#line 273
enum xfrm_attr_type_t {
    XFRMA_UNSPEC = 0,
    XFRMA_ALG_AUTH = 1,
    XFRMA_ALG_CRYPT = 2,
    XFRMA_ALG_COMP = 3,
    XFRMA_ENCAP = 4,
    XFRMA_TMPL = 5,
    XFRMA_SA = 6,
    XFRMA_POLICY = 7,
    XFRMA_SEC_CTX = 8,
    XFRMA_LTIME_VAL = 9,
    XFRMA_REPLAY_VAL = 10,
    XFRMA_REPLAY_THRESH = 11,
    XFRMA_ETIMER_THRESH = 12,
    XFRMA_SRCADDR = 13,
    XFRMA_COADDR = 14,
    XFRMA_LASTUSED = 15,
    XFRMA_POLICY_TYPE = 16,
    XFRMA_MIGRATE = 17,
    XFRMA_ALG_AEAD = 18,
    XFRMA_KMADDRESS = 19,
    XFRMA_ALG_AUTH_TRUNC = 20,
    XFRMA_MARK = 21,
    XFRMA_TFCPAD = 22,
    XFRMA_REPLAY_ESN_VAL = 23,
    XFRMA_SA_EXTRA_FLAGS = 24,
    XFRMA_PROTO = 25,
    XFRMA_ADDRESS_FILTER = 26,
    __XFRMA_MAX = 27
} ;
#line 304 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_mark {
   __u32 v ;
   __u32 m ;
};
#line 319 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrmu_sadhinfo {
   __u32 sadhcnt ;
   __u32 sadhmcnt ;
};
#line 333 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrmu_spdinfo {
   __u32 incnt ;
   __u32 outcnt ;
   __u32 fwdcnt ;
   __u32 inscnt ;
   __u32 outscnt ;
   __u32 fwdscnt ;
};
#line 344 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrmu_spdhinfo {
   __u32 spdhcnt ;
   __u32 spdhmcnt ;
};
#line 349 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_usersa_info {
   struct xfrm_selector sel ;
   struct xfrm_id id ;
   xfrm_address_t saddr ;
   struct xfrm_lifetime_cfg lft ;
   struct xfrm_lifetime_cur curlft ;
   struct xfrm_stats stats ;
   __u32 seq ;
   __u32 reqid ;
   __u16 family ;
   __u8 mode ;
   __u8 replay_window ;
   __u8 flags ;
};
#line 364 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_usersa_id {
   xfrm_address_t daddr ;
   __be32 spi ;
   __u16 family ;
   __u8 proto ;
};
#line 381 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_aevent_id {
   struct xfrm_usersa_id sa_id ;
   xfrm_address_t saddr ;
   __u32 flags ;
   __u32 reqid ;
};
#line 388 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_userspi_info {
   struct xfrm_usersa_info info ;
   __u32 min ;
   __u32 max ;
};
#line 394 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_userpolicy_info {
   struct xfrm_selector sel ;
   struct xfrm_lifetime_cfg lft ;
   struct xfrm_lifetime_cur curlft ;
   __u32 priority ;
   __u32 index ;
   __u8 dir ;
   __u8 action ;
   __u8 flags ;
   __u8 share ;
};
#line 411 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_userpolicy_id {
   struct xfrm_selector sel ;
   __u32 index ;
   __u8 dir ;
};
#line 417 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_acquire {
   struct xfrm_id id ;
   xfrm_address_t saddr ;
   struct xfrm_selector sel ;
   struct xfrm_userpolicy_info policy ;
   __u32 aalgos ;
   __u32 ealgos ;
   __u32 calgos ;
   __u32 seq ;
};
#line 428 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_expire {
   struct xfrm_usersa_info state ;
   __u8 hard ;
};
#line 433 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_polexpire {
   struct xfrm_userpolicy_info pol ;
   __u8 hard ;
};
#line 438 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_usersa_flush {
   __u8 proto ;
};
#line 442 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_report {
   __u8 proto ;
   struct xfrm_selector sel ;
};
#line 447 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_kmaddress {
   xfrm_address_t local ;
   xfrm_address_t remote ;
   __u32 reserved ;
   __u16 family ;
};
#line 456 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_migrate {
   xfrm_address_t old_daddr ;
   xfrm_address_t old_saddr ;
   xfrm_address_t new_daddr ;
   xfrm_address_t new_saddr ;
   __u8 proto ;
   __u8 mode ;
   __u16 reserved ;
   __u32 reqid ;
   __u16 old_family ;
   __u16 new_family ;
};
#line 469 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_user_mapping {
   struct xfrm_usersa_id id ;
   __u32 reqid ;
   xfrm_address_t old_saddr ;
   xfrm_address_t new_saddr ;
   __be16 old_sport ;
   __be16 new_sport ;
};
#line 478 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_address_filter {
   xfrm_address_t saddr ;
   xfrm_address_t daddr ;
   __u16 family ;
   __u8 splen ;
   __u8 dplen ;
};
#line 444 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long  ) ;
   unsigned long data ;
};
#line 567 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/interrupt.h"
struct tasklet_hrtimer {
   struct hrtimer timer ;
   struct tasklet_struct tasklet ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
};
#line 657 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};
#line 16 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 17 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};
#line 74
struct net_generic;
#line 75
struct netns_ipvs;
#line 76 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};
#line 266 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/net_namespace.h"
struct pernet_operations {
   struct list_head list ;
   int (*init)(struct net * ) ;
   void (*exit)(struct net * ) ;
   void (*exit_batch)(struct list_head * ) ;
   int *id ;
   size_t size ;
};
#line 392 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 40 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 102 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 58 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/cgroupstats.h"
struct percpu_ref;
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref * );
#line 55 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_t count ;
   unsigned int *pcpu_count ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_kill ;
   struct callback_head rcu ;
};
#line 173
struct cgroup_root;
#line 174
struct cgroup_subsys;
#line 175
struct cgroup;
#line 57 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   unsigned long flags ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};
#line 126 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   int id ;
   int nr_css ;
   atomic_t refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct kernfs_node *kn ;
   u64 serial_nr ;
   unsigned long subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct cgroup_subsys_state dummy_css ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};
#line 218 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned long flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 309 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct callback_head callback_head ;
};
#line 380 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup_subsys_state * , struct cftype * ) ;
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   int (*write_u64)(struct cgroup_subsys_state * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup_subsys_state * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup_subsys_state * , struct cftype * , char * ) ;
   int (*trigger)(struct cgroup_subsys_state * , unsigned int  ) ;
   struct lock_class_key lockdep_key ;
};
#line 548
struct cgroup_taskset;
#line 556 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state * ) ;
   int (*css_online)(struct cgroup_subsys_state * ) ;
   void (*css_offline)(struct cgroup_subsys_state * ) ;
   void (*css_free)(struct cgroup_subsys_state * ) ;
   int (*can_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup_subsys_state * , struct cgroup_subsys_state * , struct task_struct * ) ;
   void (*bind)(struct cgroup_subsys_state * ) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const   *name ;
   struct cgroup_root *root ;
   struct list_head cfts ;
   struct cftype *base_cftypes ;
};
#line 853 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netprio_cgroup.h"
struct mnt_namespace;
#line 42
struct ipc_namespace;
#line 43 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netprio_cgroup.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};
#line 88 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/nsproxy.h"
struct scm_creds {
   u32 pid ;
   kuid_t uid ;
   kgid_t gid ;
};
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 145 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
struct netlink_skb_parms {
   struct scm_creds creds ;
   __u32 portid ;
   __u32 dst_group ;
   __u32 flags ;
   struct sock *sk ;
};
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
struct netlink_kernel_cfg {
   unsigned int groups ;
   unsigned int flags ;
   void (*input)(struct sk_buff * ) ;
   struct mutex *cb_mutex ;
   void (*bind)(int  ) ;
   bool (*compare)(struct net * , struct sock * ) ;
};
#line 103 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 142 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
struct netlink_dump_control {
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 min_dump_alloc ;
};
#line 179 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 537 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
   __u32 linkstate ;
};
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/if_link.h"
struct netpoll_info;
#line 28
struct phy_device;
#line 29
struct wireless_dev;
#line 64 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 109 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 128 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 189
struct neigh_parms;
#line 210 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 215 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 244 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 295 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct * , int  ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 339
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 387 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 388 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 525
struct Qdisc;
#line 525 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 594 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 606 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 618 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 669 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 692 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 705 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 716 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 727 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 743 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct netdev_phys_port_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 756 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * , void * , u16 (*)(struct net_device * ,
                                                                                     struct sk_buff * ) ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , __be16  , u16  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , __be16  , u16  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_busy_poll)(struct napi_struct * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_link_state)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
   int (*ndo_bridge_setlink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_bridge_getlink)(struct sk_buff * , u32  , u32  , struct net_device * ,
                             u32  ) ;
   int (*ndo_bridge_dellink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_change_carrier)(struct net_device * , bool  ) ;
   int (*ndo_get_phys_port_id)(struct net_device * , struct netdev_phys_port_id * ) ;
   void (*ndo_add_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void (*ndo_del_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void *(*ndo_dfwd_add_station)(struct net_device * , struct net_device * ) ;
   void (*ndo_dfwd_del_station)(struct net_device * , void * ) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff * , struct net_device * , void * ) ;
   int (*ndo_get_lock_subclass)(struct net_device * ) ;
};
#line 1174
enum ldv_29465 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 1183
enum ldv_29466 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
} ;
#line 1188 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct __anonstruct_adj_list_245 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1188 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_246 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1188
struct iw_handler_def;
#line 1188
struct iw_public_data;
#line 1188
struct forwarding_accel_ops;
#line 1188
struct vlan_info;
#line 1188
struct tipc_bearer;
#line 1188
struct in_device;
#line 1188
struct dn_dev;
#line 1188
struct inet6_dev;
#line 1188
struct cpu_rmap;
#line 1188
struct pcpu_lstats;
#line 1188
struct pcpu_sw_netstats;
#line 1188
struct pcpu_dstats;
#line 1188
struct pcpu_vstats;
#line 1188 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
union __anonunion____missing_field_name_247 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};
#line 1188
struct garp_port;
#line 1188
struct mrp_port;
#line 1188
struct rtnl_link_ops;
#line 1188 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct __anonstruct_adj_list_245 adj_list ;
   struct __anonstruct_all_adj_list_246 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_t carrier_changes ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct forwarding_accel_ops  const  *fwd_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   unsigned char broadcast[32U] ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   struct cpu_rmap *rx_cpu_rmap ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_29465 reg_state : 8 ;
   bool dismantle ;
   enum ldv_29466 rtnl_link_state : 16 ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion____missing_field_name_247 __annonCompField79 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct attribute_group  const  *sysfs_rx_queue_group ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 1807 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};
#line 612 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 222 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/res_counter.h"
struct kioctx;
#line 30 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/aio.h"
typedef int kiocb_cancel_fn(struct kiocb * );
#line 31 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/aio.h"
union __anonunion_ki_obj_248 {
   void *user ;
   struct task_struct *tsk ;
};
#line 31
struct eventfd_ctx;
#line 31 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/aio.h"
struct kiocb {
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   kiocb_cancel_fn *ki_cancel ;
   void *private ;
   union __anonunion_ki_obj_248 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   size_t ki_nbytes ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 100 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/aio.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/filter.h"
struct sock_filter_int {
   __u8 code ;
   __u8 a_reg : 4 ;
   __u8 x_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 71 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/filter.h"
union __anonunion____missing_field_name_249 {
   struct sock_filter insns[0U] ;
   struct sock_filter_int insnsi[0U] ;
   struct work_struct work ;
};
#line 71 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   u32 jited : 1 ;
   u32 len : 31 ;
   struct sock_fprog_kern *orig_prog ;
   struct callback_head rcu ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter_int  const  * ) ;
   union __anonunion____missing_field_name_249 __annonCompField80 ;
};
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 113 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy  const  *slave_policy ;
   int (*slave_validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*slave_changelink)(struct net_device * , struct net_device * , struct nlattr ** ,
                           struct nlattr ** ) ;
   size_t (*get_slave_size)(struct net_device  const  * , struct net_device  const  * ) ;
   int (*fill_slave_info)(struct sk_buff * , struct net_device  const  * , struct net_device  const  * ) ;
};
#line 167
struct neigh_table;
#line 167 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[12U] ;
   unsigned long data_state[1U] ;
};
#line 111 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 130
struct neigh_ops;
#line 130 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 159 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 167 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 177 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 190 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 462
struct dn_route;
#line 462 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
union __anonunion____missing_field_name_254 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 462 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sock * , struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion____missing_field_name_254 __annonCompField81 ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct __anonstruct_socket_lock_t_255 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_255 socket_lock_t;
#line 123
struct proto;
#line 129 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
typedef __u32 __portpair;
#line 130 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
typedef __u64 __addrpair;
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_257 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_256 {
   __addrpair skc_addrpair ;
   struct __anonstruct____missing_field_name_257 __annonCompField82 ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_258 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_260 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_259 {
   __portpair skc_portpair ;
   struct __anonstruct____missing_field_name_260 __annonCompField85 ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_261 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_262 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 131 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct sock_common {
   union __anonunion____missing_field_name_256 __annonCompField83 ;
   union __anonunion____missing_field_name_258 __annonCompField84 ;
   union __anonunion____missing_field_name_259 __annonCompField86 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 4 ;
   int skc_bound_dev_if ;
   union __anonunion____missing_field_name_261 __annonCompField87 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion____missing_field_name_262 __annonCompField88 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 216
struct cg_proto;
#line 217 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct __anonstruct_sk_backlog_263 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 217 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_263 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int sk_shutdown : 2 ;
   unsigned int sk_no_check : 2 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 901
struct request_sock_ops;
#line 902
struct timewait_sock_ops;
#line 903
struct inet_hashinfo;
#line 904
struct raw_hashinfo;
#line 919
struct udp_table;
#line 919 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
union __anonunion_h_264 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 919 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock  const  * ) ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_264 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 1044 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
struct cg_proto {
   struct res_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 169 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 47 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 166 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   void *sysctl ;
};
#line 372 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 101 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 110 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 142 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 154 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 165 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 852 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ipv6.h"
union __anonunion____missing_field_name_276 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 852 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion____missing_field_name_276 __annonCompField89 ;
};
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inetpeer.h"
union __anonunion____missing_field_name_277 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inetpeer.h"
struct __anonstruct____missing_field_name_279 {
   atomic_t rid ;
   atomic_t ip_id_count ;
};
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inetpeer.h"
union __anonunion____missing_field_name_278 {
   struct __anonstruct____missing_field_name_279 __annonCompField91 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[15U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion____missing_field_name_277 __annonCompField90 ;
   union __anonunion____missing_field_name_278 __annonCompField92 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   u32 flush_seq ;
   int total ;
};
#line 50 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
};
#line 55 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct rt6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   __u32 fn_sernum ;
   struct rt6_info *rr_ptr ;
};
#line 70 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 86 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_table *rt6i_table ;
   struct fib6_node *rt6i_node ;
   struct in6_addr rt6i_gateway ;
   struct list_head rt6i_siblings ;
   unsigned int rt6i_nsiblings ;
   atomic_t rt6i_ref ;
   struct rt6key rt6i_dst ;
   u32 rt6i_flags ;
   struct rt6key rt6i_src ;
   struct rt6key rt6i_prefsrc ;
   u32 rt6i_metric ;
   struct inet6_dev *rt6i_idev ;
   unsigned long _rt6i_peer ;
   u32 rt6i_genid ;
   unsigned short rt6i_nfheader_len ;
   u8 rt6i_protocol ;
};
#line 219 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_alloc ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
};
#line 228 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   rwlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
};
#line 305 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ip6_fib.h"
struct xfrm_state_walk {
   struct list_head all ;
   u8 state ;
   u8 dying ;
   u8 proto ;
   u32 seq ;
   struct xfrm_address_filter *filter ;
};
#line 126 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
union __anonunion____missing_field_name_281 {
   struct hlist_node gclist ;
   struct hlist_node bydst ;
};
#line 126 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct __anonstruct_props_282 {
   u32 reqid ;
   u8 mode ;
   u8 replay_window ;
   u8 aalgo ;
   u8 ealgo ;
   u8 calgo ;
   u8 flags ;
   u16 family ;
   xfrm_address_t saddr ;
   int header_len ;
   int trailer_len ;
   u32 extra_flags ;
};
#line 126
struct xfrm_replay;
#line 126
struct xfrm_type;
#line 126
struct xfrm_mode;
#line 126 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_state {
   struct net *xs_net ;
   union __anonunion____missing_field_name_281 __annonCompField94 ;
   struct hlist_node bysrc ;
   struct hlist_node byspi ;
   atomic_t refcnt ;
   spinlock_t lock ;
   struct xfrm_id id ;
   struct xfrm_selector sel ;
   struct xfrm_mark mark ;
   u32 tfcpad ;
   u32 genid ;
   struct xfrm_state_walk km ;
   struct __anonstruct_props_282 props ;
   struct xfrm_lifetime_cfg lft ;
   struct xfrm_algo_auth *aalg ;
   struct xfrm_algo *ealg ;
   struct xfrm_algo *calg ;
   struct xfrm_algo_aead *aead ;
   struct xfrm_encap_tmpl *encap ;
   xfrm_address_t *coaddr ;
   struct xfrm_state *tunnel ;
   atomic_t tunnel_users ;
   struct xfrm_replay_state replay ;
   struct xfrm_replay_state_esn *replay_esn ;
   struct xfrm_replay_state preplay ;
   struct xfrm_replay_state_esn *preplay_esn ;
   struct xfrm_replay *repl ;
   u32 xflags ;
   u32 replay_maxage ;
   u32 replay_maxdiff ;
   struct timer_list rtimer ;
   struct xfrm_stats stats ;
   struct xfrm_lifetime_cur curlft ;
   struct tasklet_hrtimer mtimer ;
   long saved_tmo ;
   unsigned long lastused ;
   struct xfrm_type  const  *type ;
   struct xfrm_mode *inner_mode ;
   struct xfrm_mode *inner_mode_iaf ;
   struct xfrm_mode *outer_mode ;
   struct xfrm_sec_ctx *security ;
   void *data ;
};
#line 249 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
union __anonunion_data_283 {
   u32 hard ;
   u32 proto ;
   u32 byid ;
   u32 aevent ;
   u32 type ;
};
#line 249 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct km_event {
   union __anonunion_data_283 data ;
   u32 seq ;
   u32 portid ;
   u32 event ;
   struct net *net ;
};
#line 269 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_replay {
   void (*advance)(struct xfrm_state * , __be32  ) ;
   int (*check)(struct xfrm_state * , struct sk_buff * , __be32  ) ;
   int (*recheck)(struct xfrm_state * , struct sk_buff * , __be32  ) ;
   void (*notify)(struct xfrm_state * , int  ) ;
   int (*overflow)(struct xfrm_state * , struct sk_buff * ) ;
};
#line 313
struct xfrm_tmpl;
#line 319 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_state_afinfo {
   unsigned int family ;
   unsigned int proto ;
   __be16 eth_proto ;
   struct module *owner ;
   struct xfrm_type  const  *type_map[256U] ;
   struct xfrm_mode *mode_map[5U] ;
   int (*init_flags)(struct xfrm_state * ) ;
   void (*init_tempsel)(struct xfrm_selector * , struct flowi  const  * ) ;
   void (*init_temprop)(struct xfrm_state * , struct xfrm_tmpl  const  * , xfrm_address_t const   * ,
                        xfrm_address_t const   * ) ;
   int (*tmpl_sort)(struct xfrm_tmpl ** , struct xfrm_tmpl ** , int  ) ;
   int (*state_sort)(struct xfrm_state ** , struct xfrm_state ** , int  ) ;
   int (*output)(struct sock * , struct sk_buff * ) ;
   int (*output_finish)(struct sk_buff * ) ;
   int (*extract_input)(struct xfrm_state * , struct sk_buff * ) ;
   int (*extract_output)(struct xfrm_state * , struct sk_buff * ) ;
   int (*transport_finish)(struct sk_buff * , int  ) ;
   void (*local_error)(struct sk_buff * , u32  ) ;
};
#line 363 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_type {
   char *description ;
   struct module *owner ;
   u8 proto ;
   u8 flags ;
   int (*init_state)(struct xfrm_state * ) ;
   void (*destructor)(struct xfrm_state * ) ;
   int (*input)(struct xfrm_state * , struct sk_buff * ) ;
   int (*output)(struct xfrm_state * , struct sk_buff * ) ;
   int (*reject)(struct xfrm_state * , struct sk_buff * , struct flowi  const  * ) ;
   int (*hdr_offset)(struct xfrm_state * , struct sk_buff * , u8 ** ) ;
   u32 (*get_mtu)(struct xfrm_state * , int  ) ;
};
#line 387 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_mode {
   int (*input2)(struct xfrm_state * , struct sk_buff * ) ;
   int (*input)(struct xfrm_state * , struct sk_buff * ) ;
   int (*output2)(struct xfrm_state * , struct sk_buff * ) ;
   int (*output)(struct xfrm_state * , struct sk_buff * ) ;
   struct xfrm_state_afinfo *afinfo ;
   struct module *owner ;
   unsigned int encap ;
   int flags ;
};
#line 470 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_tmpl {
   struct xfrm_id id ;
   xfrm_address_t saddr ;
   unsigned short encap_family ;
   u32 reqid ;
   u8 mode ;
   u8 share ;
   u8 optional ;
   u8 allalgs ;
   u32 aalgos ;
   u32 ealgos ;
   u32 calgos ;
};
#line 504 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_policy_walk_entry {
   struct list_head all ;
   u8 dead ;
};
#line 511 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_policy_walk {
   struct xfrm_policy_walk_entry walk ;
   u8 type ;
   u32 seq ;
};
#line 517 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_policy_queue {
   struct sk_buff_head hold_queue ;
   struct timer_list hold_timer ;
   unsigned long timeout ;
};
#line 523 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_policy {
   struct net *xp_net ;
   struct hlist_node bydst ;
   struct hlist_node byidx ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct timer_list timer ;
   struct flow_cache_object flo ;
   atomic_t genid ;
   u32 priority ;
   u32 index ;
   struct xfrm_mark mark ;
   struct xfrm_selector selector ;
   struct xfrm_lifetime_cfg lft ;
   struct xfrm_lifetime_cur curlft ;
   struct xfrm_policy_walk_entry walk ;
   struct xfrm_policy_queue polq ;
   u8 type ;
   u8 action ;
   u8 flags ;
   u8 xfrm_nr ;
   u16 family ;
   struct xfrm_sec_ctx *security ;
   struct xfrm_tmpl xfrm_vec[6U] ;
};
#line 559 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_kmaddress {
   xfrm_address_t local ;
   xfrm_address_t remote ;
   u32 reserved ;
   u16 family ;
};
#line 566 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_migrate {
   xfrm_address_t old_daddr ;
   xfrm_address_t old_saddr ;
   xfrm_address_t new_daddr ;
   xfrm_address_t new_saddr ;
   u8 proto ;
   u8 mode ;
   u16 reserved ;
   u32 reqid ;
   u16 old_family ;
   u16 new_family ;
};
#line 579 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_mgr {
   struct list_head list ;
   char *id ;
   int (*notify)(struct xfrm_state * , struct km_event  const  * ) ;
   int (*acquire)(struct xfrm_state * , struct xfrm_tmpl * , struct xfrm_policy * ) ;
   struct xfrm_policy *(*compile_policy)(struct sock * , int  , u8 * , int  , int * ) ;
   int (*new_mapping)(struct xfrm_state * , xfrm_address_t * , __be16  ) ;
   int (*notify_policy)(struct xfrm_policy * , int  , struct km_event  const  * ) ;
   int (*report)(struct net * , u8  , struct xfrm_selector * , xfrm_address_t * ) ;
   int (*migrate)(struct xfrm_selector  const  * , u8  , u8  , struct xfrm_migrate  const  * ,
                  int  , struct xfrm_kmaddress  const  * ) ;
   bool (*is_alive)(struct km_event  const  * ) ;
};
#line 691 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_audit {
   u32 secid ;
   kuid_t loginuid ;
   unsigned int sessionid ;
};
#line 994 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct sec_path {
   atomic_t refcnt ;
   int len ;
   struct xfrm_state *xvec[6U] ;
};
#line 1329 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_algo_aead_info {
   u16 icv_truncbits ;
};
#line 1336 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_algo_auth_info {
   u16 icv_truncbits ;
   u16 icv_fullbits ;
};
#line 1341 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_algo_encr_info {
   u16 blockbits ;
   u16 defkeybits ;
};
#line 1346 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_algo_comp_info {
   u16 threshold ;
};
#line 1350 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
union __anonunion_uinfo_290 {
   struct xfrm_algo_aead_info aead ;
   struct xfrm_algo_auth_info auth ;
   struct xfrm_algo_encr_info encr ;
   struct xfrm_algo_comp_info comp ;
};
#line 1350 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrm_algo_desc {
   char *name ;
   char *compat ;
   u8 available : 1 ;
   u8 pfkey_supported : 1 ;
   union __anonunion_uinfo_290 uinfo ;
   struct sadb_alg desc ;
};
#line 1477 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrmk_sadinfo {
   u32 sadhcnt ;
   u32 sadhmcnt ;
   u32 sadcnt ;
};
#line 1497 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
struct xfrmk_spdinfo {
   u32 incnt ;
   u32 outcnt ;
   u32 fwdcnt ;
   u32 inscnt ;
   u32 outscnt ;
   u32 fwdscnt ;
   u32 spdhcnt ;
   u32 spdhmcnt ;
};
#line 728 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
struct xfrm_dump_info {
   struct sk_buff *in_skb ;
   struct sk_buff *out_skb ;
   u32 nlmsg_seq ;
   u16 nlmsg_flags ;
};
#line 2307 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
struct xfrm_link {
   int (*doit)(struct sk_buff * , struct nlmsghdr * , struct nlattr ** ) ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
};
#line 3079 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
struct ldv_struct_main_3 {
   int signal_pending ;
};
#line 40 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};
#line 255 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 13 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 186 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 219 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kthread.h"
struct kthread_work;
#line 65 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 72 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 351 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/scatterlist.h"
struct dma_chan;
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spi/spi.h"
struct spi_master;
#line 36 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 155
struct spi_message;
#line 156
struct spi_transfer;
#line 213 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool (*can_dma)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int (*prepare_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_message)(struct spi_master * , struct spi_message * ) ;
   void (*set_cs)(struct spi_device * , bool  ) ;
   int (*transfer_one)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};
#line 502 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spi/spi.h"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 626 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 1 "<compiler builtins>"
int __builtin_bswap32(int  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/err.h"
void *ldv_err_ptr(long error ) ;
#line 30
long ldv_ptr_err(void const   *ptr ) ;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size , gfp_t flags ) ;
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/export.h"
extern struct module __this_module ;
#line 57 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  int tmp ;

  {
  {
#line 60
  tmp = __builtin_bswap32(val);
  }
#line 60
  return ((__u32 )tmp);
}
}
#line 128 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 88 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 66 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/asm-generic/bug.h"
extern void warn_slowpath_fmt(char const   * , int const    , char const   *  , ...) ;
#line 10 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
  {
#line 14
  if (8UL == 1UL) {
#line 14
    goto case_1;
  } else {

  }
#line 14
  if (8UL == 2UL) {
#line 14
    goto case_2;
  } else {

  }
#line 14
  if (8UL == 4UL) {
#line 14
    goto case_4;
  } else {

  }
#line 14
  if (8UL == 8UL) {
#line 14
    goto case_8;
  } else {

  }
#line 14
  goto switch_default;
  case_1: /* CIL Label */ 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3041;
  case_2: /* CIL Label */ 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3041;
  case_4: /* CIL Label */ 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3041;
  case_8: /* CIL Label */ 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3041;
  switch_default: /* CIL Label */ 
  {
#line 14
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_3041: ;
#line 14
  return (pfo_ret__);
}
}
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/string_64.h"
extern void *memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 117
extern void *kmemdup(void const   * , size_t  , gfp_t  ) ;
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/paravirt.h"
extern int ( /* missing proto */  __builtin_unreachable)() ;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/err.h"
__inline static bool IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 43
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  }
#line 43
  return (tmp != 0L);
}
}
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 26
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 89 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 91
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 93
  return;
}
}
#line 101 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 103
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 105
  return;
}
}
#line 115 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 


  {
#line 117
  __asm__  volatile   ("":);
#line 117
  return (0);

#line 117
  return (1);
}
}
#line 28 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_bh(raw_spinlock_t * ) ;
#line 40
extern void _raw_spin_unlock_bh(raw_spinlock_t * ) ;
#line 370 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock.h"
__inline static void spin_lock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 372
  _raw_spin_lock_bh(& lock->__annonCompField20.rlock);
  }
#line 373
  return;
}
}
#line 394
__inline static void ldv_spin_lock_bh_108(spinlock_t *lock ) ;
#line 398
__inline static void ldv_spin_lock_bh_108(spinlock_t *lock ) ;
#line 402
__inline static void ldv_spin_lock_bh_108(spinlock_t *lock ) ;
#line 414 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 416
  _raw_spin_unlock_bh(& lock->__annonCompField20.rlock);
  }
#line 417
  return;
}
}
#line 442
__inline static void ldv_spin_unlock_bh_109(spinlock_t *lock ) ;
#line 446
__inline static void ldv_spin_unlock_bh_109(spinlock_t *lock ) ;
#line 450
__inline static void ldv_spin_unlock_bh_109(spinlock_t *lock ) ;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
extern void ldv_mutex_model_lock(struct mutex * , char * ) ;
#line 24
extern void ldv_mutex_model_unlock(struct mutex * , char * ) ;
#line 33
extern void ldv_spin_model_lock(char * ) ;
#line 34
extern void ldv_spin_model_unlock(char * ) ;
#line 57
static void ldv_mutex_lock_114(struct mutex *ldv_func_arg1 ) ;
#line 126
extern void ldv_rlock_rcu(void) ;
#line 127
extern void ldv_runlock_rcu(void) ;
#line 128
extern void ldv_wlock_rcu(void) ;
#line 129
extern void ldv_wunlock_rcu(void) ;
#line 131
extern void ldv_rcu_read_lock(void) ;
#line 132
extern void ldv_rcu_read_unlock(void) ;
#line 133
extern void *ldv_rcu_dereference(void const   * ) ;
#line 134
extern void ldv_rcu_assign_pointer(void * , void const   * ) ;
#line 136
void ldv_free(void *s ) ;
#line 62 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.h"
extern void ldv_initialize(void) ;
#line 76
extern void ldv_check_final_state(void) ;
#line 113
int ldv_post_init(int init_ret_val ) ;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_assume(int  ) ;
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_int(void) ;
#line 28 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_xmalloc(size_t size ) ;
#line 33 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/thread.h"
extern int pthread_create(pthread_t * , pthread_attr_t const   * , void *(*)(void * ) ,
                          void * ) ;
#line 37
extern int pthread_join(pthread_t  , void ** ) ;
#line 194 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/mutex.h"
static void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) ;
#line 877 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/rcupdate.h"
__inline static void ldv_rcu_read_lock_106(void) ;
#line 903
__inline static void ldv_rcu_read_unlock_107(void) ;
#line 142 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 313
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 452 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/slab.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
  {
#line 469
  tmp___2 = __kmalloc(size, flags);
  }
#line 469
  return (tmp___2);
}
}
#line 649
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 706 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
extern void kfree_skb(struct sk_buff * ) ;
#line 717
extern struct sk_buff *__alloc_skb(unsigned int  , gfp_t  , int  , int  ) ;
#line 720 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 723
  tmp = __alloc_skb(size, priority, 0, -1);
  }
#line 723
  return (tmp);
}
}
#line 1426 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff  const  *skb ) 
{ 


  {
#line 1428
  return ((unsigned int )skb->data_len != 0U);
}
}
#line 1513 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff  const  *skb ) 
{ 


  {
#line 1515
  return ((unsigned char *)(skb->head + (unsigned long )skb->tail));
}
}
#line 1624 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff  const  *skb ) 
{ 
  bool tmp ;

  {
  {
#line 1626
  tmp = skb_is_nonlinear(skb);
  }
#line 1626
  return ((int )tmp ? 0 : (int )((unsigned int )skb->end - (unsigned int )skb->tail));
}
}
#line 1903
extern void skb_trim(struct sk_buff * , unsigned int  ) ;
#line 1847 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/security.h"
extern void security_task_getsecid(struct task_struct * , u32 * ) ;
#line 2865
extern int security_xfrm_policy_alloc(struct xfrm_sec_ctx ** , struct xfrm_user_sec_ctx * ,
                                      gfp_t  ) ;
#line 2868
extern void security_xfrm_policy_free(struct xfrm_sec_ctx * ) ;
#line 2870
extern int security_xfrm_state_alloc(struct xfrm_state * , struct xfrm_user_sec_ctx * ) ;
#line 2873
extern int security_xfrm_state_delete(struct xfrm_state * ) ;
#line 7 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/seq_file_net.h"
extern struct net init_net ;
#line 262 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/net_namespace.h"
__inline static struct net *read_pnet(struct net * const  *pnet ) 
{ 


  {
#line 264
  return ((struct net *)*pnet);
}
}
#line 320
extern int register_pernet_subsys(struct pernet_operations * ) ;
#line 321
extern void unregister_pernet_subsys(struct pernet_operations * ) ;
#line 53 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
extern struct sock *__netlink_kernel_create(struct net * , int  , struct module * ,
                                            struct netlink_kernel_cfg * ) ;
#line 57 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
__inline static struct sock *netlink_kernel_create(struct net *net , int unit , struct netlink_kernel_cfg *cfg ) 
{ 
  struct sock *tmp ;

  {
  {
#line 59
  tmp = __netlink_kernel_create(net, unit, & __this_module, cfg);
  }
#line 59
  return (tmp);
}
}
#line 62
extern void netlink_kernel_release(struct sock * ) ;
#line 67
extern int netlink_has_listeners(struct sock * , unsigned int  ) ;
#line 70
extern int netlink_unicast(struct sock * , struct sk_buff * , __u32  , int  ) ;
#line 71
extern int netlink_broadcast(struct sock * , struct sk_buff * , __u32  , __u32  ,
                             gfp_t  ) ;
#line 141
extern struct nlmsghdr *__nlmsg_put(struct sk_buff * , u32  , u32  , int  , int  ,
                                    int  ) ;
#line 151
extern int __netlink_dump_start(struct sock * , struct sk_buff * , struct nlmsghdr  const  * ,
                                struct netlink_dump_control * ) ;
#line 154 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netlink.h"
__inline static int netlink_dump_start(struct sock *ssk , struct sk_buff *skb , struct nlmsghdr  const  *nlh ,
                                       struct netlink_dump_control *control ) 
{ 
  int tmp ;

  {
#line 158
  if ((unsigned long )control->module == (unsigned long )((struct module *)0)) {
#line 159
    control->module = & __this_module;
  } else {

  }
  {
#line 161
  tmp = __netlink_dump_start(ssk, skb, nlh, control);
  }
#line 161
  return (tmp);
}
}
#line 178
extern bool netlink_net_capable(struct sk_buff  const  * , int  ) ;
#line 1978 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/netdevice.h"
extern void synchronize_net(void) ;
#line 228 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
extern int netlink_rcv_skb(struct sk_buff * , int (*)(struct sk_buff * , struct nlmsghdr * ) ) ;
#line 235
extern int nla_parse(struct nlattr ** , int  , struct nlattr  const  * , int  , struct nla_policy  const  * ) ;
#line 245
extern struct nlattr *nla_reserve(struct sk_buff * , int  , int  ) ;
#line 250
extern int nla_put(struct sk_buff * , int  , int  , void const   * ) ;
#line 262 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_msg_size(int payload ) 
{ 


  {
#line 264
  return (payload + 16);
}
}
#line 271 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_total_size(int payload ) 
{ 
  int tmp ;

  {
  {
#line 273
  tmp = nlmsg_msg_size(payload);
  }
#line 273
  return ((int )((unsigned int )tmp + 3U) & -4);
}
}
#line 289 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr  const  *nlh ) 
{ 


  {
#line 291
  return ((void *)((unsigned char *)nlh + 16UL));
}
}
#line 298 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr  const  *nlh ) 
{ 


  {
#line 300
  return ((int )((unsigned int )nlh->nlmsg_len - 16U));
}
}
#line 308 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static struct nlattr *nlmsg_attrdata(struct nlmsghdr  const  *nlh , int hdrlen ) 
{ 
  unsigned char *data ;
  void *tmp ;

  {
  {
#line 311
  tmp = nlmsg_data(nlh);
#line 311
  data = (unsigned char *)tmp;
  }
#line 312
  return ((struct nlattr *)(data + ((unsigned long )((unsigned int )hdrlen + 3U) & 4294967292UL)));
}
}
#line 320 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr  const  *nlh , int hdrlen ) 
{ 
  int tmp ;

  {
  {
#line 322
  tmp = nlmsg_len(nlh);
  }
#line 322
  return ((int )((unsigned int )tmp - (((unsigned int )hdrlen + 3U) & 4294967292U)));
}
}
#line 365 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_parse(struct nlmsghdr  const  *nlh , int hdrlen , struct nlattr **tb ,
                                int maxtype , struct nla_policy  const  *policy ) 
{ 
  int tmp ;
  int tmp___0 ;
  struct nlattr *tmp___1 ;
  int tmp___2 ;

  {
  {
#line 369
  tmp = nlmsg_msg_size(hdrlen);
  }
#line 369
  if ((unsigned int )nlh->nlmsg_len < (unsigned int )tmp) {
#line 370
    return (-22);
  } else {

  }
  {
#line 372
  tmp___0 = nlmsg_attrlen(nlh, hdrlen);
#line 372
  tmp___1 = nlmsg_attrdata(nlh, hdrlen);
#line 372
  tmp___2 = nla_parse(tb, maxtype, (struct nlattr  const  *)tmp___1, tmp___0, policy);
  }
#line 372
  return (tmp___2);
}
}
#line 443 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static struct nlmsghdr *nlmsg_put(struct sk_buff *skb , u32 portid , u32 seq ,
                                           int type , int payload , int flags ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct nlmsghdr *tmp___2 ;

  {
  {
#line 446
  tmp = skb_tailroom((struct sk_buff  const  *)skb);
#line 446
  tmp___0 = nlmsg_total_size(payload);
#line 446
  tmp___1 = __builtin_expect(tmp < tmp___0, 0L);
  }
#line 446
  if (tmp___1 != 0L) {
#line 447
    return ((struct nlmsghdr *)0);
  } else {

  }
  {
#line 449
  tmp___2 = __nlmsg_put(skb, portid, seq, type, payload, flags);
  }
#line 449
  return (tmp___2);
}
}
#line 480 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static struct sk_buff *nlmsg_new(size_t payload , gfp_t flags ) 
{ 
  int tmp ;
  struct sk_buff *tmp___0 ;

  {
  {
#line 482
  tmp = nlmsg_total_size((int )payload);
#line 482
  tmp___0 = alloc_skb((unsigned int )tmp, flags);
  }
#line 482
  return (tmp___0);
}
}
#line 496 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_end(struct sk_buff *skb , struct nlmsghdr *nlh ) 
{ 
  unsigned char *tmp ;

  {
  {
#line 498
  tmp = skb_tail_pointer((struct sk_buff  const  *)skb);
#line 498
  nlh->nlmsg_len = (__u32 )((long )tmp) - (__u32 )((long )nlh);
  }
#line 500
  return ((int )skb->len);
}
}
#line 521 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static void nlmsg_trim(struct sk_buff *skb , void const   *mark ) 
{ 


  {
#line 523
  if ((unsigned long )mark != (unsigned long )((void const   *)0)) {
    {
#line 524
    skb_trim(skb, (unsigned int )((long )mark) - (unsigned int )((long )skb->data));
    }
  } else {

  }
#line 525
  return;
}
}
#line 535 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static void nlmsg_cancel(struct sk_buff *skb , struct nlmsghdr *nlh ) 
{ 


  {
  {
#line 537
  nlmsg_trim(skb, (void const   *)nlh);
  }
#line 538
  return;
}
}
#line 557 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_multicast(struct sock *sk , struct sk_buff *skb , u32 portid ,
                                    unsigned int group , gfp_t flags ) 
{ 
  int err ;

  {
  {
#line 562
  ((struct netlink_skb_parms *)(& skb->cb))->dst_group = group;
#line 564
  err = netlink_broadcast(sk, skb, portid, group, flags);
  }
#line 565
  if (err > 0) {
#line 566
    err = 0;
  } else {

  }
#line 568
  return (err);
}
}
#line 577 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nlmsg_unicast(struct sock *sk , struct sk_buff *skb , u32 portid ) 
{ 
  int err ;

  {
  {
#line 581
  err = netlink_unicast(sk, skb, portid, 64);
  }
#line 582
  if (err > 0) {
#line 583
    err = 0;
  } else {

  }
#line 585
  return (err);
}
}
#line 632 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nla_attr_size(int payload ) 
{ 


  {
#line 634
  return (payload + 4);
}
}
#line 641 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nla_total_size(int payload ) 
{ 
  int tmp ;

  {
  {
#line 643
  tmp = nla_attr_size(payload);
  }
#line 643
  return ((tmp + 3) & -4);
}
}
#line 668 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static void *nla_data(struct nlattr  const  *nla ) 
{ 


  {
#line 670
  return ((void *)((char *)nla + 4UL));
}
}
#line 677 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nla_len(struct nlattr  const  *nla ) 
{ 


  {
#line 679
  return ((int )nla->nla_len + -4);
}
}
#line 800 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nla_put_u32(struct sk_buff *skb , int attrtype , u32 value ) 
{ 
  int tmp ;

  {
  {
#line 802
  tmp = nla_put(skb, attrtype, 4, (void const   *)(& value));
  }
#line 802
  return (tmp);
}
}
#line 844 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static int nla_put_u64(struct sk_buff *skb , int attrtype , u64 value ) 
{ 
  int tmp ;

  {
  {
#line 846
  tmp = nla_put(skb, attrtype, 8, (void const   *)(& value));
  }
#line 846
  return (tmp);
}
}
#line 965 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static u32 nla_get_u32(struct nlattr  const  *nla ) 
{ 
  void *tmp ;

  {
  {
#line 967
  tmp = nla_data(nla);
  }
#line 967
  return (*((u32 *)tmp));
}
}
#line 1010 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/netlink.h"
__inline static u8 nla_get_u8(struct nlattr  const  *nla ) 
{ 
  void *tmp ;

  {
  {
#line 1012
  tmp = nla_data(nla);
  }
#line 1012
  return (*((u8 *)tmp));
}
}
#line 2213 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/sock.h"
__inline static struct net *sock_net(struct sock  const  *sk ) 
{ 
  struct net *tmp ;

  {
  {
#line 2215
  tmp = read_pnet(& sk->__sk_common.skc_net);
  }
#line 2215
  return (tmp);
}
}
#line 215 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/audit.h"
__inline static kuid_t audit_get_loginuid(struct task_struct *tsk ) 
{ 


  {
#line 217
  return (tsk->loginuid);
}
}
#line 220 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/linux/audit.h"
__inline static unsigned int audit_get_sessionid(struct task_struct *tsk ) 
{ 


  {
#line 222
  return (tsk->sessionid);
}
}
#line 412 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_equal(struct in6_addr  const  *a1 , struct in6_addr  const  *a2 ) 
{ 
  unsigned long const   *ul1 ;
  unsigned long const   *ul2 ;

  {
#line 416
  ul1 = (unsigned long const   *)a1;
#line 417
  ul2 = (unsigned long const   *)a2;
#line 419
  return ((((unsigned long )*ul1 ^ (unsigned long )*ul2) | ((unsigned long )*(ul1 + 1UL) ^ (unsigned long )*(ul2 + 1UL))) == 0UL);
}
}
#line 236 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static struct net *xs_net(struct xfrm_state *x ) 
{ 
  struct net *tmp ;

  {
  {
#line 238
  tmp = read_pnet((struct net * const  *)(& x->xs_net));
  }
#line 238
  return (tmp);
}
}
#line 310
extern void km_policy_notify(struct xfrm_policy * , int  , struct km_event  const  * ) ;
#line 312
extern void km_state_notify(struct xfrm_state * , struct km_event  const  * ) ;
#line 315
extern int km_query(struct xfrm_state * , struct xfrm_tmpl * , struct xfrm_policy * ) ;
#line 317
extern void km_state_expired(struct xfrm_state * , int  , u32  ) ;
#line 318
extern int __xfrm_state_delete(struct xfrm_state * ) ;
#line 555 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static struct net *xp_net(struct xfrm_policy  const  *xp ) 
{ 
  struct net *tmp ;

  {
  {
#line 557
  tmp = read_pnet(& xp->xp_net);
  }
#line 557
  return (tmp);
}
}
#line 609
extern int xfrm_register_km(struct xfrm_mgr * ) ;
#line 610
extern int xfrm_unregister_km(struct xfrm_mgr * ) ;
#line 732
extern void xfrm_audit_policy_add(struct xfrm_policy * , int  , kuid_t  , unsigned int  ,
                                  u32  ) ;
#line 734
extern void xfrm_audit_policy_delete(struct xfrm_policy * , int  , kuid_t  , unsigned int  ,
                                     u32  ) ;
#line 736
extern void xfrm_audit_state_add(struct xfrm_state * , int  , kuid_t  , unsigned int  ,
                                 u32  ) ;
#line 738
extern void xfrm_audit_state_delete(struct xfrm_state * , int  , kuid_t  , unsigned int  ,
                                    u32  ) ;
#line 803
extern void xfrm_policy_destroy(struct xfrm_policy * ) ;
#line 805 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static void xfrm_pol_put(struct xfrm_policy *policy ) 
{ 
  int tmp ;

  {
  {
#line 807
  tmp = atomic_dec_and_test(& policy->refcnt);
  }
#line 807
  if (tmp != 0) {
    {
#line 808
    xfrm_policy_destroy(policy);
    }
  } else {

  }
#line 809
  return;
}
}
#line 818
extern void __xfrm_state_destroy(struct xfrm_state * ) ;
#line 820 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static void __xfrm_state_put(struct xfrm_state *x ) 
{ 


  {
  {
#line 822
  atomic_dec(& x->refcnt);
  }
#line 823
  return;
}
}
#line 825 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static void xfrm_state_put(struct xfrm_state *x ) 
{ 
  int tmp ;

  {
  {
#line 827
  tmp = atomic_dec_and_test(& x->refcnt);
  }
#line 827
  if (tmp != 0) {
    {
#line 828
    __xfrm_state_destroy(x);
    }
  } else {

  }
#line 829
  return;
}
}
#line 831 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static void xfrm_state_hold(struct xfrm_state *x ) 
{ 


  {
  {
#line 833
  atomic_inc(& x->refcnt);
  }
#line 834
  return;
}
}
#line 1168
extern int xfrm_policy_delete(struct xfrm_policy * , int  ) ;
#line 1182
extern void xfrm_garbage_collect(struct net * ) ;
#line 1317 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_state_kern(struct xfrm_state  const  *x ) 
{ 
  int tmp ;

  {
  {
#line 1319
  tmp = atomic_read(& x->tunnel_users);
  }
#line 1319
  return (tmp);
}
}
#line 1322 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_id_proto_match(u8 proto , u8 userproto ) 
{ 


  {
#line 1324
  return (((unsigned int )userproto == 0U || (int )proto == (int )userproto) || ((unsigned int )userproto == 255U && ((unsigned int )proto - 50U <= 1U || (unsigned int )proto == 108U)));
}
}
#line 1442
extern void xfrm_state_walk_init(struct xfrm_state_walk * , u8  , struct xfrm_address_filter * ) ;
#line 1444
extern int xfrm_state_walk(struct net * , struct xfrm_state_walk * , int (*)(struct xfrm_state * ,
                                                                             int  ,
                                                                             void * ) ,
                           void * ) ;
#line 1446
extern void xfrm_state_walk_done(struct xfrm_state_walk * , struct net * ) ;
#line 1447
extern struct xfrm_state *xfrm_state_alloc(struct net * ) ;
#line 1463
extern int xfrm_state_add(struct xfrm_state * ) ;
#line 1464
extern int xfrm_state_update(struct xfrm_state * ) ;
#line 1465
extern struct xfrm_state *xfrm_state_lookup(struct net * , u32  , xfrm_address_t const   * ,
                                            __be32  , u8  , unsigned short  ) ;
#line 1468
extern struct xfrm_state *xfrm_state_lookup_byaddr(struct net * , u32  , xfrm_address_t const   * ,
                                                   xfrm_address_t const   * , u8  ,
                                                   unsigned short  ) ;
#line 1509
extern struct xfrm_state *xfrm_find_acq_byseq(struct net * , u32  , u32  ) ;
#line 1510
extern int xfrm_state_delete(struct xfrm_state * ) ;
#line 1511
extern int xfrm_state_flush(struct net * , u8  , struct xfrm_audit * ) ;
#line 1512
extern void xfrm_sad_getinfo(struct net * , struct xfrmk_sadinfo * ) ;
#line 1513
extern void xfrm_spd_getinfo(struct net * , struct xfrmk_spdinfo * ) ;
#line 1515
extern int xfrm_init_replay(struct xfrm_state * ) ;
#line 1517
extern int __xfrm_init_state(struct xfrm_state * , bool  ) ;
#line 1591
extern struct xfrm_policy *xfrm_policy_alloc(struct net * , gfp_t  ) ;
#line 1593
extern void xfrm_policy_walk_init(struct xfrm_policy_walk * , u8  ) ;
#line 1594
extern int xfrm_policy_walk(struct net * , struct xfrm_policy_walk * , int (*)(struct xfrm_policy * ,
                                                                               int  ,
                                                                               int  ,
                                                                               void * ) ,
                            void * ) ;
#line 1597
extern void xfrm_policy_walk_done(struct xfrm_policy_walk * , struct net * ) ;
#line 1598
extern int xfrm_policy_insert(int  , struct xfrm_policy * , int  ) ;
#line 1599
extern struct xfrm_policy *xfrm_policy_bysel_ctx(struct net * , u32  , u8  , int  ,
                                                 struct xfrm_selector * , struct xfrm_sec_ctx * ,
                                                 int  , int * ) ;
#line 1604
extern struct xfrm_policy *xfrm_policy_byid(struct net * , u32  , u8  , int  , u32  ,
                                            int  , int * ) ;
#line 1606
extern int xfrm_policy_flush(struct net * , u8  , struct xfrm_audit * ) ;
#line 1607
extern u32 xfrm_get_acqseq(void) ;
#line 1608
extern int verify_spi_info(u8  , u32  , u32  ) ;
#line 1609
extern int xfrm_alloc_spi(struct xfrm_state * , u32  , u32  ) ;
#line 1610
extern struct xfrm_state *xfrm_find_acq(struct net * , struct xfrm_mark  const  * ,
                                        u8  , u32  , u8  , xfrm_address_t const   * ,
                                        xfrm_address_t const   * , int  , unsigned short  ) ;
#line 1624
extern int xfrm_migrate(struct xfrm_selector  const  * , u8  , u8  , struct xfrm_migrate * ,
                        int  , struct xfrm_kmaddress * , struct net * ) ;
#line 1630
extern void km_policy_expired(struct xfrm_policy * , int  , int  , u32  ) ;
#line 1645
extern struct xfrm_algo_desc *xfrm_aalg_get_byname(char const   * , int  ) ;
#line 1646
extern struct xfrm_algo_desc *xfrm_ealg_get_byname(char const   * , int  ) ;
#line 1647
extern struct xfrm_algo_desc *xfrm_calg_get_byname(char const   * , int  ) ;
#line 1648
extern struct xfrm_algo_desc *xfrm_aead_get_byname(char const   * , int  , int  ) ;
#line 1651 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static bool xfrm6_addr_equal(xfrm_address_t const   *a , xfrm_address_t const   *b ) 
{ 
  bool tmp ;

  {
  {
#line 1654
  tmp = ipv6_addr_equal((struct in6_addr  const  *)a, (struct in6_addr  const  *)b);
  }
#line 1654
  return (tmp);
}
}
#line 1658 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static bool xfrm_addr_equal(xfrm_address_t const   *a , xfrm_address_t const   *b ,
                                     sa_family_t family ) 
{ 
  bool tmp ;

  {
  {
#line 1664
  if ((int )family == 2) {
#line 1664
    goto case_2;
  } else {

  }
#line 1666
  if ((int )family == 10) {
#line 1666
    goto case_10;
  } else {

  }
#line 1663
  goto switch_default;
  switch_default: /* CIL Label */ ;
  case_2: /* CIL Label */ ;
#line 1665
  return ((unsigned int )a->a4 == (unsigned int )b->a4);
  case_10: /* CIL Label */ 
  {
#line 1667
  tmp = xfrm6_addr_equal(a, b);
  }
#line 1667
  return (tmp);
  switch_break: /* CIL Label */ ;
  }
}
}
#line 1690 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_acquire_is_on(struct net *net ) 
{ 
  struct sock *nlsk ;
  int ret ;
  void *p ;

  {
  {
#line 1693
  ret = 0;
#line 1695
  ldv_rcu_read_lock_106();
#line 1696
  ldv_rlock_rcu();
#line 1696
  p = ldv_rcu_dereference((void const   *)net->xfrm.nlsk);
#line 1696
  ldv_runlock_rcu();
#line 1696
  nlsk = (struct sock *)p;
  }
#line 1697
  if ((unsigned long )nlsk != (unsigned long )((struct sock *)0)) {
    {
#line 1698
    ret = netlink_has_listeners(nlsk, 1U);
    }
  } else {

  }
  {
#line 1699
  ldv_rcu_read_unlock_107();
  }
#line 1701
  return (ret);
}
}
#line 1705 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int aead_len(struct xfrm_algo_aead *alg ) 
{ 


  {
#line 1707
  return ((int )((alg->alg_key_len + 7U) / 8U + 72U));
}
}
#line 1710 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_alg_len(struct xfrm_algo  const  *alg ) 
{ 


  {
#line 1712
  return ((int )(((unsigned int )alg->alg_key_len + 7U) / 8U + 68U));
}
}
#line 1715 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_alg_auth_len(struct xfrm_algo_auth  const  *alg ) 
{ 


  {
#line 1717
  return ((int )(((unsigned int )alg->alg_key_len + 7U) / 8U + 72U));
}
}
#line 1720 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_replay_state_esn_len(struct xfrm_replay_state_esn *replay_esn ) 
{ 


  {
#line 1722
  return ((int )((unsigned int )((unsigned long )replay_esn->bmp_len + 6UL) * 4U));
}
}
#line 1786 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_mark_get(struct nlattr **attrs , struct xfrm_mark *m ) 
{ 
  void *tmp ;
  __u32 tmp___0 ;

  {
#line 1788
  if ((unsigned long )*(attrs + 21UL) != (unsigned long )((struct nlattr *)0)) {
    {
#line 1789
    tmp = nla_data((struct nlattr  const  *)*(attrs + 21UL));
#line 1789
    memcpy((void *)m, (void const   *)tmp, 8UL);
    }
  } else {
#line 1791
    tmp___0 = 0U;
#line 1791
    m->m = tmp___0;
#line 1791
    m->v = tmp___0;
  }
#line 1793
  return ((int )(m->v & m->m));
}
}
#line 1796 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/include/net/xfrm.h"
__inline static int xfrm_mark_put(struct sk_buff *skb , struct xfrm_mark  const  *m ) 
{ 
  int ret ;

  {
#line 1798
  ret = 0;
#line 1800
  if (((unsigned int )m->m | (unsigned int )m->v) != 0U) {
    {
#line 1801
    ret = nla_put(skb, 21, 8, (void const   *)m);
    }
  } else {

  }
#line 1802
  return (ret);
}
}
#line 35 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_one_alg(struct nlattr **attrs , enum xfrm_attr_type_t type ) 
{ 
  struct nlattr *rt ;
  struct xfrm_algo *algp ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 37
  rt = *(attrs + (unsigned long )type);
#line 40
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 41
    return (0);
  } else {

  }
  {
#line 43
  tmp = nla_data((struct nlattr  const  *)rt);
#line 43
  algp = (struct xfrm_algo *)tmp;
#line 44
  tmp___0 = nla_len((struct nlattr  const  *)rt);
#line 44
  tmp___1 = xfrm_alg_len((struct xfrm_algo  const  *)algp);
  }
#line 44
  if (tmp___0 < tmp___1) {
#line 45
    return (-22);
  } else {

  }
  {
#line 48
  if ((unsigned int )type == 1U) {
#line 48
    goto case_1;
  } else {

  }
#line 49
  if ((unsigned int )type == 2U) {
#line 49
    goto case_2;
  } else {

  }
#line 50
  if ((unsigned int )type == 3U) {
#line 50
    goto case_3;
  } else {

  }
#line 53
  goto switch_default;
  case_1: /* CIL Label */ ;
  case_2: /* CIL Label */ ;
  case_3: /* CIL Label */ ;
#line 51
  goto ldv_50694;
  switch_default: /* CIL Label */ ;
#line 54
  return (-22);
  switch_break: /* CIL Label */ ;
  }
  ldv_50694: 
#line 57
  algp->alg_name[63] = 0;
#line 58
  return (0);
}
}
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_auth_trunc(struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_algo_auth *algp ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 63
  rt = *(attrs + 20UL);
#line 66
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 67
    return (0);
  } else {

  }
  {
#line 69
  tmp = nla_data((struct nlattr  const  *)rt);
#line 69
  algp = (struct xfrm_algo_auth *)tmp;
#line 70
  tmp___0 = nla_len((struct nlattr  const  *)rt);
#line 70
  tmp___1 = xfrm_alg_auth_len((struct xfrm_algo_auth  const  *)algp);
  }
#line 70
  if (tmp___0 < tmp___1) {
#line 71
    return (-22);
  } else {

  }
#line 73
  algp->alg_name[63] = 0;
#line 74
  return (0);
}
}
#line 77 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_aead(struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_algo_aead *algp ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 79
  rt = *(attrs + 18UL);
#line 82
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 83
    return (0);
  } else {

  }
  {
#line 85
  tmp = nla_data((struct nlattr  const  *)rt);
#line 85
  algp = (struct xfrm_algo_aead *)tmp;
#line 86
  tmp___0 = nla_len((struct nlattr  const  *)rt);
#line 86
  tmp___1 = aead_len(algp);
  }
#line 86
  if (tmp___0 < tmp___1) {
#line 87
    return (-22);
  } else {

  }
#line 89
  algp->alg_name[63] = 0;
#line 90
  return (0);
}
}
#line 93 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void verify_one_addr(struct nlattr **attrs , enum xfrm_attr_type_t type , xfrm_address_t **addrp ) 
{ 
  struct nlattr *rt ;
  void *tmp ;

  {
#line 96
  rt = *(attrs + (unsigned long )type);
#line 98
  if ((unsigned long )rt != (unsigned long )((struct nlattr *)0) && (unsigned long )addrp != (unsigned long )((xfrm_address_t **)0)) {
    {
#line 99
    tmp = nla_data((struct nlattr  const  *)rt);
#line 99
    *addrp = (xfrm_address_t *)tmp;
    }
  } else {

  }
#line 100
  return;
}
}
#line 102 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static int verify_sec_ctx_len(struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_user_sec_ctx *uctx ;
  void *tmp ;

  {
#line 104
  rt = *(attrs + 8UL);
#line 107
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 108
    return (0);
  } else {

  }
  {
#line 110
  tmp = nla_data((struct nlattr  const  *)rt);
#line 110
  uctx = (struct xfrm_user_sec_ctx *)tmp;
  }
#line 111
  if ((unsigned long )uctx->len != (unsigned long )uctx->ctx_len + 8UL) {
#line 112
    return (-22);
  } else {

  }
#line 114
  return (0);
}
}
#line 117 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static int verify_replay(struct xfrm_usersa_info *p , struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_replay_state_esn *rs ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 120
  rt = *(attrs + 23UL);
#line 123
  if ((int )((signed char )p->flags) < 0) {
#line 124
    if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 125
      return (-22);
    } else {

    }
    {
#line 127
    tmp = nla_data((struct nlattr  const  *)rt);
#line 127
    rs = (struct xfrm_replay_state_esn *)tmp;
    }
#line 129
    if (rs->bmp_len > 128U) {
#line 130
      return (-22);
    } else {

    }
    {
#line 132
    tmp___0 = nla_len((struct nlattr  const  *)rt);
#line 132
    tmp___1 = xfrm_replay_state_esn_len(rs);
    }
#line 132
    if (tmp___0 < tmp___1) {
      {
#line 132
      tmp___2 = nla_len((struct nlattr  const  *)rt);
      }
#line 132
      if (tmp___2 != 24) {
#line 134
        return (-22);
      } else {

      }
    } else {

    }
  } else {

  }
#line 137
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 138
    return (0);
  } else {

  }
#line 141
  if ((unsigned int )p->id.proto - 50U > 1U) {
#line 142
    return (-22);
  } else {

  }
#line 144
  if ((unsigned int )p->replay_window != 0U) {
#line 145
    return (-22);
  } else {

  }
#line 147
  return (0);
}
}
#line 150 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_newsa_info(struct xfrm_usersa_info *p , struct nlattr **attrs ) 
{ 
  int err ;
  __u32 tmp ;

  {
#line 155
  err = -22;
  {
#line 157
  if ((int )p->family == 2) {
#line 157
    goto case_2;
  } else {

  }
#line 160
  if ((int )p->family == 10) {
#line 160
    goto case_10;
  } else {

  }
#line 168
  goto switch_default;
  case_2: /* CIL Label */ ;
#line 158
  goto ldv_50729;
  case_10: /* CIL Label */ ;
#line 162
  goto ldv_50729;
  switch_default: /* CIL Label */ ;
#line 169
  goto out;
  switch_break: /* CIL Label */ ;
  }
  ldv_50729: 
#line 172
  err = -22;
  {
#line 174
  if ((int )p->id.proto == 51) {
#line 174
    goto case_51;
  } else {

  }
#line 186
  if ((int )p->id.proto == 50) {
#line 186
    goto case_50;
  } else {

  }
#line 204
  if ((int )p->id.proto == 108) {
#line 204
    goto case_108;
  } else {

  }
#line 215
  if ((int )p->id.proto == 60) {
#line 215
    goto case_60;
  } else {

  }
#line 216
  if ((int )p->id.proto == 43) {
#line 216
    goto case_43;
  } else {

  }
#line 230
  goto switch_default___0;
  case_51: /* CIL Label */ ;
#line 175
  if ((((((unsigned long )*(attrs + 1UL) == (unsigned long )((struct nlattr *)0) && (unsigned long )*(attrs + 20UL) == (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 18UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 2UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 3UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 22UL) != (unsigned long )((struct nlattr *)0)) {
#line 183
    goto out;
  } else {
    {
#line 175
    tmp = __fswab32(p->id.spi);
    }
#line 175
    if (tmp > 65535U) {
#line 183
      goto out;
    } else {

    }
  }
#line 184
  goto ldv_50734;
  case_50: /* CIL Label */ ;
#line 187
  if ((unsigned long )*(attrs + 3UL) != (unsigned long )((struct nlattr *)0)) {
#line 188
    goto out;
  } else {

  }
#line 189
  if ((((unsigned long )*(attrs + 1UL) == (unsigned long )((struct nlattr *)0) && (unsigned long )*(attrs + 20UL) == (unsigned long )((struct nlattr *)0)) && (unsigned long )*(attrs + 2UL) == (unsigned long )((struct nlattr *)0)) && (unsigned long )*(attrs + 18UL) == (unsigned long )((struct nlattr *)0)) {
#line 193
    goto out;
  } else {

  }
#line 194
  if ((((unsigned long )*(attrs + 1UL) != (unsigned long )((struct nlattr *)0) || (unsigned long )*(attrs + 20UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 2UL) != (unsigned long )((struct nlattr *)0)) && (unsigned long )*(attrs + 18UL) != (unsigned long )((struct nlattr *)0)) {
#line 198
    goto out;
  } else {

  }
#line 199
  if ((unsigned long )*(attrs + 22UL) != (unsigned long )((struct nlattr *)0) && (unsigned int )p->mode != 1U) {
#line 201
    goto out;
  } else {

  }
#line 202
  goto ldv_50734;
  case_108: /* CIL Label */ ;
#line 205
  if ((((((unsigned long )*(attrs + 3UL) == (unsigned long )((struct nlattr *)0) || (unsigned long )*(attrs + 18UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 1UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 20UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 2UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 22UL) != (unsigned long )((struct nlattr *)0)) {
#line 211
    goto out;
  } else {

  }
#line 212
  goto ldv_50734;
  case_60: /* CIL Label */ ;
  case_43: /* CIL Label */ ;
#line 217
  if (((((((((unsigned long )*(attrs + 3UL) != (unsigned long )((struct nlattr *)0) || (unsigned long )*(attrs + 1UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 20UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 18UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 2UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 4UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 8UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 22UL) != (unsigned long )((struct nlattr *)0)) || (unsigned long )*(attrs + 14UL) == (unsigned long )((struct nlattr *)0)) {
#line 226
    goto out;
  } else {

  }
#line 227
  goto ldv_50734;
  switch_default___0: /* CIL Label */ ;
#line 231
  goto out;
  switch_break___0: /* CIL Label */ ;
  }
  ldv_50734: 
  {
#line 234
  err = verify_aead(attrs);
  }
#line 234
  if (err != 0) {
#line 235
    goto out;
  } else {

  }
  {
#line 236
  err = verify_auth_trunc(attrs);
  }
#line 236
  if (err != 0) {
#line 237
    goto out;
  } else {

  }
  {
#line 238
  err = verify_one_alg(attrs, 1);
  }
#line 238
  if (err != 0) {
#line 239
    goto out;
  } else {

  }
  {
#line 240
  err = verify_one_alg(attrs, 2);
  }
#line 240
  if (err != 0) {
#line 241
    goto out;
  } else {

  }
  {
#line 242
  err = verify_one_alg(attrs, 3);
  }
#line 242
  if (err != 0) {
#line 243
    goto out;
  } else {

  }
  {
#line 244
  err = verify_sec_ctx_len(attrs);
  }
#line 244
  if (err != 0) {
#line 245
    goto out;
  } else {

  }
  {
#line 246
  err = verify_replay(p, attrs);
  }
#line 246
  if (err != 0) {
#line 247
    goto out;
  } else {

  }
#line 249
  err = -22;
  {
#line 251
  if ((int )p->mode == 0) {
#line 251
    goto case_0;
  } else {

  }
#line 252
  if ((int )p->mode == 1) {
#line 252
    goto case_1;
  } else {

  }
#line 253
  if ((int )p->mode == 2) {
#line 253
    goto case_2___0;
  } else {

  }
#line 254
  if ((int )p->mode == 4) {
#line 254
    goto case_4;
  } else {

  }
#line 257
  goto switch_default___1;
  case_0: /* CIL Label */ ;
  case_1: /* CIL Label */ ;
  case_2___0: /* CIL Label */ ;
  case_4: /* CIL Label */ ;
#line 255
  goto ldv_50744;
  switch_default___1: /* CIL Label */ ;
#line 258
  goto out;
  switch_break___1: /* CIL Label */ ;
  }
  ldv_50744: 
#line 261
  err = 0;
  out: ;
#line 264
  return (err);
}
}
#line 267 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int attach_one_algo(struct xfrm_algo **algpp , u8 *props , struct xfrm_algo_desc *(*get_byname)(char const   * ,
                                                                                                       int  ) ,
                           struct nlattr *rta ) 
{ 
  struct xfrm_algo *p ;
  struct xfrm_algo *ualg ;
  struct xfrm_algo_desc *algo ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 274
  if ((unsigned long )rta == (unsigned long )((struct nlattr *)0)) {
#line 275
    return (0);
  } else {

  }
  {
#line 277
  tmp = nla_data((struct nlattr  const  *)rta);
#line 277
  ualg = (struct xfrm_algo *)tmp;
#line 279
  algo = (*get_byname)((char const   *)(& ualg->alg_name), 1);
  }
#line 280
  if ((unsigned long )algo == (unsigned long )((struct xfrm_algo_desc *)0)) {
#line 281
    return (-38);
  } else {

  }
  {
#line 282
  *props = algo->desc.sadb_alg_id;
#line 284
  tmp___0 = xfrm_alg_len((struct xfrm_algo  const  *)ualg);
#line 284
  tmp___1 = kmemdup((void const   *)ualg, (size_t )tmp___0, 208U);
#line 284
  p = (struct xfrm_algo *)tmp___1;
  }
#line 285
  if ((unsigned long )p == (unsigned long )((struct xfrm_algo *)0)) {
#line 286
    return (-12);
  } else {

  }
  {
#line 288
  strcpy((char *)(& p->alg_name), (char const   *)algo->name);
#line 289
  *algpp = p;
  }
#line 290
  return (0);
}
}
#line 293 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int attach_auth(struct xfrm_algo_auth **algpp , u8 *props , struct nlattr *rta ) 
{ 
  struct xfrm_algo *ualg ;
  struct xfrm_algo_auth *p ;
  struct xfrm_algo_desc *algo ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 300
  if ((unsigned long )rta == (unsigned long )((struct nlattr *)0)) {
#line 301
    return (0);
  } else {

  }
  {
#line 303
  tmp = nla_data((struct nlattr  const  *)rta);
#line 303
  ualg = (struct xfrm_algo *)tmp;
#line 305
  algo = xfrm_aalg_get_byname((char const   *)(& ualg->alg_name), 1);
  }
#line 306
  if ((unsigned long )algo == (unsigned long )((struct xfrm_algo_desc *)0)) {
#line 307
    return (-38);
  } else {

  }
  {
#line 308
  *props = algo->desc.sadb_alg_id;
#line 310
  tmp___0 = kmalloc((unsigned long )((ualg->alg_key_len + 7U) / 8U) + 72UL, 208U);
#line 310
  p = (struct xfrm_algo_auth *)tmp___0;
  }
#line 311
  if ((unsigned long )p == (unsigned long )((struct xfrm_algo_auth *)0)) {
#line 312
    return (-12);
  } else {

  }
  {
#line 314
  strcpy((char *)(& p->alg_name), (char const   *)algo->name);
#line 315
  p->alg_key_len = ualg->alg_key_len;
#line 316
  p->alg_trunc_len = (unsigned int )algo->uinfo.auth.icv_truncbits;
#line 317
  memcpy((void *)(& p->alg_key), (void const   *)(& ualg->alg_key), (size_t )((ualg->alg_key_len + 7U) / 8U));
#line 319
  *algpp = p;
  }
#line 320
  return (0);
}
}
#line 323 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int attach_auth_trunc(struct xfrm_algo_auth **algpp , u8 *props , struct nlattr *rta ) 
{ 
  struct xfrm_algo_auth *p ;
  struct xfrm_algo_auth *ualg ;
  struct xfrm_algo_desc *algo ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 329
  if ((unsigned long )rta == (unsigned long )((struct nlattr *)0)) {
#line 330
    return (0);
  } else {

  }
  {
#line 332
  tmp = nla_data((struct nlattr  const  *)rta);
#line 332
  ualg = (struct xfrm_algo_auth *)tmp;
#line 334
  algo = xfrm_aalg_get_byname((char const   *)(& ualg->alg_name), 1);
  }
#line 335
  if ((unsigned long )algo == (unsigned long )((struct xfrm_algo_desc *)0)) {
#line 336
    return (-38);
  } else {

  }
#line 337
  if (ualg->alg_trunc_len > 519U || ualg->alg_trunc_len > (unsigned int )algo->uinfo.auth.icv_fullbits) {
#line 339
    return (-22);
  } else {

  }
  {
#line 340
  *props = algo->desc.sadb_alg_id;
#line 342
  tmp___0 = xfrm_alg_auth_len((struct xfrm_algo_auth  const  *)ualg);
#line 342
  tmp___1 = kmemdup((void const   *)ualg, (size_t )tmp___0, 208U);
#line 342
  p = (struct xfrm_algo_auth *)tmp___1;
  }
#line 343
  if ((unsigned long )p == (unsigned long )((struct xfrm_algo_auth *)0)) {
#line 344
    return (-12);
  } else {

  }
  {
#line 346
  strcpy((char *)(& p->alg_name), (char const   *)algo->name);
  }
#line 347
  if (p->alg_trunc_len == 0U) {
#line 348
    p->alg_trunc_len = (unsigned int )algo->uinfo.auth.icv_truncbits;
  } else {

  }
#line 350
  *algpp = p;
#line 351
  return (0);
}
}
#line 354 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int attach_aead(struct xfrm_algo_aead **algpp , u8 *props , struct nlattr *rta ) 
{ 
  struct xfrm_algo_aead *p ;
  struct xfrm_algo_aead *ualg ;
  struct xfrm_algo_desc *algo ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 360
  if ((unsigned long )rta == (unsigned long )((struct nlattr *)0)) {
#line 361
    return (0);
  } else {

  }
  {
#line 363
  tmp = nla_data((struct nlattr  const  *)rta);
#line 363
  ualg = (struct xfrm_algo_aead *)tmp;
#line 365
  algo = xfrm_aead_get_byname((char const   *)(& ualg->alg_name), (int )ualg->alg_icv_len,
                              1);
  }
#line 366
  if ((unsigned long )algo == (unsigned long )((struct xfrm_algo_desc *)0)) {
#line 367
    return (-38);
  } else {

  }
  {
#line 368
  *props = algo->desc.sadb_alg_id;
#line 370
  tmp___0 = aead_len(ualg);
#line 370
  tmp___1 = kmemdup((void const   *)ualg, (size_t )tmp___0, 208U);
#line 370
  p = (struct xfrm_algo_aead *)tmp___1;
  }
#line 371
  if ((unsigned long )p == (unsigned long )((struct xfrm_algo_aead *)0)) {
#line 372
    return (-12);
  } else {

  }
  {
#line 374
  strcpy((char *)(& p->alg_name), (char const   *)algo->name);
#line 375
  *algpp = p;
  }
#line 376
  return (0);
}
}
#line 379 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static int xfrm_replay_verify_len(struct xfrm_replay_state_esn *replay_esn ,
                                           struct nlattr *rp ) 
{ 
  struct xfrm_replay_state_esn *up___0 ;
  int ulen ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 385
  if ((unsigned long )replay_esn == (unsigned long )((struct xfrm_replay_state_esn *)0) || (unsigned long )rp == (unsigned long )((struct nlattr *)0)) {
#line 386
    return (0);
  } else {

  }
  {
#line 388
  tmp = nla_data((struct nlattr  const  *)rp);
#line 388
  up___0 = (struct xfrm_replay_state_esn *)tmp;
#line 389
  ulen = xfrm_replay_state_esn_len(up___0);
#line 391
  tmp___0 = nla_len((struct nlattr  const  *)rp);
  }
#line 391
  if (tmp___0 < ulen) {
#line 392
    return (-22);
  } else {
    {
#line 391
    tmp___1 = xfrm_replay_state_esn_len(replay_esn);
    }
#line 391
    if (tmp___1 != ulen) {
#line 392
      return (-22);
    } else {

    }
  }
#line 394
  return (0);
}
}
#line 397 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_alloc_replay_state_esn(struct xfrm_replay_state_esn **replay_esn ,
                                       struct xfrm_replay_state_esn **preplay_esn ,
                                       struct nlattr *rta ) 
{ 
  struct xfrm_replay_state_esn *p ;
  struct xfrm_replay_state_esn *pp ;
  struct xfrm_replay_state_esn *up___0 ;
  int klen ;
  int ulen ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
#line 404
  if ((unsigned long )rta == (unsigned long )((struct nlattr *)0)) {
#line 405
    return (0);
  } else {

  }
  {
#line 407
  tmp = nla_data((struct nlattr  const  *)rta);
#line 407
  up___0 = (struct xfrm_replay_state_esn *)tmp;
#line 408
  klen = xfrm_replay_state_esn_len(up___0);
#line 409
  tmp___0 = nla_len((struct nlattr  const  *)rta);
#line 409
  ulen = tmp___0 >= klen ? klen : 24;
#line 411
  tmp___1 = kzalloc((size_t )klen, 208U);
#line 411
  p = (struct xfrm_replay_state_esn *)tmp___1;
  }
#line 412
  if ((unsigned long )p == (unsigned long )((struct xfrm_replay_state_esn *)0)) {
#line 413
    return (-12);
  } else {

  }
  {
#line 415
  tmp___2 = kzalloc((size_t )klen, 208U);
#line 415
  pp = (struct xfrm_replay_state_esn *)tmp___2;
  }
#line 416
  if ((unsigned long )pp == (unsigned long )((struct xfrm_replay_state_esn *)0)) {
    {
#line 417
    kfree((void const   *)p);
    }
#line 418
    return (-12);
  } else {

  }
  {
#line 421
  memcpy((void *)p, (void const   *)up___0, (size_t )ulen);
#line 422
  memcpy((void *)pp, (void const   *)up___0, (size_t )ulen);
#line 424
  *replay_esn = p;
#line 425
  *preplay_esn = pp;
  }
#line 427
  return (0);
}
}
#line 430 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static int xfrm_user_sec_ctx_size(struct xfrm_sec_ctx *xfrm_ctx ) 
{ 
  int len ;

  {
#line 432
  len = 0;
#line 434
  if ((unsigned long )xfrm_ctx != (unsigned long )((struct xfrm_sec_ctx *)0)) {
#line 435
    len = (int )((unsigned int )len + 8U);
#line 436
    len = len + (int )xfrm_ctx->ctx_len;
  } else {

  }
#line 438
  return (len);
}
}
#line 441 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void copy_from_user_state(struct xfrm_state *x , struct xfrm_usersa_info *p ) 
{ 
  unsigned int __min1 ;
  unsigned int __min2 ;

  {
  {
#line 443
  memcpy((void *)(& x->id), (void const   *)(& p->id), 24UL);
#line 444
  memcpy((void *)(& x->sel), (void const   *)(& p->sel), 56UL);
#line 445
  memcpy((void *)(& x->lft), (void const   *)(& p->lft), 64UL);
#line 446
  x->props.mode = p->mode;
#line 447
  __min1 = (unsigned int )p->replay_window;
#line 447
  __min2 = 32U;
#line 447
  x->props.replay_window = (u8 )(__min1 < __min2 ? __min1 : __min2);
#line 449
  x->props.reqid = p->reqid;
#line 450
  x->props.family = p->family;
#line 451
  memcpy((void *)(& x->props.saddr), (void const   *)(& p->saddr), 16UL);
#line 452
  x->props.flags = p->flags;
  }
#line 454
  if ((unsigned int )x->sel.family == 0U && ((int )p->flags & 32) == 0) {
#line 455
    x->sel.family = p->family;
  } else {

  }
#line 456
  return;
}
}
#line 463 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void xfrm_update_ae_params(struct xfrm_state *x , struct nlattr **attrs , int update_esn ) 
{ 
  struct nlattr *rp ;
  struct nlattr *re ;
  struct nlattr *lt ;
  struct nlattr *et ;
  struct nlattr *rt ;
  struct xfrm_replay_state_esn *replay_esn ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct xfrm_replay_state *replay ;
  void *tmp___2 ;
  struct xfrm_lifetime_cur *ltime ;
  void *tmp___3 ;

  {
#line 466
  rp = *(attrs + 10UL);
#line 467
  re = update_esn != 0 ? *(attrs + 23UL) : (struct nlattr *)0;
#line 468
  lt = *(attrs + 9UL);
#line 469
  et = *(attrs + 12UL);
#line 470
  rt = *(attrs + 11UL);
#line 472
  if ((unsigned long )re != (unsigned long )((struct nlattr *)0)) {
    {
#line 474
    tmp = nla_data((struct nlattr  const  *)re);
#line 474
    replay_esn = (struct xfrm_replay_state_esn *)tmp;
#line 475
    tmp___0 = xfrm_replay_state_esn_len(replay_esn);
#line 475
    memcpy((void *)x->replay_esn, (void const   *)replay_esn, (size_t )tmp___0);
#line 477
    tmp___1 = xfrm_replay_state_esn_len(replay_esn);
#line 477
    memcpy((void *)x->preplay_esn, (void const   *)replay_esn, (size_t )tmp___1);
    }
  } else {

  }
#line 481
  if ((unsigned long )rp != (unsigned long )((struct nlattr *)0)) {
    {
#line 483
    tmp___2 = nla_data((struct nlattr  const  *)rp);
#line 483
    replay = (struct xfrm_replay_state *)tmp___2;
#line 484
    memcpy((void *)(& x->replay), (void const   *)replay, 12UL);
#line 485
    memcpy((void *)(& x->preplay), (void const   *)replay, 12UL);
    }
  } else {

  }
#line 488
  if ((unsigned long )lt != (unsigned long )((struct nlattr *)0)) {
    {
#line 490
    tmp___3 = nla_data((struct nlattr  const  *)lt);
#line 490
    ltime = (struct xfrm_lifetime_cur *)tmp___3;
#line 491
    x->curlft.bytes = ltime->bytes;
#line 492
    x->curlft.packets = ltime->packets;
#line 493
    x->curlft.add_time = ltime->add_time;
#line 494
    x->curlft.use_time = ltime->use_time;
    }
  } else {

  }
#line 497
  if ((unsigned long )et != (unsigned long )((struct nlattr *)0)) {
    {
#line 498
    x->replay_maxage = nla_get_u32((struct nlattr  const  *)et);
    }
  } else {

  }
#line 500
  if ((unsigned long )rt != (unsigned long )((struct nlattr *)0)) {
    {
#line 501
    x->replay_maxdiff = nla_get_u32((struct nlattr  const  *)rt);
    }
  } else {

  }
#line 502
  return;
}
}
#line 504 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct xfrm_state *xfrm_state_construct(struct net *net , struct xfrm_usersa_info *p ,
                                               struct nlattr **attrs , int *errp ) 
{ 
  struct xfrm_state *x ;
  struct xfrm_state *tmp ;
  int err ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
  {
#line 509
  tmp = xfrm_state_alloc(net);
#line 509
  x = tmp;
#line 510
  err = -12;
  }
#line 512
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 513
    goto error_no_put;
  } else {

  }
  {
#line 515
  copy_from_user_state(x, p);
  }
#line 517
  if ((unsigned long )*(attrs + 24UL) != (unsigned long )((struct nlattr *)0)) {
    {
#line 518
    x->props.extra_flags = nla_get_u32((struct nlattr  const  *)*(attrs + 24UL));
    }
  } else {

  }
  {
#line 520
  err = attach_aead(& x->aead, & x->props.ealgo, *(attrs + 18UL));
  }
#line 520
  if (err != 0) {
#line 522
    goto error;
  } else {

  }
  {
#line 523
  err = attach_auth_trunc(& x->aalg, & x->props.aalgo, *(attrs + 20UL));
  }
#line 523
  if (err != 0) {
#line 525
    goto error;
  } else {

  }
#line 526
  if ((unsigned int )x->props.aalgo == 0U) {
    {
#line 527
    err = attach_auth(& x->aalg, & x->props.aalgo, *(attrs + 1UL));
    }
#line 527
    if (err != 0) {
#line 529
      goto error;
    } else {

    }
  } else {

  }
  {
#line 531
  err = attach_one_algo(& x->ealg, & x->props.ealgo, & xfrm_ealg_get_byname, *(attrs + 2UL));
  }
#line 531
  if (err != 0) {
#line 534
    goto error;
  } else {

  }
  {
#line 535
  err = attach_one_algo(& x->calg, & x->props.calgo, & xfrm_calg_get_byname, *(attrs + 3UL));
  }
#line 535
  if (err != 0) {
#line 538
    goto error;
  } else {

  }
#line 540
  if ((unsigned long )*(attrs + 4UL) != (unsigned long )((struct nlattr *)0)) {
    {
#line 541
    tmp___0 = nla_data((struct nlattr  const  *)*(attrs + 4UL));
#line 541
    tmp___1 = kmemdup((void const   *)tmp___0, 24UL, 208U);
#line 541
    x->encap = (struct xfrm_encap_tmpl *)tmp___1;
    }
#line 543
    if ((unsigned long )x->encap == (unsigned long )((struct xfrm_encap_tmpl *)0)) {
#line 544
      goto error;
    } else {

    }
  } else {

  }
#line 547
  if ((unsigned long )*(attrs + 22UL) != (unsigned long )((struct nlattr *)0)) {
    {
#line 548
    x->tfcpad = nla_get_u32((struct nlattr  const  *)*(attrs + 22UL));
    }
  } else {

  }
#line 550
  if ((unsigned long )*(attrs + 14UL) != (unsigned long )((struct nlattr *)0)) {
    {
#line 551
    tmp___2 = nla_data((struct nlattr  const  *)*(attrs + 14UL));
#line 551
    tmp___3 = kmemdup((void const   *)tmp___2, 16UL, 208U);
#line 551
    x->coaddr = (xfrm_address_t *)tmp___3;
    }
#line 553
    if ((unsigned long )x->coaddr == (unsigned long )((xfrm_address_t *)0)) {
#line 554
      goto error;
    } else {

    }
  } else {

  }
  {
#line 557
  xfrm_mark_get(attrs, & x->mark);
#line 559
  err = __xfrm_init_state(x, 0);
  }
#line 560
  if (err != 0) {
#line 561
    goto error;
  } else {

  }
#line 563
  if ((unsigned long )*(attrs + 8UL) != (unsigned long )((struct nlattr *)0)) {
    {
#line 563
    tmp___4 = nla_data((struct nlattr  const  *)*(attrs + 8UL));
#line 563
    tmp___5 = security_xfrm_state_alloc(x, (struct xfrm_user_sec_ctx *)tmp___4);
    }
#line 563
    if (tmp___5 != 0) {
#line 565
      goto error;
    } else {

    }
  } else {

  }
  {
#line 567
  err = xfrm_alloc_replay_state_esn(& x->replay_esn, & x->preplay_esn, *(attrs + 23UL));
  }
#line 567
  if (err != 0) {
#line 569
    goto error;
  } else {

  }
  {
#line 571
  x->km.seq = p->seq;
#line 572
  x->replay_maxdiff = net->xfrm.sysctl_aevent_rseqth;
#line 574
  x->replay_maxage = (net->xfrm.sysctl_aevent_etime * 250U) / 10U;
#line 576
  err = xfrm_init_replay(x);
  }
#line 576
  if (err != 0) {
#line 577
    goto error;
  } else {

  }
  {
#line 580
  xfrm_update_ae_params(x, attrs, 0);
  }
#line 582
  return (x);
  error: 
  {
#line 585
  x->km.state = 5U;
#line 586
  xfrm_state_put(x);
  }
  error_no_put: 
#line 588
  *errp = err;
#line 589
  return ((struct xfrm_state *)0);
}
}
#line 592 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_add_sa(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_usersa_info *p ;
  void *tmp___0 ;
  struct xfrm_state *x ;
  int err ;
  struct km_event c ;
  kuid_t loginuid ;
  struct task_struct *tmp___1 ;
  kuid_t tmp___2 ;
  unsigned int sessionid ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  u32 sid ;
  struct task_struct *tmp___5 ;

  {
  {
#line 595
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 595
  net = tmp;
#line 596
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 596
  p = (struct xfrm_usersa_info *)tmp___0;
#line 600
  tmp___1 = get_current();
#line 600
  tmp___2 = audit_get_loginuid(tmp___1);
#line 600
  loginuid = tmp___2;
#line 601
  tmp___3 = get_current();
#line 601
  tmp___4 = audit_get_sessionid(tmp___3);
#line 601
  sessionid = tmp___4;
#line 604
  err = verify_newsa_info(p, attrs);
  }
#line 605
  if (err != 0) {
#line 606
    return (err);
  } else {

  }
  {
#line 608
  x = xfrm_state_construct(net, p, attrs, & err);
  }
#line 609
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 610
    return (err);
  } else {

  }
  {
#line 612
  xfrm_state_hold(x);
  }
#line 613
  if ((unsigned int )nlh->nlmsg_type == 16U) {
    {
#line 614
    err = xfrm_state_add(x);
    }
  } else {
    {
#line 616
    err = xfrm_state_update(x);
    }
  }
  {
#line 618
  tmp___5 = get_current();
#line 618
  security_task_getsecid(tmp___5, & sid);
#line 619
  xfrm_audit_state_add(x, err == 0, loginuid, sessionid, sid);
  }
#line 621
  if (err < 0) {
    {
#line 622
    x->km.state = 5U;
#line 623
    __xfrm_state_put(x);
    }
#line 624
    goto out;
  } else {

  }
  {
#line 627
  c.seq = nlh->nlmsg_seq;
#line 628
  c.portid = nlh->nlmsg_pid;
#line 629
  c.event = (u32 )nlh->nlmsg_type;
#line 631
  km_state_notify(x, (struct km_event  const  *)(& c));
  }
  out: 
  {
#line 633
  xfrm_state_put(x);
  }
#line 634
  return (err);
}
}
#line 637 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct xfrm_state *xfrm_user_state_lookup(struct net *net , struct xfrm_usersa_id *p ,
                                                 struct nlattr **attrs , int *errp ) 
{ 
  struct xfrm_state *x ;
  struct xfrm_mark m ;
  int err ;
  u32 mark ;
  int tmp ;
  xfrm_address_t *saddr ;
  int tmp___0 ;

  {
  {
#line 642
  x = (struct xfrm_state *)0;
#line 645
  tmp = xfrm_mark_get(attrs, & m);
#line 645
  mark = (u32 )tmp;
#line 647
  tmp___0 = xfrm_id_proto_match((int )p->proto, 255);
  }
#line 647
  if (tmp___0 != 0) {
    {
#line 648
    err = -3;
#line 649
    x = xfrm_state_lookup(net, mark, (xfrm_address_t const   *)(& p->daddr), p->spi,
                          (int )p->proto, (int )p->family);
    }
  } else {
    {
#line 651
    saddr = (xfrm_address_t *)0;
#line 653
    verify_one_addr(attrs, 13, & saddr);
    }
#line 654
    if ((unsigned long )saddr == (unsigned long )((xfrm_address_t *)0)) {
#line 655
      err = -22;
#line 656
      goto out;
    } else {

    }
    {
#line 659
    err = -3;
#line 660
    x = xfrm_state_lookup_byaddr(net, mark, (xfrm_address_t const   *)(& p->daddr),
                                 (xfrm_address_t const   *)saddr, (int )p->proto,
                                 (int )p->family);
    }
  }
  out: ;
#line 666
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0) && (unsigned long )errp != (unsigned long )((int *)0)) {
#line 667
    *errp = err;
  } else {

  }
#line 668
  return (x);
}
}
#line 671 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_del_sa(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_state *x ;
  int err ;
  struct km_event c ;
  struct xfrm_usersa_id *p ;
  void *tmp___0 ;
  kuid_t loginuid ;
  struct task_struct *tmp___1 ;
  kuid_t tmp___2 ;
  unsigned int sessionid ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  u32 sid ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
  {
#line 674
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 674
  net = tmp;
#line 676
  err = -3;
#line 678
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 678
  p = (struct xfrm_usersa_id *)tmp___0;
#line 679
  tmp___1 = get_current();
#line 679
  tmp___2 = audit_get_loginuid(tmp___1);
#line 679
  loginuid = tmp___2;
#line 680
  tmp___3 = get_current();
#line 680
  tmp___4 = audit_get_sessionid(tmp___3);
#line 680
  sessionid = tmp___4;
#line 683
  x = xfrm_user_state_lookup(net, p, attrs, & err);
  }
#line 684
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 685
    return (err);
  } else {

  }
  {
#line 687
  err = security_xfrm_state_delete(x);
  }
#line 687
  if (err != 0) {
#line 688
    goto out;
  } else {

  }
  {
#line 690
  tmp___5 = xfrm_state_kern((struct xfrm_state  const  *)x);
  }
#line 690
  if (tmp___5 != 0) {
#line 691
    err = -1;
#line 692
    goto out;
  } else {

  }
  {
#line 695
  err = xfrm_state_delete(x);
  }
#line 697
  if (err < 0) {
#line 698
    goto out;
  } else {

  }
  {
#line 700
  c.seq = nlh->nlmsg_seq;
#line 701
  c.portid = nlh->nlmsg_pid;
#line 702
  c.event = (u32 )nlh->nlmsg_type;
#line 703
  km_state_notify(x, (struct km_event  const  *)(& c));
  }
  out: 
  {
#line 706
  tmp___6 = get_current();
#line 706
  security_task_getsecid(tmp___6, & sid);
#line 707
  xfrm_audit_state_delete(x, err == 0, loginuid, sessionid, sid);
#line 708
  xfrm_state_put(x);
  }
#line 709
  return (err);
}
}
#line 712 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void copy_to_user_state(struct xfrm_state *x , struct xfrm_usersa_info *p ) 
{ 


  {
  {
#line 714
  memset((void *)p, 0, 224UL);
#line 715
  memcpy((void *)(& p->id), (void const   *)(& x->id), 24UL);
#line 716
  memcpy((void *)(& p->sel), (void const   *)(& x->sel), 56UL);
#line 717
  memcpy((void *)(& p->lft), (void const   *)(& x->lft), 64UL);
#line 718
  memcpy((void *)(& p->curlft), (void const   *)(& x->curlft), 32UL);
#line 719
  memcpy((void *)(& p->stats), (void const   *)(& x->stats), 12UL);
#line 720
  memcpy((void *)(& p->saddr), (void const   *)(& x->props.saddr), 16UL);
#line 721
  p->mode = x->props.mode;
#line 722
  p->replay_window = x->props.replay_window;
#line 723
  p->reqid = x->props.reqid;
#line 724
  p->family = x->props.family;
#line 725
  p->flags = x->props.flags;
#line 726
  p->seq = x->km.seq;
  }
#line 727
  return;
}
}
#line 736 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_sec_ctx(struct xfrm_sec_ctx *s , struct sk_buff *skb ) 
{ 
  struct xfrm_user_sec_ctx *uctx ;
  struct nlattr *attr ;
  int ctx_size ;
  void *tmp ;

  {
  {
#line 740
  ctx_size = (int )((unsigned int )s->ctx_len + 8U);
#line 742
  attr = nla_reserve(skb, 8, ctx_size);
  }
#line 743
  if ((unsigned long )attr == (unsigned long )((struct nlattr *)0)) {
#line 744
    return (-90);
  } else {

  }
  {
#line 746
  tmp = nla_data((struct nlattr  const  *)attr);
#line 746
  uctx = (struct xfrm_user_sec_ctx *)tmp;
#line 747
  uctx->exttype = 8U;
#line 748
  uctx->len = (__u16 )ctx_size;
#line 749
  uctx->ctx_doi = s->ctx_doi;
#line 750
  uctx->ctx_alg = s->ctx_alg;
#line 751
  uctx->ctx_len = s->ctx_len;
#line 752
  memcpy((void *)(uctx + 1UL), (void const   *)(& s->ctx_str), (size_t )s->ctx_len);
  }
#line 754
  return (0);
}
}
#line 757 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_to_user_auth(struct xfrm_algo_auth *auth , struct sk_buff *skb ) 
{ 
  struct xfrm_algo *algo ;
  struct nlattr *nla ;
  void *tmp ;

  {
  {
#line 762
  nla = nla_reserve(skb, 1, (int )((auth->alg_key_len + 7U) / 8U + 68U));
  }
#line 764
  if ((unsigned long )nla == (unsigned long )((struct nlattr *)0)) {
#line 765
    return (-90);
  } else {

  }
  {
#line 767
  tmp = nla_data((struct nlattr  const  *)nla);
#line 767
  algo = (struct xfrm_algo *)tmp;
#line 768
  strncpy((char *)(& algo->alg_name), (char const   *)(& auth->alg_name), 64UL);
#line 769
  memcpy((void *)(& algo->alg_key), (void const   *)(& auth->alg_key), (size_t )((auth->alg_key_len + 7U) / 8U));
#line 770
  algo->alg_key_len = auth->alg_key_len;
  }
#line 772
  return (0);
}
}
#line 776 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_to_user_state_extra(struct xfrm_state *x , struct xfrm_usersa_info *p ,
                                    struct sk_buff *skb ) 
{ 
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 780
  ret = 0;
#line 782
  copy_to_user_state(x, p);
  }
#line 784
  if (x->props.extra_flags != 0U) {
    {
#line 785
    ret = nla_put_u32(skb, 24, x->props.extra_flags);
    }
#line 787
    if (ret != 0) {
#line 788
      goto out;
    } else {

    }
  } else {

  }
#line 791
  if ((unsigned long )x->coaddr != (unsigned long )((xfrm_address_t *)0)) {
    {
#line 792
    ret = nla_put(skb, 14, 16, (void const   *)x->coaddr);
    }
#line 793
    if (ret != 0) {
#line 794
      goto out;
    } else {

    }
  } else {

  }
#line 796
  if (x->lastused != 0UL) {
    {
#line 797
    ret = nla_put_u64(skb, 15, (u64 )x->lastused);
    }
#line 798
    if (ret != 0) {
#line 799
      goto out;
    } else {

    }
  } else {

  }
#line 801
  if ((unsigned long )x->aead != (unsigned long )((struct xfrm_algo_aead *)0)) {
    {
#line 802
    tmp = aead_len(x->aead);
#line 802
    ret = nla_put(skb, 18, tmp, (void const   *)x->aead);
    }
#line 803
    if (ret != 0) {
#line 804
      goto out;
    } else {

    }
  } else {

  }
#line 806
  if ((unsigned long )x->aalg != (unsigned long )((struct xfrm_algo_auth *)0)) {
    {
#line 807
    ret = copy_to_user_auth(x->aalg, skb);
    }
#line 808
    if (ret == 0) {
      {
#line 809
      tmp___0 = xfrm_alg_auth_len((struct xfrm_algo_auth  const  *)x->aalg);
#line 809
      ret = nla_put(skb, 20, tmp___0, (void const   *)x->aalg);
      }
    } else {

    }
#line 811
    if (ret != 0) {
#line 812
      goto out;
    } else {

    }
  } else {

  }
#line 814
  if ((unsigned long )x->ealg != (unsigned long )((struct xfrm_algo *)0)) {
    {
#line 815
    tmp___1 = xfrm_alg_len((struct xfrm_algo  const  *)x->ealg);
#line 815
    ret = nla_put(skb, 2, tmp___1, (void const   *)x->ealg);
    }
#line 816
    if (ret != 0) {
#line 817
      goto out;
    } else {

    }
  } else {

  }
#line 819
  if ((unsigned long )x->calg != (unsigned long )((struct xfrm_algo *)0)) {
    {
#line 820
    ret = nla_put(skb, 3, 68, (void const   *)x->calg);
    }
#line 821
    if (ret != 0) {
#line 822
      goto out;
    } else {

    }
  } else {

  }
#line 824
  if ((unsigned long )x->encap != (unsigned long )((struct xfrm_encap_tmpl *)0)) {
    {
#line 825
    ret = nla_put(skb, 4, 24, (void const   *)x->encap);
    }
#line 826
    if (ret != 0) {
#line 827
      goto out;
    } else {

    }
  } else {

  }
#line 829
  if (x->tfcpad != 0U) {
    {
#line 830
    ret = nla_put_u32(skb, 22, x->tfcpad);
    }
#line 831
    if (ret != 0) {
#line 832
      goto out;
    } else {

    }
  } else {

  }
  {
#line 834
  ret = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& x->mark));
  }
#line 835
  if (ret != 0) {
#line 836
    goto out;
  } else {

  }
#line 837
  if ((unsigned long )x->replay_esn != (unsigned long )((struct xfrm_replay_state_esn *)0)) {
    {
#line 838
    tmp___2 = xfrm_replay_state_esn_len(x->replay_esn);
#line 838
    ret = nla_put(skb, 23, tmp___2, (void const   *)x->replay_esn);
    }
#line 841
    if (ret != 0) {
#line 842
      goto out;
    } else {

    }
  } else {

  }
#line 844
  if ((unsigned long )x->security != (unsigned long )((struct xfrm_sec_ctx *)0)) {
    {
#line 845
    ret = copy_sec_ctx(x->security, skb);
    }
  } else {

  }
  out: ;
#line 847
  return (ret);
}
}
#line 850 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int dump_one_state(struct xfrm_state *x , int count , void *ptr ) 
{ 
  struct xfrm_dump_info *sp ;
  struct sk_buff *in_skb ;
  struct sk_buff *skb ;
  struct xfrm_usersa_info *p ;
  struct nlmsghdr *nlh ;
  int err ;
  void *tmp ;

  {
  {
#line 852
  sp = (struct xfrm_dump_info *)ptr;
#line 853
  in_skb = sp->in_skb;
#line 854
  skb = sp->out_skb;
#line 859
  nlh = nlmsg_put(skb, ((struct netlink_skb_parms *)(& in_skb->cb))->portid, sp->nlmsg_seq,
                  16, 224, (int )sp->nlmsg_flags);
  }
#line 861
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 862
    return (-90);
  } else {

  }
  {
#line 864
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 864
  p = (struct xfrm_usersa_info *)tmp;
#line 866
  err = copy_to_user_state_extra(x, p, skb);
  }
#line 867
  if (err != 0) {
    {
#line 868
    nlmsg_cancel(skb, nlh);
    }
#line 869
    return (err);
  } else {

  }
  {
#line 871
  nlmsg_end(skb, nlh);
  }
#line 872
  return (0);
}
}
#line 875 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_dump_sa_done(struct netlink_callback *cb ) 
{ 
  struct xfrm_state_walk *walk ;
  struct sock *sk ;
  struct net *net ;
  struct net *tmp ;

  {
  {
#line 877
  walk = (struct xfrm_state_walk *)((long *)(& cb->args) + 1UL);
#line 878
  sk = (cb->skb)->sk;
#line 879
  tmp = sock_net((struct sock  const  *)sk);
#line 879
  net = tmp;
#line 881
  xfrm_state_walk_done(walk, net);
  }
#line 882
  return (0);
}
}
#line 885
static struct nla_policy  const  xfrma_policy[27U] ;
#line 893
extern void __compiletime_assert_893(void) ;
#line 886 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_dump_sa(struct sk_buff *skb , struct netlink_callback *cb ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_state_walk *walk ;
  struct xfrm_dump_info info ;
  bool __cond ;
  struct nlattr *attrs[27U] ;
  struct xfrm_address_filter *filter ;
  u8 proto ;
  int err ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
  {
#line 888
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 888
  net = tmp;
#line 889
  walk = (struct xfrm_state_walk *)((long *)(& cb->args) + 1UL);
#line 892
  __cond = 0;
  }
#line 892
  if ((int )__cond) {
    {
#line 892
    __compiletime_assert_893();
    }
  } else {

  }
#line 895
  info.in_skb = cb->skb;
#line 896
  info.out_skb = skb;
#line 897
  info.nlmsg_seq = (cb->nlh)->nlmsg_seq;
#line 898
  info.nlmsg_flags = 2U;
#line 900
  if (cb->args[0] == 0L) {
    {
#line 902
    filter = (struct xfrm_address_filter *)0;
#line 903
    proto = 0U;
#line 906
    cb->args[0] = 1L;
#line 908
    err = nlmsg_parse(cb->nlh, 0, (struct nlattr **)(& attrs), 26, (struct nla_policy  const  *)(& xfrma_policy));
    }
#line 910
    if (err < 0) {
#line 911
      return (err);
    } else {

    }
#line 913
    if ((unsigned long )attrs[26] != (unsigned long )((struct nlattr *)0)) {
      {
#line 914
      tmp___0 = kmalloc(36UL, 208U);
#line 914
      filter = (struct xfrm_address_filter *)tmp___0;
      }
#line 915
      if ((unsigned long )filter == (unsigned long )((struct xfrm_address_filter *)0)) {
#line 916
        return (-12);
      } else {

      }
      {
#line 918
      tmp___1 = nla_data((struct nlattr  const  *)attrs[26]);
#line 918
      memcpy((void *)filter, (void const   *)tmp___1, 36UL);
      }
    } else {

    }
#line 922
    if ((unsigned long )attrs[25] != (unsigned long )((struct nlattr *)0)) {
      {
#line 923
      proto = nla_get_u8((struct nlattr  const  *)attrs[25]);
      }
    } else {

    }
    {
#line 925
    xfrm_state_walk_init(walk, (int )proto, filter);
    }
  } else {

  }
  {
#line 928
  xfrm_state_walk(net, walk, & dump_one_state, (void *)(& info));
  }
#line 930
  return ((int )skb->len);
}
}
#line 933 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct sk_buff *xfrm_state_netlink(struct sk_buff *in_skb , struct xfrm_state *x ,
                                          u32 seq ) 
{ 
  struct xfrm_dump_info info ;
  struct sk_buff *skb ;
  int err ;
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 940
  skb = nlmsg_new(3760UL, 32U);
  }
#line 941
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    {
#line 942
    tmp = ERR_PTR(-12L);
    }
#line 942
    return ((struct sk_buff *)tmp);
  } else {

  }
  {
#line 944
  info.in_skb = in_skb;
#line 945
  info.out_skb = skb;
#line 946
  info.nlmsg_seq = seq;
#line 947
  info.nlmsg_flags = 0U;
#line 949
  err = dump_one_state(x, 0, (void *)(& info));
  }
#line 950
  if (err != 0) {
    {
#line 951
    kfree_skb(skb);
#line 952
    tmp___0 = ERR_PTR((long )err);
    }
#line 952
    return ((struct sk_buff *)tmp___0);
  } else {

  }
#line 955
  return (skb);
}
}
#line 958 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_spdinfo_msgsize(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 960
  tmp = nla_total_size(24);
#line 960
  tmp___0 = nla_total_size(8);
  }
#line 960
  return ((size_t )(((unsigned int )tmp + (unsigned int )tmp___0) + 4U));
}
}
#line 965 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_spdinfo(struct sk_buff *skb , struct net *net , u32 portid , u32 seq ,
                         u32 flags ) 
{ 
  struct xfrmk_spdinfo si ;
  struct xfrmu_spdinfo spc ;
  struct xfrmu_spdhinfo sph ;
  struct nlmsghdr *nlh ;
  int err ;
  u32 *f ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 975
  nlh = nlmsg_put(skb, portid, seq, 36, 4, 0);
  }
#line 976
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 977
    return (-90);
  } else {

  }
  {
#line 979
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 979
  f = (u32 *)tmp;
#line 980
  *f = flags;
#line 981
  xfrm_spd_getinfo(net, & si);
#line 982
  spc.incnt = si.incnt;
#line 983
  spc.outcnt = si.outcnt;
#line 984
  spc.fwdcnt = si.fwdcnt;
#line 985
  spc.inscnt = si.inscnt;
#line 986
  spc.outscnt = si.outscnt;
#line 987
  spc.fwdscnt = si.fwdscnt;
#line 988
  sph.spdhcnt = si.spdhcnt;
#line 989
  sph.spdhmcnt = si.spdhmcnt;
#line 991
  err = nla_put(skb, 1, 24, (void const   *)(& spc));
  }
#line 992
  if (err == 0) {
    {
#line 993
    err = nla_put(skb, 2, 8, (void const   *)(& sph));
    }
  } else {

  }
#line 994
  if (err != 0) {
    {
#line 995
    nlmsg_cancel(skb, nlh);
    }
#line 996
    return (err);
  } else {

  }
  {
#line 999
  tmp___0 = nlmsg_end(skb, nlh);
  }
#line 999
  return (tmp___0);
}
}
#line 1002 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_get_spdinfo(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *r_skb ;
  u32 *flags ;
  void *tmp___0 ;
  u32 sportid ;
  u32 seq ;
  size_t tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1005
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1005
  net = tmp;
#line 1007
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1007
  flags = (u32 *)tmp___0;
#line 1008
  sportid = ((struct netlink_skb_parms *)(& skb->cb))->portid;
#line 1009
  seq = nlh->nlmsg_seq;
#line 1011
  tmp___1 = xfrm_spdinfo_msgsize();
#line 1011
  r_skb = nlmsg_new(tmp___1, 32U);
  }
#line 1012
  if ((unsigned long )r_skb == (unsigned long )((struct sk_buff *)0)) {
#line 1013
    return (-12);
  } else {

  }
  {
#line 1015
  tmp___2 = build_spdinfo(r_skb, net, sportid, seq, *flags);
  }
#line 1015
  if (tmp___2 < 0) {
    {
#line 1016
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (1016), "i" (12UL));
#line 1016
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 1018
  tmp___3 = nlmsg_unicast(net->xfrm.nlsk, r_skb, sportid);
  }
#line 1018
  return (tmp___3);
}
}
#line 1021 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_sadinfo_msgsize(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1023
  tmp = nla_total_size(8);
#line 1023
  tmp___0 = nla_total_size(4);
  }
#line 1023
  return ((size_t )(((unsigned int )tmp + (unsigned int )tmp___0) + 4U));
}
}
#line 1028 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_sadinfo(struct sk_buff *skb , struct net *net , u32 portid , u32 seq ,
                         u32 flags ) 
{ 
  struct xfrmk_sadinfo si ;
  struct xfrmu_sadhinfo sh ;
  struct nlmsghdr *nlh ;
  int err ;
  u32 *f ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1037
  nlh = nlmsg_put(skb, portid, seq, 34, 4, 0);
  }
#line 1038
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 1039
    return (-90);
  } else {

  }
  {
#line 1041
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1041
  f = (u32 *)tmp;
#line 1042
  *f = flags;
#line 1043
  xfrm_sad_getinfo(net, & si);
#line 1045
  sh.sadhmcnt = si.sadhmcnt;
#line 1046
  sh.sadhcnt = si.sadhcnt;
#line 1048
  err = nla_put_u32(skb, 1, si.sadcnt);
  }
#line 1049
  if (err == 0) {
    {
#line 1050
    err = nla_put(skb, 2, 8, (void const   *)(& sh));
    }
  } else {

  }
#line 1051
  if (err != 0) {
    {
#line 1052
    nlmsg_cancel(skb, nlh);
    }
#line 1053
    return (err);
  } else {

  }
  {
#line 1056
  tmp___0 = nlmsg_end(skb, nlh);
  }
#line 1056
  return (tmp___0);
}
}
#line 1059 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_get_sadinfo(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *r_skb ;
  u32 *flags ;
  void *tmp___0 ;
  u32 sportid ;
  u32 seq ;
  size_t tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1062
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1062
  net = tmp;
#line 1064
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1064
  flags = (u32 *)tmp___0;
#line 1065
  sportid = ((struct netlink_skb_parms *)(& skb->cb))->portid;
#line 1066
  seq = nlh->nlmsg_seq;
#line 1068
  tmp___1 = xfrm_sadinfo_msgsize();
#line 1068
  r_skb = nlmsg_new(tmp___1, 32U);
  }
#line 1069
  if ((unsigned long )r_skb == (unsigned long )((struct sk_buff *)0)) {
#line 1070
    return (-12);
  } else {

  }
  {
#line 1072
  tmp___2 = build_sadinfo(r_skb, net, sportid, seq, *flags);
  }
#line 1072
  if (tmp___2 < 0) {
    {
#line 1073
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (1073), "i" (12UL));
#line 1073
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 1075
  tmp___3 = nlmsg_unicast(net->xfrm.nlsk, r_skb, sportid);
  }
#line 1075
  return (tmp___3);
}
}
#line 1078 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_get_sa(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_usersa_id *p ;
  void *tmp___0 ;
  struct xfrm_state *x ;
  struct sk_buff *resp_skb ;
  int err ;
  long tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 1081
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1081
  net = tmp;
#line 1082
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1082
  p = (struct xfrm_usersa_id *)tmp___0;
#line 1085
  err = -3;
#line 1087
  x = xfrm_user_state_lookup(net, p, attrs, & err);
  }
#line 1088
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 1089
    goto out_noput;
  } else {

  }
  {
#line 1091
  resp_skb = xfrm_state_netlink(skb, x, nlh->nlmsg_seq);
#line 1092
  tmp___2 = IS_ERR((void const   *)resp_skb);
  }
#line 1092
  if ((int )tmp___2) {
    {
#line 1093
    tmp___1 = PTR_ERR((void const   *)resp_skb);
#line 1093
    err = (int )tmp___1;
    }
  } else {
    {
#line 1095
    err = nlmsg_unicast(net->xfrm.nlsk, resp_skb, ((struct netlink_skb_parms *)(& skb->cb))->portid);
    }
  }
  {
#line 1097
  xfrm_state_put(x);
  }
  out_noput: ;
#line 1099
  return (err);
}
}
#line 1102 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_alloc_userspi(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_state *x ;
  struct xfrm_userspi_info *p ;
  struct sk_buff *resp_skb ;
  xfrm_address_t *daddr ;
  int family ;
  int err ;
  u32 mark ;
  struct xfrm_mark m ;
  void *tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  bool tmp___5 ;

  {
  {
#line 1105
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1105
  net = tmp;
#line 1115
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1115
  p = (struct xfrm_userspi_info *)tmp___0;
#line 1116
  err = verify_spi_info((int )p->info.id.proto, p->min, p->max);
  }
#line 1117
  if (err != 0) {
#line 1118
    goto out_noput;
  } else {

  }
  {
#line 1120
  family = (int )p->info.family;
#line 1121
  daddr = & p->info.id.daddr;
#line 1123
  x = (struct xfrm_state *)0;
#line 1125
  tmp___1 = xfrm_mark_get(attrs, & m);
#line 1125
  mark = (u32 )tmp___1;
  }
#line 1126
  if (p->info.seq != 0U) {
    {
#line 1127
    x = xfrm_find_acq_byseq(net, mark, p->info.seq);
    }
#line 1128
    if ((unsigned long )x != (unsigned long )((struct xfrm_state *)0)) {
      {
#line 1128
      tmp___2 = xfrm_addr_equal((xfrm_address_t const   *)(& x->id.daddr), (xfrm_address_t const   *)daddr,
                                (int )((sa_family_t )family));
      }
#line 1128
      if (tmp___2) {
#line 1128
        tmp___3 = 0;
      } else {
#line 1128
        tmp___3 = 1;
      }
#line 1128
      if (tmp___3) {
        {
#line 1129
        xfrm_state_put(x);
#line 1130
        x = (struct xfrm_state *)0;
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1134
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
    {
#line 1135
    x = xfrm_find_acq(net, (struct xfrm_mark  const  *)(& m), (int )p->info.mode,
                      p->info.reqid, (int )p->info.id.proto, (xfrm_address_t const   *)daddr,
                      (xfrm_address_t const   *)(& p->info.saddr), 1, (int )((unsigned short )family));
    }
  } else {

  }
#line 1139
  err = -2;
#line 1140
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 1141
    goto out_noput;
  } else {

  }
  {
#line 1143
  err = xfrm_alloc_spi(x, p->min, p->max);
  }
#line 1144
  if (err != 0) {
#line 1145
    goto out;
  } else {

  }
  {
#line 1147
  resp_skb = xfrm_state_netlink(skb, x, nlh->nlmsg_seq);
#line 1148
  tmp___5 = IS_ERR((void const   *)resp_skb);
  }
#line 1148
  if ((int )tmp___5) {
    {
#line 1149
    tmp___4 = PTR_ERR((void const   *)resp_skb);
#line 1149
    err = (int )tmp___4;
    }
#line 1150
    goto out;
  } else {

  }
  {
#line 1153
  err = nlmsg_unicast(net->xfrm.nlsk, resp_skb, ((struct netlink_skb_parms *)(& skb->cb))->portid);
  }
  out: 
  {
#line 1156
  xfrm_state_put(x);
  }
  out_noput: ;
#line 1158
  return (err);
}
}
#line 1161 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_policy_dir(u8 dir ) 
{ 


  {
  {
#line 1164
  if ((int )dir == 0) {
#line 1164
    goto case_0;
  } else {

  }
#line 1165
  if ((int )dir == 1) {
#line 1165
    goto case_1;
  } else {

  }
#line 1166
  if ((int )dir == 2) {
#line 1166
    goto case_2;
  } else {

  }
#line 1169
  goto switch_default;
  case_0: /* CIL Label */ ;
  case_1: /* CIL Label */ ;
  case_2: /* CIL Label */ ;
#line 1167
  goto ldv_51025;
  switch_default: /* CIL Label */ ;
#line 1170
  return (-22);
  switch_break: /* CIL Label */ ;
  }
  ldv_51025: ;
#line 1173
  return (0);
}
}
#line 1176 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_policy_type(u8 type ) 
{ 


  {
  {
#line 1179
  if ((int )type == 0) {
#line 1179
    goto case_0;
  } else {

  }
#line 1181
  if ((int )type == 1) {
#line 1181
    goto case_1;
  } else {

  }
#line 1185
  goto switch_default;
  case_0: /* CIL Label */ ;
  case_1: /* CIL Label */ ;
#line 1183
  goto ldv_51032;
  switch_default: /* CIL Label */ ;
#line 1186
  return (-22);
  switch_break: /* CIL Label */ ;
  }
  ldv_51032: ;
#line 1189
  return (0);
}
}
#line 1192 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int verify_newpolicy_info(struct xfrm_userpolicy_info *p ) 
{ 
  int ret ;

  {
  {
#line 1197
  if ((int )p->share == 0) {
#line 1197
    goto case_0;
  } else {

  }
#line 1198
  if ((int )p->share == 1) {
#line 1198
    goto case_1;
  } else {

  }
#line 1199
  if ((int )p->share == 2) {
#line 1199
    goto case_2;
  } else {

  }
#line 1200
  if ((int )p->share == 3) {
#line 1200
    goto case_3;
  } else {

  }
#line 1203
  goto switch_default;
  case_0: /* CIL Label */ ;
  case_1: /* CIL Label */ ;
  case_2: /* CIL Label */ ;
  case_3: /* CIL Label */ ;
#line 1201
  goto ldv_51042;
  switch_default: /* CIL Label */ ;
#line 1204
  return (-22);
  switch_break: /* CIL Label */ ;
  }
  ldv_51042: ;
  {
#line 1208
  if ((int )p->action == 0) {
#line 1208
    goto case_0___0;
  } else {

  }
#line 1209
  if ((int )p->action == 1) {
#line 1209
    goto case_1___0;
  } else {

  }
#line 1212
  goto switch_default___0;
  case_0___0: /* CIL Label */ ;
  case_1___0: /* CIL Label */ ;
#line 1210
  goto ldv_51046;
  switch_default___0: /* CIL Label */ ;
#line 1213
  return (-22);
  switch_break___0: /* CIL Label */ ;
  }
  ldv_51046: ;
  {
#line 1217
  if ((int )p->sel.family == 2) {
#line 1217
    goto case_2___0;
  } else {

  }
#line 1220
  if ((int )p->sel.family == 10) {
#line 1220
    goto case_10;
  } else {

  }
#line 1227
  goto switch_default___1;
  case_2___0: /* CIL Label */ ;
#line 1218
  goto ldv_51049;
  case_10: /* CIL Label */ ;
#line 1222
  goto ldv_51049;
  switch_default___1: /* CIL Label */ ;
#line 1228
  return (-22);
  switch_break___1: /* CIL Label */ ;
  }
  ldv_51049: 
  {
#line 1231
  ret = verify_policy_dir((int )p->dir);
  }
#line 1232
  if (ret != 0) {
#line 1233
    return (ret);
  } else {

  }
#line 1234
  if (p->index != 0U && (p->index & 3U) != (__u32 )p->dir) {
#line 1235
    return (-22);
  } else {

  }
#line 1237
  return (0);
}
}
#line 1240 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_from_user_sec_ctx(struct xfrm_policy *pol , struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_user_sec_ctx *uctx ;
  void *tmp ;
  int tmp___0 ;

  {
#line 1242
  rt = *(attrs + 8UL);
#line 1245
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 1246
    return (0);
  } else {

  }
  {
#line 1248
  tmp = nla_data((struct nlattr  const  *)rt);
#line 1248
  uctx = (struct xfrm_user_sec_ctx *)tmp;
#line 1249
  tmp___0 = security_xfrm_policy_alloc(& pol->security, uctx, 208U);
  }
#line 1249
  return (tmp___0);
}
}
#line 1252 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void copy_templates(struct xfrm_policy *xp , struct xfrm_user_tmpl *ut , int nr ) 
{ 
  int i ;
  struct xfrm_tmpl *t ;

  {
#line 1257
  xp->xfrm_nr = (u8 )nr;
#line 1258
  i = 0;
#line 1258
  goto ldv_51066;
  ldv_51065: 
  {
#line 1259
  t = (struct xfrm_tmpl *)(& xp->xfrm_vec) + (unsigned long )i;
#line 1261
  memcpy((void *)(& t->id), (void const   *)(& ut->id), 24UL);
#line 1262
  memcpy((void *)(& t->saddr), (void const   *)(& ut->saddr), 16UL);
#line 1264
  t->reqid = ut->reqid;
#line 1265
  t->mode = ut->mode;
#line 1266
  t->share = ut->share;
#line 1267
  t->optional = ut->optional;
#line 1268
  t->aalgos = ut->aalgos;
#line 1269
  t->ealgos = ut->ealgos;
#line 1270
  t->calgos = ut->calgos;
#line 1272
  t->allalgs = ((t->aalgos & t->ealgos) & t->calgos) == 4294967295U;
#line 1273
  t->encap_family = ut->family;
#line 1258
  i = i + 1;
#line 1258
  ut = ut + 1;
  }
  ldv_51066: ;
#line 1258
  if (i < nr) {
#line 1260
    goto ldv_51065;
  } else {

  }

#line 1265
  return;
}
}
#line 1277 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int validate_tmpl(int nr , struct xfrm_user_tmpl *ut , u16 family ) 
{ 
  int i ;

  {
#line 1281
  if (nr > 6) {
#line 1282
    return (-22);
  } else {

  }
#line 1284
  i = 0;
#line 1284
  goto ldv_51079;
  ldv_51078: ;
#line 1292
  if ((unsigned int )(ut + (unsigned long )i)->family == 0U) {
#line 1293
    (ut + (unsigned long )i)->family = family;
  } else {

  }
  {
#line 1296
  if ((int )(ut + (unsigned long )i)->family == 2) {
#line 1296
    goto case_2;
  } else {

  }
#line 1299
  if ((int )(ut + (unsigned long )i)->family == 10) {
#line 1299
    goto case_10;
  } else {

  }
#line 1302
  goto switch_default;
  case_2: /* CIL Label */ ;
#line 1297
  goto ldv_51075;
  case_10: /* CIL Label */ ;
#line 1300
  goto ldv_51075;
  switch_default: /* CIL Label */ ;
#line 1303
  return (-22);
  switch_break: /* CIL Label */ ;
  }
  ldv_51075: 
#line 1284
  i = i + 1;
  ldv_51079: ;
#line 1284
  if (i < nr) {
#line 1286
    goto ldv_51078;
  } else {

  }

#line 1307
  return (0);
}
}
#line 1310 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_from_user_tmpl(struct xfrm_policy *pol , struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_user_tmpl *utmpl ;
  void *tmp ;
  int nr ;
  int tmp___0 ;
  int err ;

  {
#line 1312
  rt = *(attrs + 5UL);
#line 1314
  if ((unsigned long )rt == (unsigned long )((struct nlattr *)0)) {
#line 1315
    pol->xfrm_nr = 0U;
  } else {
    {
#line 1317
    tmp = nla_data((struct nlattr  const  *)rt);
#line 1317
    utmpl = (struct xfrm_user_tmpl *)tmp;
#line 1318
    tmp___0 = nla_len((struct nlattr  const  *)rt);
#line 1318
    nr = (int )((unsigned long )tmp___0 / 64UL);
#line 1321
    err = validate_tmpl(nr, utmpl, (int )pol->family);
    }
#line 1322
    if (err != 0) {
#line 1323
      return (err);
    } else {

    }
    {
#line 1325
    copy_templates(pol, utmpl, nr);
    }
  }
#line 1327
  return (0);
}
}
#line 1330 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_from_user_policy_type(u8 *tp , struct nlattr **attrs ) 
{ 
  struct nlattr *rt ;
  struct xfrm_userpolicy_type *upt ;
  u8 type ;
  int err ;
  void *tmp ;

  {
#line 1332
  rt = *(attrs + 16UL);
#line 1334
  type = 0U;
#line 1337
  if ((unsigned long )rt != (unsigned long )((struct nlattr *)0)) {
    {
#line 1338
    tmp = nla_data((struct nlattr  const  *)rt);
#line 1338
    upt = (struct xfrm_userpolicy_type *)tmp;
#line 1339
    type = upt->type;
    }
  } else {

  }
  {
#line 1342
  err = verify_policy_type((int )type);
  }
#line 1343
  if (err != 0) {
#line 1344
    return (err);
  } else {

  }
#line 1346
  *tp = type;
#line 1347
  return (0);
}
}
#line 1350 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void copy_from_user_policy(struct xfrm_policy *xp , struct xfrm_userpolicy_info *p ) 
{ 


  {
  {
#line 1352
  xp->priority = p->priority;
#line 1353
  xp->index = p->index;
#line 1354
  memcpy((void *)(& xp->selector), (void const   *)(& p->sel), 56UL);
#line 1355
  memcpy((void *)(& xp->lft), (void const   *)(& p->lft), 64UL);
#line 1356
  xp->action = p->action;
#line 1357
  xp->flags = p->flags;
#line 1358
  xp->family = p->sel.family;
  }
#line 1359
  return;
}
}
#line 1362 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void copy_to_user_policy(struct xfrm_policy *xp , struct xfrm_userpolicy_info *p ,
                                int dir ) 
{ 


  {
  {
#line 1364
  memset((void *)p, 0, 168UL);
#line 1365
  memcpy((void *)(& p->sel), (void const   *)(& xp->selector), 56UL);
#line 1366
  memcpy((void *)(& p->lft), (void const   *)(& xp->lft), 64UL);
#line 1367
  memcpy((void *)(& p->curlft), (void const   *)(& xp->curlft), 32UL);
#line 1368
  p->priority = xp->priority;
#line 1369
  p->index = xp->index;
#line 1370
  p->sel.family = xp->family;
#line 1371
  p->dir = (__u8 )dir;
#line 1372
  p->action = xp->action;
#line 1373
  p->flags = xp->flags;
#line 1374
  p->share = 0U;
  }
#line 1375
  return;
}
}
#line 1377 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct xfrm_policy *xfrm_policy_construct(struct net *net , struct xfrm_userpolicy_info *p ,
                                                 struct nlattr **attrs , int *errp ) 
{ 
  struct xfrm_policy *xp ;
  struct xfrm_policy *tmp ;
  int err ;

  {
  {
#line 1379
  tmp = xfrm_policy_alloc(net, 208U);
#line 1379
  xp = tmp;
  }
#line 1382
  if ((unsigned long )xp == (unsigned long )((struct xfrm_policy *)0)) {
#line 1383
    *errp = -12;
#line 1384
    return ((struct xfrm_policy *)0);
  } else {

  }
  {
#line 1387
  copy_from_user_policy(xp, p);
#line 1389
  err = copy_from_user_policy_type(& xp->type, attrs);
  }
#line 1390
  if (err != 0) {
#line 1391
    goto error;
  } else {

  }
  {
#line 1393
  err = copy_from_user_tmpl(xp, attrs);
  }
#line 1393
  if (err == 0) {
    {
#line 1394
    err = copy_from_user_sec_ctx(xp, attrs);
    }
  } else {

  }
#line 1395
  if (err != 0) {
#line 1396
    goto error;
  } else {

  }
  {
#line 1398
  xfrm_mark_get(attrs, & xp->mark);
  }
#line 1400
  return (xp);
  error: 
  {
#line 1402
  *errp = err;
#line 1403
  xp->walk.dead = 1U;
#line 1404
  xfrm_policy_destroy(xp);
  }
#line 1405
  return ((struct xfrm_policy *)0);
}
}
#line 1408 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_add_policy(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_userpolicy_info *p ;
  void *tmp___0 ;
  struct xfrm_policy *xp ;
  struct km_event c ;
  int err ;
  int excl ;
  kuid_t loginuid ;
  struct task_struct *tmp___1 ;
  kuid_t tmp___2 ;
  unsigned int sessionid ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  u32 sid ;
  struct task_struct *tmp___5 ;

  {
  {
#line 1411
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1411
  net = tmp;
#line 1412
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1412
  p = (struct xfrm_userpolicy_info *)tmp___0;
#line 1417
  tmp___1 = get_current();
#line 1417
  tmp___2 = audit_get_loginuid(tmp___1);
#line 1417
  loginuid = tmp___2;
#line 1418
  tmp___3 = get_current();
#line 1418
  tmp___4 = audit_get_sessionid(tmp___3);
#line 1418
  sessionid = tmp___4;
#line 1421
  err = verify_newpolicy_info(p);
  }
#line 1422
  if (err != 0) {
#line 1423
    return (err);
  } else {

  }
  {
#line 1424
  err = verify_sec_ctx_len(attrs);
  }
#line 1425
  if (err != 0) {
#line 1426
    return (err);
  } else {

  }
  {
#line 1428
  xp = xfrm_policy_construct(net, p, attrs, & err);
  }
#line 1429
  if ((unsigned long )xp == (unsigned long )((struct xfrm_policy *)0)) {
#line 1430
    return (err);
  } else {

  }
  {
#line 1436
  excl = (unsigned int )nlh->nlmsg_type == 19U;
#line 1437
  err = xfrm_policy_insert((int )p->dir, xp, excl);
#line 1438
  tmp___5 = get_current();
#line 1438
  security_task_getsecid(tmp___5, & sid);
#line 1439
  xfrm_audit_policy_add(xp, err == 0, loginuid, sessionid, sid);
  }
#line 1441
  if (err != 0) {
    {
#line 1442
    security_xfrm_policy_free(xp->security);
#line 1443
    kfree((void const   *)xp);
    }
#line 1444
    return (err);
  } else {

  }
  {
#line 1447
  c.event = (u32 )nlh->nlmsg_type;
#line 1448
  c.seq = nlh->nlmsg_seq;
#line 1449
  c.portid = nlh->nlmsg_pid;
#line 1450
  km_policy_notify(xp, (int )p->dir, (struct km_event  const  *)(& c));
#line 1452
  xfrm_pol_put(xp);
  }
#line 1454
  return (0);
}
}
#line 1457 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_to_user_tmpl(struct xfrm_policy *xp , struct sk_buff *skb ) 
{ 
  struct xfrm_user_tmpl vec[6U] ;
  int i ;
  struct xfrm_user_tmpl *up___0 ;
  struct xfrm_tmpl *kp ;
  int tmp ;

  {
#line 1462
  if ((unsigned int )xp->xfrm_nr == 0U) {
#line 1463
    return (0);
  } else {

  }
#line 1465
  i = 0;
#line 1465
  goto ldv_51138;
  ldv_51137: 
  {
#line 1466
  up___0 = (struct xfrm_user_tmpl *)(& vec) + (unsigned long )i;
#line 1467
  kp = (struct xfrm_tmpl *)(& xp->xfrm_vec) + (unsigned long )i;
#line 1469
  memset((void *)up___0, 0, 64UL);
#line 1470
  memcpy((void *)(& up___0->id), (void const   *)(& kp->id), 24UL);
#line 1471
  up___0->family = kp->encap_family;
#line 1472
  memcpy((void *)(& up___0->saddr), (void const   *)(& kp->saddr), 16UL);
#line 1473
  up___0->reqid = kp->reqid;
#line 1474
  up___0->mode = kp->mode;
#line 1475
  up___0->share = kp->share;
#line 1476
  up___0->optional = kp->optional;
#line 1477
  up___0->aalgos = kp->aalgos;
#line 1478
  up___0->ealgos = kp->ealgos;
#line 1479
  up___0->calgos = kp->calgos;
#line 1465
  i = i + 1;
  }
  ldv_51138: ;
#line 1465
  if (i < (int )xp->xfrm_nr) {
#line 1467
    goto ldv_51137;
  } else {

  }
  {
#line 1482
  tmp = nla_put(skb, 5, (int )((unsigned int )xp->xfrm_nr * 64U), (void const   *)(& vec));
  }
#line 1482
  return (tmp);
}
}
#line 1486 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static int copy_to_user_state_sec_ctx(struct xfrm_state *x , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
#line 1488
  if ((unsigned long )x->security != (unsigned long )((struct xfrm_sec_ctx *)0)) {
    {
#line 1489
    tmp = copy_sec_ctx(x->security, skb);
    }
#line 1489
    return (tmp);
  } else {

  }
#line 1491
  return (0);
}
}
#line 1494 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static int copy_to_user_sec_ctx(struct xfrm_policy *xp , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
#line 1496
  if ((unsigned long )xp->security != (unsigned long )((struct xfrm_sec_ctx *)0)) {
    {
#line 1497
    tmp = copy_sec_ctx(xp->security, skb);
    }
#line 1497
    return (tmp);
  } else {

  }
#line 1498
  return (0);
}
}
#line 1500 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t userpolicy_type_attrsize(void) 
{ 
  int tmp ;

  {
  {
#line 1503
  tmp = nla_total_size(6);
  }
#line 1503
  return ((size_t )tmp);
}
}
#line 1510 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_to_user_policy_type(u8 type , struct sk_buff *skb ) 
{ 
  struct xfrm_userpolicy_type upt ;
  int tmp ;

  {
  {
#line 1512
  upt.type = type;
#line 1512
  upt.reserved1 = (unsigned short)0;
#line 1512
  upt.reserved2 = (unsigned char)0;
#line 1516
  tmp = nla_put(skb, 16, 6, (void const   *)(& upt));
  }
#line 1516
  return (tmp);
}
}
#line 1526 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int dump_one_policy(struct xfrm_policy *xp , int dir , int count , void *ptr ) 
{ 
  struct xfrm_dump_info *sp ;
  struct xfrm_userpolicy_info *p ;
  struct sk_buff *in_skb ;
  struct sk_buff *skb ;
  struct nlmsghdr *nlh ;
  int err ;
  void *tmp ;

  {
  {
#line 1528
  sp = (struct xfrm_dump_info *)ptr;
#line 1530
  in_skb = sp->in_skb;
#line 1531
  skb = sp->out_skb;
#line 1535
  nlh = nlmsg_put(skb, ((struct netlink_skb_parms *)(& in_skb->cb))->portid, sp->nlmsg_seq,
                  19, 168, (int )sp->nlmsg_flags);
  }
#line 1537
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 1538
    return (-90);
  } else {

  }
  {
#line 1540
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1540
  p = (struct xfrm_userpolicy_info *)tmp;
#line 1541
  copy_to_user_policy(xp, p, dir);
#line 1542
  err = copy_to_user_tmpl(xp, skb);
  }
#line 1543
  if (err == 0) {
    {
#line 1544
    err = copy_to_user_sec_ctx(xp, skb);
    }
  } else {

  }
#line 1545
  if (err == 0) {
    {
#line 1546
    err = copy_to_user_policy_type((int )xp->type, skb);
    }
  } else {

  }
#line 1547
  if (err == 0) {
    {
#line 1548
    err = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& xp->mark));
    }
  } else {

  }
#line 1549
  if (err != 0) {
    {
#line 1550
    nlmsg_cancel(skb, nlh);
    }
#line 1551
    return (err);
  } else {

  }
  {
#line 1553
  nlmsg_end(skb, nlh);
  }
#line 1554
  return (0);
}
}
#line 1557 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_dump_policy_done(struct netlink_callback *cb ) 
{ 
  struct xfrm_policy_walk *walk ;
  struct net *net ;
  struct net *tmp ;

  {
  {
#line 1559
  walk = (struct xfrm_policy_walk *)((long *)(& cb->args) + 1UL);
#line 1560
  tmp = sock_net((struct sock  const  *)(cb->skb)->sk);
#line 1560
  net = tmp;
#line 1562
  xfrm_policy_walk_done(walk, net);
  }
#line 1563
  return (0);
}
}
#line 1573
extern void __compiletime_assert_1573(void) ;
#line 1566 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_dump_policy(struct sk_buff *skb , struct netlink_callback *cb ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_policy_walk *walk ;
  struct xfrm_dump_info info ;
  bool __cond ;

  {
  {
#line 1568
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1568
  net = tmp;
#line 1569
  walk = (struct xfrm_policy_walk *)((long *)(& cb->args) + 1UL);
#line 1572
  __cond = 0;
  }
#line 1572
  if ((int )__cond) {
    {
#line 1572
    __compiletime_assert_1573();
    }
  } else {

  }
#line 1575
  info.in_skb = cb->skb;
#line 1576
  info.out_skb = skb;
#line 1577
  info.nlmsg_seq = (cb->nlh)->nlmsg_seq;
#line 1578
  info.nlmsg_flags = 2U;
#line 1580
  if (cb->args[0] == 0L) {
    {
#line 1581
    cb->args[0] = 1L;
#line 1582
    xfrm_policy_walk_init(walk, 255);
    }
  } else {

  }
  {
#line 1585
  xfrm_policy_walk(net, walk, & dump_one_policy, (void *)(& info));
  }
#line 1587
  return ((int )skb->len);
}
}
#line 1590 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct sk_buff *xfrm_policy_netlink(struct sk_buff *in_skb , struct xfrm_policy *xp ,
                                           int dir , u32 seq ) 
{ 
  struct xfrm_dump_info info ;
  struct sk_buff *skb ;
  int err ;
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 1598
  skb = nlmsg_new(3760UL, 208U);
  }
#line 1599
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    {
#line 1600
    tmp = ERR_PTR(-12L);
    }
#line 1600
    return ((struct sk_buff *)tmp);
  } else {

  }
  {
#line 1602
  info.in_skb = in_skb;
#line 1603
  info.out_skb = skb;
#line 1604
  info.nlmsg_seq = seq;
#line 1605
  info.nlmsg_flags = 0U;
#line 1607
  err = dump_one_policy(xp, dir, 0, (void *)(& info));
  }
#line 1608
  if (err != 0) {
    {
#line 1609
    kfree_skb(skb);
#line 1610
    tmp___0 = ERR_PTR((long )err);
    }
#line 1610
    return ((struct sk_buff *)tmp___0);
  } else {

  }
#line 1613
  return (skb);
}
}
#line 1616 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_get_policy(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_policy *xp ;
  struct xfrm_userpolicy_id *p ;
  u8 type ;
  int err ;
  struct km_event c ;
  int delete ;
  struct xfrm_mark m ;
  u32 mark ;
  int tmp___0 ;
  void *tmp___1 ;
  struct nlattr *rt ;
  struct xfrm_sec_ctx *ctx ;
  struct xfrm_user_sec_ctx *uctx ;
  void *tmp___2 ;
  struct sk_buff *resp_skb ;
  long tmp___3 ;
  bool tmp___4 ;
  kuid_t loginuid ;
  struct task_struct *tmp___5 ;
  kuid_t tmp___6 ;
  unsigned int sessionid ;
  struct task_struct *tmp___7 ;
  unsigned int tmp___8 ;
  u32 sid ;
  struct task_struct *tmp___9 ;

  {
  {
#line 1619
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1619
  net = tmp;
#line 1622
  type = 0U;
#line 1627
  tmp___0 = xfrm_mark_get(attrs, & m);
#line 1627
  mark = (u32 )tmp___0;
#line 1629
  tmp___1 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1629
  p = (struct xfrm_userpolicy_id *)tmp___1;
#line 1630
  delete = (unsigned int )nlh->nlmsg_type == 20U;
#line 1632
  err = copy_from_user_policy_type(& type, attrs);
  }
#line 1633
  if (err != 0) {
#line 1634
    return (err);
  } else {

  }
  {
#line 1636
  err = verify_policy_dir((int )p->dir);
  }
#line 1637
  if (err != 0) {
#line 1638
    return (err);
  } else {

  }
#line 1640
  if (p->index != 0U) {
    {
#line 1641
    xp = xfrm_policy_byid(net, mark, (int )type, (int )p->dir, p->index, delete, & err);
    }
  } else {
    {
#line 1643
    rt = *(attrs + 8UL);
#line 1646
    err = verify_sec_ctx_len(attrs);
    }
#line 1647
    if (err != 0) {
#line 1648
      return (err);
    } else {

    }
#line 1650
    ctx = (struct xfrm_sec_ctx *)0;
#line 1651
    if ((unsigned long )rt != (unsigned long )((struct nlattr *)0)) {
      {
#line 1652
      tmp___2 = nla_data((struct nlattr  const  *)rt);
#line 1652
      uctx = (struct xfrm_user_sec_ctx *)tmp___2;
#line 1654
      err = security_xfrm_policy_alloc(& ctx, uctx, 208U);
      }
#line 1655
      if (err != 0) {
#line 1656
        return (err);
      } else {

      }
    } else {

    }
    {
#line 1658
    xp = xfrm_policy_bysel_ctx(net, mark, (int )type, (int )p->dir, & p->sel, ctx,
                               delete, & err);
#line 1660
    security_xfrm_policy_free(ctx);
    }
  }
#line 1662
  if ((unsigned long )xp == (unsigned long )((struct xfrm_policy *)0)) {
#line 1663
    return (-2);
  } else {

  }
#line 1665
  if (delete == 0) {
    {
#line 1668
    resp_skb = xfrm_policy_netlink(skb, xp, (int )p->dir, nlh->nlmsg_seq);
#line 1669
    tmp___4 = IS_ERR((void const   *)resp_skb);
    }
#line 1669
    if ((int )tmp___4) {
      {
#line 1670
      tmp___3 = PTR_ERR((void const   *)resp_skb);
#line 1670
      err = (int )tmp___3;
      }
    } else {
      {
#line 1672
      err = nlmsg_unicast(net->xfrm.nlsk, resp_skb, ((struct netlink_skb_parms *)(& skb->cb))->portid);
      }
    }
  } else {
    {
#line 1676
    tmp___5 = get_current();
#line 1676
    tmp___6 = audit_get_loginuid(tmp___5);
#line 1676
    loginuid = tmp___6;
#line 1677
    tmp___7 = get_current();
#line 1677
    tmp___8 = audit_get_sessionid(tmp___7);
#line 1677
    sessionid = tmp___8;
#line 1680
    tmp___9 = get_current();
#line 1680
    security_task_getsecid(tmp___9, & sid);
#line 1681
    xfrm_audit_policy_delete(xp, err == 0, loginuid, sessionid, sid);
    }
#line 1684
    if (err != 0) {
#line 1685
      goto out;
    } else {

    }
    {
#line 1687
    c.data.byid = p->index;
#line 1688
    c.event = (u32 )nlh->nlmsg_type;
#line 1689
    c.seq = nlh->nlmsg_seq;
#line 1690
    c.portid = nlh->nlmsg_pid;
#line 1691
    km_policy_notify(xp, (int )p->dir, (struct km_event  const  *)(& c));
    }
  }
  out: 
  {
#line 1695
  xfrm_pol_put(xp);
  }
#line 1696
  if (delete != 0 && err == 0) {
    {
#line 1697
    xfrm_garbage_collect(net);
    }
  } else {

  }
#line 1698
  return (err);
}
}
#line 1701 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_flush_sa(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct km_event c ;
  struct xfrm_usersa_flush *p ;
  void *tmp___0 ;
  struct xfrm_audit audit_info ;
  int err ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;

  {
  {
#line 1704
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1704
  net = tmp;
#line 1706
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1706
  p = (struct xfrm_usersa_flush *)tmp___0;
#line 1710
  tmp___1 = get_current();
#line 1710
  audit_info.loginuid = audit_get_loginuid(tmp___1);
#line 1711
  tmp___2 = get_current();
#line 1711
  audit_info.sessionid = audit_get_sessionid(tmp___2);
#line 1712
  tmp___3 = get_current();
#line 1712
  security_task_getsecid(tmp___3, & audit_info.secid);
#line 1713
  err = xfrm_state_flush(net, (int )p->proto, & audit_info);
  }
#line 1714
  if (err != 0) {
#line 1715
    if (err == -3) {
#line 1716
      return (0);
    } else {

    }
#line 1717
    return (err);
  } else {

  }
  {
#line 1719
  c.data.proto = (u32 )p->proto;
#line 1720
  c.event = (u32 )nlh->nlmsg_type;
#line 1721
  c.seq = nlh->nlmsg_seq;
#line 1722
  c.portid = nlh->nlmsg_pid;
#line 1723
  c.net = net;
#line 1724
  km_state_notify((struct xfrm_state *)0, (struct km_event  const  *)(& c));
  }
#line 1726
  return (0);
}
}
#line 1729 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_aevent_msgsize(struct xfrm_state *x ) 
{ 
  size_t replay_size ;
  int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1731
  if ((unsigned long )x->replay_esn != (unsigned long )((struct xfrm_replay_state_esn *)0)) {
    {
#line 1731
    tmp = xfrm_replay_state_esn_len(x->replay_esn);
#line 1731
    tmp___0 = (unsigned long )tmp;
    }
  } else {
#line 1731
    tmp___0 = 12UL;
  }
  {
#line 1731
  replay_size = tmp___0;
#line 1735
  tmp___1 = nla_total_size((int )replay_size);
#line 1735
  tmp___2 = nla_total_size(32);
#line 1735
  tmp___3 = nla_total_size(8);
#line 1735
  tmp___4 = nla_total_size(4);
#line 1735
  tmp___5 = nla_total_size(4);
  }
#line 1735
  return ((((((unsigned long )tmp___1 + (unsigned long )tmp___2) + (unsigned long )tmp___3) + (unsigned long )tmp___4) + (unsigned long )tmp___5) + 48UL);
}
}
#line 1743 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_aevent(struct sk_buff *skb , struct xfrm_state *x , struct km_event  const  *c ) 
{ 
  struct xfrm_aevent_id *id ;
  struct nlmsghdr *nlh ;
  int err ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1749
  nlh = nlmsg_put(skb, c->portid, c->seq, 30, 48, 0);
  }
#line 1750
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 1751
    return (-90);
  } else {

  }
  {
#line 1753
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1753
  id = (struct xfrm_aevent_id *)tmp;
#line 1754
  memcpy((void *)(& id->sa_id.daddr), (void const   *)(& x->id.daddr), 16UL);
#line 1755
  id->sa_id.spi = x->id.spi;
#line 1756
  id->sa_id.family = x->props.family;
#line 1757
  id->sa_id.proto = x->id.proto;
#line 1758
  memcpy((void *)(& id->saddr), (void const   *)(& x->props.saddr), 16UL);
#line 1759
  id->reqid = x->props.reqid;
#line 1760
  id->flags = c->data.aevent;
  }
#line 1762
  if ((unsigned long )x->replay_esn != (unsigned long )((struct xfrm_replay_state_esn *)0)) {
    {
#line 1763
    tmp___0 = xfrm_replay_state_esn_len(x->replay_esn);
#line 1763
    err = nla_put(skb, 23, tmp___0, (void const   *)x->replay_esn);
    }
  } else {
    {
#line 1767
    err = nla_put(skb, 10, 12, (void const   *)(& x->replay));
    }
  }
#line 1770
  if (err != 0) {
#line 1771
    goto out_cancel;
  } else {

  }
  {
#line 1772
  err = nla_put(skb, 9, 32, (void const   *)(& x->curlft));
  }
#line 1773
  if (err != 0) {
#line 1774
    goto out_cancel;
  } else {

  }
#line 1776
  if ((int )id->flags & 1) {
    {
#line 1777
    err = nla_put_u32(skb, 11, x->replay_maxdiff);
    }
#line 1778
    if (err != 0) {
#line 1779
      goto out_cancel;
    } else {

    }
  } else {

  }
#line 1781
  if ((id->flags & 8U) != 0U) {
    {
#line 1782
    err = nla_put_u32(skb, 12, (x->replay_maxage * 10U) / 250U);
    }
#line 1784
    if (err != 0) {
#line 1785
      goto out_cancel;
    } else {

    }
  } else {

  }
  {
#line 1787
  err = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& x->mark));
  }
#line 1788
  if (err != 0) {
#line 1789
    goto out_cancel;
  } else {

  }
  {
#line 1791
  tmp___1 = nlmsg_end(skb, nlh);
  }
#line 1791
  return (tmp___1);
  out_cancel: 
  {
#line 1794
  nlmsg_cancel(skb, nlh);
  }
#line 1795
  return (err);
}
}
#line 1798 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_get_ae(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_state *x ;
  struct sk_buff *r_skb ;
  int err ;
  struct km_event c ;
  u32 mark ;
  struct xfrm_mark m ;
  struct xfrm_aevent_id *p ;
  void *tmp___0 ;
  struct xfrm_usersa_id *id ;
  int tmp___1 ;
  size_t tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1801
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1801
  net = tmp;
#line 1808
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1808
  p = (struct xfrm_aevent_id *)tmp___0;
#line 1809
  id = & p->sa_id;
#line 1811
  tmp___1 = xfrm_mark_get(attrs, & m);
#line 1811
  mark = (u32 )tmp___1;
#line 1813
  x = xfrm_state_lookup(net, mark, (xfrm_address_t const   *)(& id->daddr), id->spi,
                        (int )id->proto, (int )id->family);
  }
#line 1814
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 1815
    return (-3);
  } else {

  }
  {
#line 1817
  tmp___2 = xfrm_aevent_msgsize(x);
#line 1817
  r_skb = nlmsg_new(tmp___2, 32U);
  }
#line 1818
  if ((unsigned long )r_skb == (unsigned long )((struct sk_buff *)0)) {
    {
#line 1819
    xfrm_state_put(x);
    }
#line 1820
    return (-12);
  } else {

  }
  {
#line 1828
  ldv_spin_lock_bh_108(& x->lock);
#line 1829
  c.data.aevent = p->flags;
#line 1830
  c.seq = nlh->nlmsg_seq;
#line 1831
  c.portid = nlh->nlmsg_pid;
#line 1833
  tmp___3 = build_aevent(r_skb, x, (struct km_event  const  *)(& c));
  }
#line 1833
  if (tmp___3 < 0) {
    {
#line 1834
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (1834), "i" (12UL));
#line 1834
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 1835
  err = nlmsg_unicast(net->xfrm.nlsk, r_skb, ((struct netlink_skb_parms *)(& skb->cb))->portid);
#line 1836
  ldv_spin_unlock_bh_109(& x->lock);
#line 1837
  xfrm_state_put(x);
  }
#line 1838
  return (err);
}
}
#line 1841 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_new_ae(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_state *x ;
  struct km_event c ;
  int err ;
  u32 mark ;
  struct xfrm_mark m ;
  struct xfrm_aevent_id *p ;
  void *tmp___0 ;
  struct nlattr *rp ;
  struct nlattr *re ;
  struct nlattr *lt ;
  int tmp___1 ;

  {
  {
#line 1844
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1844
  net = tmp;
#line 1847
  err = -22;
#line 1848
  mark = 0U;
#line 1850
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1850
  p = (struct xfrm_aevent_id *)tmp___0;
#line 1851
  rp = *(attrs + 10UL);
#line 1852
  re = *(attrs + 23UL);
#line 1853
  lt = *(attrs + 9UL);
  }
#line 1855
  if (((unsigned long )lt == (unsigned long )((struct nlattr *)0) && (unsigned long )rp == (unsigned long )((struct nlattr *)0)) && (unsigned long )re == (unsigned long )((struct nlattr *)0)) {
#line 1856
    return (err);
  } else {

  }
#line 1859
  if (((int )nlh->nlmsg_flags & 256) == 0) {
#line 1860
    return (err);
  } else {

  }
  {
#line 1862
  tmp___1 = xfrm_mark_get(attrs, & m);
#line 1862
  mark = (u32 )tmp___1;
#line 1864
  x = xfrm_state_lookup(net, mark, (xfrm_address_t const   *)(& p->sa_id.daddr), p->sa_id.spi,
                        (int )p->sa_id.proto, (int )p->sa_id.family);
  }
#line 1865
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 1866
    return (-3);
  } else {

  }
#line 1868
  if ((unsigned int )x->km.state != 2U) {
#line 1869
    goto out;
  } else {

  }
  {
#line 1871
  err = xfrm_replay_verify_len(x->replay_esn, re);
  }
#line 1872
  if (err != 0) {
#line 1873
    goto out;
  } else {

  }
  {
#line 1875
  ldv_spin_lock_bh_108(& x->lock);
#line 1876
  xfrm_update_ae_params(x, attrs, 1);
#line 1877
  ldv_spin_unlock_bh_109(& x->lock);
#line 1879
  c.event = (u32 )nlh->nlmsg_type;
#line 1880
  c.seq = nlh->nlmsg_seq;
#line 1881
  c.portid = nlh->nlmsg_pid;
#line 1882
  c.data.aevent = 64U;
#line 1883
  km_state_notify(x, (struct km_event  const  *)(& c));
#line 1884
  err = 0;
  }
  out: 
  {
#line 1886
  xfrm_state_put(x);
  }
#line 1887
  return (err);
}
}
#line 1890 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_flush_policy(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct km_event c ;
  u8 type ;
  int err ;
  struct xfrm_audit audit_info ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
  {
#line 1893
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1893
  net = tmp;
#line 1895
  type = 0U;
#line 1899
  err = copy_from_user_policy_type(& type, attrs);
  }
#line 1900
  if (err != 0) {
#line 1901
    return (err);
  } else {

  }
  {
#line 1903
  tmp___0 = get_current();
#line 1903
  audit_info.loginuid = audit_get_loginuid(tmp___0);
#line 1904
  tmp___1 = get_current();
#line 1904
  audit_info.sessionid = audit_get_sessionid(tmp___1);
#line 1905
  tmp___2 = get_current();
#line 1905
  security_task_getsecid(tmp___2, & audit_info.secid);
#line 1906
  err = xfrm_policy_flush(net, (int )type, & audit_info);
  }
#line 1907
  if (err != 0) {
#line 1908
    if (err == -3) {
#line 1909
      return (0);
    } else {

    }
#line 1910
    return (err);
  } else {

  }
  {
#line 1913
  c.data.type = (u32 )type;
#line 1914
  c.event = (u32 )nlh->nlmsg_type;
#line 1915
  c.seq = nlh->nlmsg_seq;
#line 1916
  c.portid = nlh->nlmsg_pid;
#line 1917
  c.net = net;
#line 1918
  km_policy_notify((struct xfrm_policy *)0, 0, (struct km_event  const  *)(& c));
  }
#line 1919
  return (0);
}
}
#line 1922 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_add_pol_expire(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_policy *xp ;
  struct xfrm_user_polexpire *up___0 ;
  void *tmp___0 ;
  struct xfrm_userpolicy_info *p ;
  u8 type ;
  int err ;
  struct xfrm_mark m ;
  u32 mark ;
  int tmp___1 ;
  struct nlattr *rt ;
  struct xfrm_sec_ctx *ctx ;
  struct xfrm_user_sec_ctx *uctx ;
  void *tmp___2 ;
  long tmp___3 ;
  kuid_t loginuid ;
  struct task_struct *tmp___4 ;
  kuid_t tmp___5 ;
  unsigned int sessionid ;
  struct task_struct *tmp___6 ;
  unsigned int tmp___7 ;
  u32 sid ;
  struct task_struct *tmp___8 ;
  int __ret_warn_on ;
  long tmp___9 ;

  {
  {
#line 1925
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1925
  net = tmp;
#line 1927
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1927
  up___0 = (struct xfrm_user_polexpire *)tmp___0;
#line 1928
  p = & up___0->pol;
#line 1929
  type = 0U;
#line 1930
  err = -2;
#line 1932
  tmp___1 = xfrm_mark_get(attrs, & m);
#line 1932
  mark = (u32 )tmp___1;
#line 1934
  err = copy_from_user_policy_type(& type, attrs);
  }
#line 1935
  if (err != 0) {
#line 1936
    return (err);
  } else {

  }
  {
#line 1938
  err = verify_policy_dir((int )p->dir);
  }
#line 1939
  if (err != 0) {
#line 1940
    return (err);
  } else {

  }
#line 1942
  if (p->index != 0U) {
    {
#line 1943
    xp = xfrm_policy_byid(net, mark, (int )type, (int )p->dir, p->index, 0, & err);
    }
  } else {
    {
#line 1945
    rt = *(attrs + 8UL);
#line 1948
    err = verify_sec_ctx_len(attrs);
    }
#line 1949
    if (err != 0) {
#line 1950
      return (err);
    } else {

    }
#line 1952
    ctx = (struct xfrm_sec_ctx *)0;
#line 1953
    if ((unsigned long )rt != (unsigned long )((struct nlattr *)0)) {
      {
#line 1954
      tmp___2 = nla_data((struct nlattr  const  *)rt);
#line 1954
      uctx = (struct xfrm_user_sec_ctx *)tmp___2;
#line 1956
      err = security_xfrm_policy_alloc(& ctx, uctx, 208U);
      }
#line 1957
      if (err != 0) {
#line 1958
        return (err);
      } else {

      }
    } else {

    }
    {
#line 1960
    xp = xfrm_policy_bysel_ctx(net, mark, (int )type, (int )p->dir, & p->sel, ctx,
                               0, & err);
#line 1962
    security_xfrm_policy_free(ctx);
    }
  }
#line 1964
  if ((unsigned long )xp == (unsigned long )((struct xfrm_policy *)0)) {
#line 1965
    return (-2);
  } else {

  }
  {
#line 1967
  tmp___3 = __builtin_expect((unsigned int )xp->walk.dead != 0U, 0L);
  }
#line 1967
  if (tmp___3 != 0L) {
#line 1968
    goto out;
  } else {

  }
#line 1970
  err = 0;
#line 1971
  if ((unsigned int )up___0->hard != 0U) {
    {
#line 1972
    tmp___4 = get_current();
#line 1972
    tmp___5 = audit_get_loginuid(tmp___4);
#line 1972
    loginuid = tmp___5;
#line 1973
    tmp___6 = get_current();
#line 1973
    tmp___7 = audit_get_sessionid(tmp___6);
#line 1973
    sessionid = tmp___7;
#line 1976
    tmp___8 = get_current();
#line 1976
    security_task_getsecid(tmp___8, & sid);
#line 1977
    xfrm_policy_delete(xp, (int )p->dir);
#line 1978
    xfrm_audit_policy_delete(xp, 1, loginuid, sessionid, sid);
    }
  } else {
    {
#line 1982
    __ret_warn_on = 1;
#line 1982
    tmp___9 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1982
    if (tmp___9 != 0L) {
      {
#line 1982
      warn_slowpath_fmt("net/xfrm/xfrm_user.c", 1982, "Dont know what to do with soft policy expire\n");
      }
    } else {

    }
    {
#line 1982
    __builtin_expect(__ret_warn_on != 0, 0L);
    }
  }
  {
#line 1984
  km_policy_expired(xp, (int )p->dir, (int )up___0->hard, nlh->nlmsg_pid);
  }
  out: 
  {
#line 1987
  xfrm_pol_put(xp);
  }
#line 1988
  return (err);
}
}
#line 1991 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_add_sa_expire(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_state *x ;
  int err ;
  struct xfrm_user_expire *ue ;
  void *tmp___0 ;
  struct xfrm_usersa_info *p ;
  struct xfrm_mark m ;
  u32 mark ;
  int tmp___1 ;
  kuid_t loginuid ;
  struct task_struct *tmp___2 ;
  kuid_t tmp___3 ;
  unsigned int sessionid ;
  struct task_struct *tmp___4 ;
  unsigned int tmp___5 ;
  u32 sid ;
  struct task_struct *tmp___6 ;

  {
  {
#line 1994
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 1994
  net = tmp;
#line 1997
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 1997
  ue = (struct xfrm_user_expire *)tmp___0;
#line 1998
  p = & ue->state;
#line 2000
  tmp___1 = xfrm_mark_get(attrs, & m);
#line 2000
  mark = (u32 )tmp___1;
#line 2002
  x = xfrm_state_lookup(net, mark, (xfrm_address_t const   *)(& p->id.daddr), p->id.spi,
                        (int )p->id.proto, (int )p->family);
#line 2004
  err = -2;
  }
#line 2005
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 2006
    return (err);
  } else {

  }
  {
#line 2008
  ldv_spin_lock_bh_108(& x->lock);
#line 2009
  err = -22;
  }
#line 2010
  if ((unsigned int )x->km.state != 2U) {
#line 2011
    goto out;
  } else {

  }
  {
#line 2012
  km_state_expired(x, (int )ue->hard, nlh->nlmsg_pid);
  }
#line 2014
  if ((unsigned int )ue->hard != 0U) {
    {
#line 2015
    tmp___2 = get_current();
#line 2015
    tmp___3 = audit_get_loginuid(tmp___2);
#line 2015
    loginuid = tmp___3;
#line 2016
    tmp___4 = get_current();
#line 2016
    tmp___5 = audit_get_sessionid(tmp___4);
#line 2016
    sessionid = tmp___5;
#line 2019
    tmp___6 = get_current();
#line 2019
    security_task_getsecid(tmp___6, & sid);
#line 2020
    __xfrm_state_delete(x);
#line 2021
    xfrm_audit_state_delete(x, 1, loginuid, sessionid, sid);
    }
  } else {

  }
#line 2023
  err = 0;
  out: 
  {
#line 2025
  ldv_spin_unlock_bh_109(& x->lock);
#line 2026
  xfrm_state_put(x);
  }
#line 2027
  return (err);
}
}
#line 2030 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_add_acquire(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_policy *xp ;
  struct xfrm_user_tmpl *ut ;
  int i ;
  struct nlattr *rt ;
  struct xfrm_mark mark ;
  struct xfrm_user_acquire *ua ;
  void *tmp___0 ;
  struct xfrm_state *x ;
  struct xfrm_state *tmp___1 ;
  int err ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  void *tmp___4 ;
  struct xfrm_tmpl *t ;
  int __ret_warn_on ;
  long tmp___5 ;

  {
  {
#line 2033
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 2033
  net = tmp;
#line 2037
  rt = *(attrs + 5UL);
#line 2040
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2040
  ua = (struct xfrm_user_acquire *)tmp___0;
#line 2041
  tmp___1 = xfrm_state_alloc(net);
#line 2041
  x = tmp___1;
#line 2042
  err = -12;
  }
#line 2044
  if ((unsigned long )x == (unsigned long )((struct xfrm_state *)0)) {
#line 2045
    goto nomem;
  } else {

  }
  {
#line 2047
  xfrm_mark_get(attrs, & mark);
#line 2049
  err = verify_newpolicy_info(& ua->policy);
  }
#line 2050
  if (err != 0) {
#line 2051
    goto bad_policy;
  } else {

  }
  {
#line 2054
  xp = xfrm_policy_construct(net, & ua->policy, attrs, & err);
  }
#line 2055
  if ((unsigned long )xp == (unsigned long )((struct xfrm_policy *)0)) {
#line 2056
    goto free_state;
  } else {

  }
  {
#line 2058
  memcpy((void *)(& x->id), (void const   *)(& ua->id), 24UL);
#line 2059
  memcpy((void *)(& x->props.saddr), (void const   *)(& ua->saddr), 16UL);
#line 2060
  memcpy((void *)(& x->sel), (void const   *)(& ua->sel), 56UL);
#line 2061
  tmp___2 = mark.m;
#line 2061
  x->mark.m = tmp___2;
#line 2061
  xp->mark.m = tmp___2;
#line 2062
  tmp___3 = mark.v;
#line 2062
  x->mark.v = tmp___3;
#line 2062
  xp->mark.v = tmp___3;
#line 2063
  tmp___4 = nla_data((struct nlattr  const  *)rt);
#line 2063
  ut = (struct xfrm_user_tmpl *)tmp___4;
#line 2065
  i = 0;
  }
#line 2065
  goto ldv_51335;
  ldv_51334: 
  {
#line 2066
  t = (struct xfrm_tmpl *)(& xp->xfrm_vec) + (unsigned long )i;
#line 2067
  memcpy((void *)(& x->id), (void const   *)(& t->id), 24UL);
#line 2068
  x->props.mode = t->mode;
#line 2069
  x->props.reqid = t->reqid;
#line 2070
  x->props.family = ut->family;
#line 2071
  t->aalgos = ua->aalgos;
#line 2072
  t->ealgos = ua->ealgos;
#line 2073
  t->calgos = ua->calgos;
#line 2074
  err = km_query(x, t, xp);
#line 2065
  i = i + 1;
#line 2065
  ut = ut + 1;
  }
  ldv_51335: ;
#line 2065
  if (i < (int )xp->xfrm_nr) {
#line 2067
    goto ldv_51334;
  } else {

  }
  {
#line 2078
  kfree((void const   *)x);
#line 2079
  kfree((void const   *)xp);
  }
#line 2081
  return (0);
  bad_policy: 
  {
#line 2084
  __ret_warn_on = 1;
#line 2084
  tmp___5 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 2084
  if (tmp___5 != 0L) {
    {
#line 2084
    warn_slowpath_fmt("net/xfrm/xfrm_user.c", 2084, "BAD policy passed\n");
    }
  } else {

  }
  {
#line 2084
  __builtin_expect(__ret_warn_on != 0, 0L);
  }
  free_state: 
  {
#line 2086
  kfree((void const   *)x);
  }
  nomem: ;
#line 2088
  return (err);
}
}
#line 2092 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_from_user_migrate(struct xfrm_migrate *ma , struct xfrm_kmaddress *k ,
                                  struct nlattr **attrs , int *num ) 
{ 
  struct nlattr *rt ;
  struct xfrm_user_migrate *um ;
  int i ;
  int num_migrate ;
  struct xfrm_user_kmaddress *uk ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 2096
  rt = *(attrs + 17UL);
#line 2100
  if ((unsigned long )k != (unsigned long )((struct xfrm_kmaddress *)0)) {
    {
#line 2103
    tmp = nla_data((struct nlattr  const  *)*(attrs + 19UL));
#line 2103
    uk = (struct xfrm_user_kmaddress *)tmp;
#line 2104
    memcpy((void *)(& k->local), (void const   *)(& uk->local), 16UL);
#line 2105
    memcpy((void *)(& k->remote), (void const   *)(& uk->remote), 16UL);
#line 2106
    k->family = uk->family;
#line 2107
    k->reserved = uk->reserved;
    }
  } else {

  }
  {
#line 2110
  tmp___0 = nla_data((struct nlattr  const  *)rt);
#line 2110
  um = (struct xfrm_user_migrate *)tmp___0;
#line 2111
  tmp___1 = nla_len((struct nlattr  const  *)rt);
#line 2111
  num_migrate = (int )((unsigned long )tmp___1 / 76UL);
  }
#line 2113
  if ((unsigned int )num_migrate - 1U > 5U) {
#line 2114
    return (-22);
  } else {

  }
#line 2116
  i = 0;
#line 2116
  goto ldv_51351;
  ldv_51350: 
  {
#line 2117
  memcpy((void *)(& ma->old_daddr), (void const   *)(& um->old_daddr), 16UL);
#line 2118
  memcpy((void *)(& ma->old_saddr), (void const   *)(& um->old_saddr), 16UL);
#line 2119
  memcpy((void *)(& ma->new_daddr), (void const   *)(& um->new_daddr), 16UL);
#line 2120
  memcpy((void *)(& ma->new_saddr), (void const   *)(& um->new_saddr), 16UL);
#line 2122
  ma->proto = um->proto;
#line 2123
  ma->mode = um->mode;
#line 2124
  ma->reqid = um->reqid;
#line 2126
  ma->old_family = um->old_family;
#line 2127
  ma->new_family = um->new_family;
#line 2116
  i = i + 1;
#line 2116
  um = um + 1;
#line 2116
  ma = ma + 1;
  }
  ldv_51351: ;
#line 2116
  if (i < num_migrate) {
#line 2118
    goto ldv_51350;
  } else {

  }
#line 2130
  *num = i;
#line 2131
  return (0);
}
}
#line 2134 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_do_migrate(struct sk_buff *skb , struct nlmsghdr *nlh , struct nlattr **attrs ) 
{ 
  struct xfrm_userpolicy_id *pi ;
  void *tmp ;
  struct xfrm_migrate m[6U] ;
  struct xfrm_kmaddress km ;
  struct xfrm_kmaddress *kmp ;
  u8 type ;
  int err ;
  int n ;
  struct net *net ;
  struct net *tmp___0 ;

  {
  {
#line 2137
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2137
  pi = (struct xfrm_userpolicy_id *)tmp;
#line 2142
  n = 0;
#line 2143
  tmp___0 = sock_net((struct sock  const  *)skb->sk);
#line 2143
  net = tmp___0;
  }
#line 2145
  if ((unsigned long )*(attrs + 17UL) == (unsigned long )((struct nlattr *)0)) {
#line 2146
    return (-22);
  } else {

  }
  {
#line 2148
  kmp = (unsigned long )*(attrs + 19UL) != (unsigned long )((struct nlattr *)0) ? & km : (struct xfrm_kmaddress *)0;
#line 2150
  err = copy_from_user_policy_type(& type, attrs);
  }
#line 2151
  if (err != 0) {
#line 2152
    return (err);
  } else {

  }
  {
#line 2154
  err = copy_from_user_migrate((struct xfrm_migrate *)(& m), kmp, attrs, & n);
  }
#line 2155
  if (err != 0) {
#line 2156
    return (err);
  } else {

  }
#line 2158
  if (n == 0) {
#line 2159
    return (0);
  } else {

  }
  {
#line 2161
  xfrm_migrate((struct xfrm_selector  const  *)(& pi->sel), (int )pi->dir, (int )type,
               (struct xfrm_migrate *)(& m), n, kmp, net);
  }
#line 2163
  return (0);
}
}
#line 2174 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_to_user_migrate(struct xfrm_migrate  const  *m , struct sk_buff *skb ) 
{ 
  struct xfrm_user_migrate um ;
  int tmp ;

  {
  {
#line 2178
  memset((void *)(& um), 0, 76UL);
#line 2179
  um.proto = m->proto;
#line 2180
  um.mode = m->mode;
#line 2181
  um.reqid = m->reqid;
#line 2182
  um.old_family = m->old_family;
#line 2183
  memcpy((void *)(& um.old_daddr), (void const   *)(& m->old_daddr), 16UL);
#line 2184
  memcpy((void *)(& um.old_saddr), (void const   *)(& m->old_saddr), 16UL);
#line 2185
  um.new_family = m->new_family;
#line 2186
  memcpy((void *)(& um.new_daddr), (void const   *)(& m->new_daddr), 16UL);
#line 2187
  memcpy((void *)(& um.new_saddr), (void const   *)(& m->new_saddr), 16UL);
#line 2189
  tmp = nla_put(skb, 17, 76, (void const   *)(& um));
  }
#line 2189
  return (tmp);
}
}
#line 2192 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int copy_to_user_kmaddress(struct xfrm_kmaddress  const  *k , struct sk_buff *skb ) 
{ 
  struct xfrm_user_kmaddress uk ;
  int tmp ;

  {
  {
#line 2196
  memset((void *)(& uk), 0, 40UL);
#line 2197
  uk.family = k->family;
#line 2198
  uk.reserved = k->reserved;
#line 2199
  memcpy((void *)(& uk.local), (void const   *)(& k->local), 16UL);
#line 2200
  memcpy((void *)(& uk.remote), (void const   *)(& k->remote), 16UL);
#line 2202
  tmp = nla_put(skb, 19, 40, (void const   *)(& uk));
  }
#line 2202
  return (tmp);
}
}
#line 2205 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_migrate_msgsize(int num_migrate , int with_kma ) 
{ 
  int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  size_t tmp___2 ;

  {
#line 2207
  if (with_kma != 0) {
    {
#line 2207
    tmp = nla_total_size(40);
#line 2207
    tmp___0 = (unsigned long )tmp + 64UL;
    }
  } else {
#line 2207
    tmp___0 = 64UL;
  }
  {
#line 2207
  tmp___1 = nla_total_size((int )((unsigned int )num_migrate * 76U));
#line 2207
  tmp___2 = userpolicy_type_attrsize();
  }
#line 2207
  return ((tmp___0 + (unsigned long )tmp___1) + tmp___2);
}
}
#line 2213 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_migrate(struct sk_buff *skb , struct xfrm_migrate  const  *m , int num_migrate ,
                         struct xfrm_kmaddress  const  *k , struct xfrm_selector  const  *sel ,
                         u8 dir , u8 type ) 
{ 
  struct xfrm_migrate  const  *mp ;
  struct xfrm_userpolicy_id *pol_id ;
  struct nlmsghdr *nlh ;
  int i ;
  int err ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 2222
  nlh = nlmsg_put(skb, 0U, 0U, 33, 64, 0);
  }
#line 2223
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2224
    return (-90);
  } else {

  }
  {
#line 2226
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2226
  pol_id = (struct xfrm_userpolicy_id *)tmp;
#line 2228
  memset((void *)pol_id, 0, 64UL);
#line 2229
  memcpy((void *)(& pol_id->sel), (void const   *)sel, 56UL);
#line 2230
  pol_id->dir = dir;
  }
#line 2232
  if ((unsigned long )k != (unsigned long )((struct xfrm_kmaddress  const  *)0)) {
    {
#line 2233
    err = copy_to_user_kmaddress(k, skb);
    }
#line 2234
    if (err != 0) {
#line 2235
      goto out_cancel;
    } else {

    }
  } else {

  }
  {
#line 2237
  err = copy_to_user_policy_type((int )type, skb);
  }
#line 2238
  if (err != 0) {
#line 2239
    goto out_cancel;
  } else {

  }
#line 2240
  i = 0;
#line 2240
  mp = m;
#line 2240
  goto ldv_51396;
  ldv_51395: 
  {
#line 2241
  err = copy_to_user_migrate(mp, skb);
  }
#line 2242
  if (err != 0) {
#line 2243
    goto out_cancel;
  } else {

  }
#line 2240
  i = i + 1;
#line 2240
  mp = mp + 1;
  ldv_51396: ;
#line 2240
  if (i < num_migrate) {
#line 2242
    goto ldv_51395;
  } else {

  }
  {
#line 2246
  tmp___0 = nlmsg_end(skb, nlh);
  }
#line 2246
  return (tmp___0);
  out_cancel: 
  {
#line 2249
  nlmsg_cancel(skb, nlh);
  }
#line 2250
  return (err);
}
}
#line 2253 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_send_migrate(struct xfrm_selector  const  *sel , u8 dir , u8 type ,
                             struct xfrm_migrate  const  *m , int num_migrate , struct xfrm_kmaddress  const  *k ) 
{ 
  struct net *net ;
  struct sk_buff *skb ;
  size_t tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2257
  net = & init_net;
#line 2260
  tmp = xfrm_migrate_msgsize(num_migrate, (unsigned long )k != (unsigned long )((struct xfrm_kmaddress  const  *)0));
#line 2260
  skb = nlmsg_new(tmp, 32U);
  }
#line 2261
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2262
    return (-12);
  } else {

  }
  {
#line 2265
  tmp___0 = build_migrate(skb, m, num_migrate, k, sel, (int )dir, (int )type);
  }
#line 2265
  if (tmp___0 < 0) {
    {
#line 2266
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (2266), "i" (12UL));
#line 2266
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 2268
  tmp___1 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 7U, 32U);
  }
#line 2268
  return (tmp___1);
}
}
#line 2281 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int const   xfrm_msg_min[23U]  = 
#line 2281
  {      224,      24,      24,      168, 
        64,      64,      232,      280, 
        232,      168,      224,      176, 
        1,      0,      48,      48, 
        60,      64,      0,      4, 
        0,      4};
#line 2306 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct nla_policy  const  xfrma_policy[27U]  = 
#line 2306
  {      {(unsigned short)0, (unsigned short)0}, 
        {(unsigned short)0, 68U}, 
        {(unsigned short)0, 68U}, 
        {(unsigned short)0, 68U}, 
        {(unsigned short)0, 24U}, 
        {(unsigned short)0, 64U}, 
        {(unsigned short)0, 224U}, 
        {(unsigned short)0, 168U}, 
        {(unsigned short)0, 8U}, 
        {(unsigned short)0, 32U}, 
        {(unsigned short)0, 12U}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {(unsigned short)0, 16U}, 
        {(unsigned short)0, 16U}, 
        {4U, (unsigned short)0}, 
        {(unsigned short)0, 6U}, 
        {(unsigned short)0, 76U}, 
        {(unsigned short)0, 72U}, 
        {(unsigned short)0, 40U}, 
        {(unsigned short)0, 72U}, 
        {(unsigned short)0, 8U}, 
        {3U, (unsigned short)0}, 
        {(unsigned short)0, 24U}, 
        {3U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {(unsigned short)0, 36U}};
#line 2339 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct xfrm_link  const  xfrm_dispatch[23U]  = 
#line 2339
  {      {& xfrm_add_sa, 0, 0}, 
        {& xfrm_del_sa, 0, 0}, 
        {& xfrm_get_sa, & xfrm_dump_sa, & xfrm_dump_sa_done}, 
        {& xfrm_add_policy, 0, 0}, 
        {& xfrm_get_policy, 0, 0}, 
        {& xfrm_get_policy, & xfrm_dump_policy, & xfrm_dump_policy_done}, 
        {& xfrm_alloc_userspi, 0, 0}, 
        {& xfrm_add_acquire, 0, 0}, 
        {& xfrm_add_sa_expire, 0, 0}, 
        {& xfrm_add_policy, 0, 0}, 
        {& xfrm_add_sa, 0, 0}, 
        {& xfrm_add_pol_expire, 0, 0}, 
        {& xfrm_flush_sa, 0, 0}, 
        {& xfrm_flush_policy, 0, 0}, 
        {& xfrm_new_ae, 0, 0}, 
        {& xfrm_get_ae, 0, 0}, 
        {0, 0, 0}, 
        {& xfrm_do_migrate, 0, 0}, 
        {0, 0, 0}, 
        {& xfrm_get_sadinfo, 0, 0}, 
        {0, 0, 0}, 
        {& xfrm_get_spdinfo, 0, 0}};
#line 2365 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_user_rcv_msg(struct sk_buff *skb , struct nlmsghdr *nlh ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct nlattr *attrs[27U] ;
  struct xfrm_link  const  *link ;
  int type ;
  int err ;
  bool tmp___0 ;
  int tmp___1 ;
  struct netlink_dump_control c ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 2367
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 2367
  net = tmp;
#line 2372
  type = (int )nlh->nlmsg_type;
  }
#line 2373
  if (type > 38) {
#line 2374
    return (-22);
  } else {

  }
  {
#line 2376
  type = type + -16;
#line 2377
  link = (struct xfrm_link  const  *)(& xfrm_dispatch) + (unsigned long )type;
#line 2380
  tmp___0 = netlink_net_capable((struct sk_buff  const  *)skb, 12);
  }
#line 2380
  if (tmp___0) {
#line 2380
    tmp___1 = 0;
  } else {
#line 2380
    tmp___1 = 1;
  }
#line 2380
  if (tmp___1) {
#line 2381
    return (-1);
  } else {

  }
#line 2383
  if ((type == 2 || type == 5) && ((int )nlh->nlmsg_flags & 768) != 0) {
#line 2386
    if ((unsigned long )link->dump == (unsigned long )((int (*/* const  */)(struct sk_buff * ,
                                                                            struct netlink_callback * ))0)) {
#line 2387
      return (-22);
    } else {

    }
    {
#line 2390
    c.dump = link->dump;
#line 2390
    c.done = link->done;
#line 2390
    c.data = 0;
#line 2390
    c.module = 0;
#line 2390
    c.min_dump_alloc = (unsigned short)0;
#line 2394
    tmp___2 = netlink_dump_start(net->xfrm.nlsk, skb, (struct nlmsghdr  const  *)nlh,
                                 & c);
    }
#line 2394
    return (tmp___2);
  } else {

  }
  {
#line 2398
  err = nlmsg_parse((struct nlmsghdr  const  *)nlh, xfrm_msg_min[type], (struct nlattr **)(& attrs),
                    26, (struct nla_policy  const  *)(& xfrma_policy));
  }
#line 2400
  if (err < 0) {
#line 2401
    return (err);
  } else {

  }
#line 2403
  if ((unsigned long )link->doit == (unsigned long )((int (*/* const  */)(struct sk_buff * ,
                                                                          struct nlmsghdr * ,
                                                                          struct nlattr ** ))0)) {
#line 2404
    return (-22);
  } else {

  }
  {
#line 2406
  tmp___3 = (*(link->doit))(skb, nlh, (struct nlattr **)(& attrs));
  }
#line 2406
  return (tmp___3);
}
}
#line 2409 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void xfrm_netlink_rcv(struct sk_buff *skb ) 
{ 
  struct net *net ;
  struct net *tmp ;

  {
  {
#line 2411
  tmp = sock_net((struct sock  const  *)skb->sk);
#line 2411
  net = tmp;
#line 2413
  ldv_mutex_lock_114(& net->xfrm.xfrm_cfg_mutex);
#line 2414
  netlink_rcv_skb(skb, & xfrm_user_rcv_msg);
#line 2415
  ldv_mutex_unlock_115(& net->xfrm.xfrm_cfg_mutex);
  }
#line 2416
  return;
}
}
#line 2418 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_expire_msgsize(void) 
{ 
  int tmp ;

  {
  {
#line 2420
  tmp = nla_total_size(8);
  }
#line 2420
  return ((unsigned long )tmp + 232UL);
}
}
#line 2424 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_expire(struct sk_buff *skb , struct xfrm_state *x , struct km_event  const  *c ) 
{ 
  struct xfrm_user_expire *ue ;
  struct nlmsghdr *nlh ;
  int err ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 2430
  nlh = nlmsg_put(skb, c->portid, 0U, 24, 232, 0);
  }
#line 2431
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2432
    return (-90);
  } else {

  }
  {
#line 2434
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2434
  ue = (struct xfrm_user_expire *)tmp;
#line 2435
  copy_to_user_state(x, & ue->state);
#line 2436
  ue->hard = (unsigned int )c->data.hard != 0U;
#line 2438
  err = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& x->mark));
  }
#line 2439
  if (err != 0) {
#line 2440
    return (err);
  } else {

  }
  {
#line 2442
  tmp___0 = nlmsg_end(skb, nlh);
  }
#line 2442
  return (tmp___0);
}
}
#line 2445 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_exp_state_notify(struct xfrm_state *x , struct km_event  const  *c ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *skb ;
  size_t tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2447
  tmp = xs_net(x);
#line 2447
  net = tmp;
#line 2450
  tmp___0 = xfrm_expire_msgsize();
#line 2450
  skb = nlmsg_new(tmp___0, 32U);
  }
#line 2451
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2452
    return (-12);
  } else {

  }
  {
#line 2454
  tmp___1 = build_expire(skb, x, c);
  }
#line 2454
  if (tmp___1 < 0) {
    {
#line 2455
    kfree_skb(skb);
    }
#line 2456
    return (-90);
  } else {

  }
  {
#line 2459
  tmp___2 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 2U, 32U);
  }
#line 2459
  return (tmp___2);
}
}
#line 2462 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_aevent_state_notify(struct xfrm_state *x , struct km_event  const  *c ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *skb ;
  size_t tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2464
  tmp = xs_net(x);
#line 2464
  net = tmp;
#line 2467
  tmp___0 = xfrm_aevent_msgsize(x);
#line 2467
  skb = nlmsg_new(tmp___0, 32U);
  }
#line 2468
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2469
    return (-12);
  } else {

  }
  {
#line 2471
  tmp___1 = build_aevent(skb, x, c);
  }
#line 2471
  if (tmp___1 < 0) {
    {
#line 2472
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (2472), "i" (12UL));
#line 2472
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 2474
  tmp___2 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 5U, 32U);
  }
#line 2474
  return (tmp___2);
}
}
#line 2477 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_notify_sa_flush(struct km_event  const  *c ) 
{ 
  struct net *net ;
  struct xfrm_usersa_flush *p ;
  struct nlmsghdr *nlh ;
  struct sk_buff *skb ;
  int len ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 2479
  net = c->net;
#line 2483
  len = 4;
#line 2485
  skb = nlmsg_new((size_t )len, 32U);
  }
#line 2486
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2487
    return (-12);
  } else {

  }
  {
#line 2489
  nlh = nlmsg_put(skb, c->portid, c->seq, 28, 1, 0);
  }
#line 2490
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
    {
#line 2491
    kfree_skb(skb);
    }
#line 2492
    return (-90);
  } else {

  }
  {
#line 2495
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2495
  p = (struct xfrm_usersa_flush *)tmp;
#line 2496
  p->proto = (__u8 )c->data.proto;
#line 2498
  nlmsg_end(skb, nlh);
#line 2500
  tmp___0 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 3U, 32U);
  }
#line 2500
  return (tmp___0);
}
}
#line 2503 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_sa_len(struct xfrm_state *x ) 
{ 
  size_t l ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 2505
  l = 0UL;
#line 2506
  if ((unsigned long )x->aead != (unsigned long )((struct xfrm_algo_aead *)0)) {
    {
#line 2507
    tmp = aead_len(x->aead);
#line 2507
    tmp___0 = nla_total_size(tmp);
#line 2507
    l = l + (size_t )tmp___0;
    }
  } else {

  }
#line 2508
  if ((unsigned long )x->aalg != (unsigned long )((struct xfrm_algo_auth *)0)) {
    {
#line 2509
    tmp___1 = nla_total_size((int )(((x->aalg)->alg_key_len + 7U) / 8U + 68U));
#line 2509
    l = l + (size_t )tmp___1;
#line 2511
    tmp___2 = xfrm_alg_auth_len((struct xfrm_algo_auth  const  *)x->aalg);
#line 2511
    tmp___3 = nla_total_size(tmp___2);
#line 2511
    l = l + (size_t )tmp___3;
    }
  } else {

  }
#line 2513
  if ((unsigned long )x->ealg != (unsigned long )((struct xfrm_algo *)0)) {
    {
#line 2514
    tmp___4 = xfrm_alg_len((struct xfrm_algo  const  *)x->ealg);
#line 2514
    tmp___5 = nla_total_size(tmp___4);
#line 2514
    l = l + (size_t )tmp___5;
    }
  } else {

  }
#line 2515
  if ((unsigned long )x->calg != (unsigned long )((struct xfrm_algo *)0)) {
    {
#line 2516
    tmp___6 = nla_total_size(68);
#line 2516
    l = l + (size_t )tmp___6;
    }
  } else {

  }
#line 2517
  if ((unsigned long )x->encap != (unsigned long )((struct xfrm_encap_tmpl *)0)) {
    {
#line 2518
    tmp___7 = nla_total_size(24);
#line 2518
    l = l + (size_t )tmp___7;
    }
  } else {

  }
#line 2519
  if (x->tfcpad != 0U) {
    {
#line 2520
    tmp___8 = nla_total_size(4);
#line 2520
    l = l + (size_t )tmp___8;
    }
  } else {

  }
#line 2521
  if ((unsigned long )x->replay_esn != (unsigned long )((struct xfrm_replay_state_esn *)0)) {
    {
#line 2522
    tmp___9 = xfrm_replay_state_esn_len(x->replay_esn);
#line 2522
    tmp___10 = nla_total_size(tmp___9);
#line 2522
    l = l + (size_t )tmp___10;
    }
  } else {

  }
#line 2523
  if ((unsigned long )x->security != (unsigned long )((struct xfrm_sec_ctx *)0)) {
    {
#line 2524
    tmp___11 = nla_total_size((int )((unsigned int )(x->security)->ctx_len + 8U));
#line 2524
    l = l + (size_t )tmp___11;
    }
  } else {

  }
#line 2526
  if ((unsigned long )x->coaddr != (unsigned long )((xfrm_address_t *)0)) {
    {
#line 2527
    tmp___12 = nla_total_size(16);
#line 2527
    l = l + (size_t )tmp___12;
    }
  } else {

  }
#line 2528
  if (x->props.extra_flags != 0U) {
    {
#line 2529
    tmp___13 = nla_total_size(4);
#line 2529
    l = l + (size_t )tmp___13;
    }
  } else {

  }
  {
#line 2532
  tmp___14 = nla_total_size(8);
#line 2532
  l = l + (size_t )tmp___14;
  }
#line 2534
  return (l);
}
}
#line 2537 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_notify_sa(struct xfrm_state *x , struct km_event  const  *c ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_usersa_info *p ;
  struct xfrm_usersa_id *id ;
  struct nlmsghdr *nlh ;
  struct sk_buff *skb ;
  int len ;
  size_t tmp___0 ;
  int headlen ;
  int err ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct nlattr *attr ;
  void *tmp___4 ;
  void *tmp___5 ;
  int tmp___6 ;

  {
  {
#line 2539
  tmp = xs_net(x);
#line 2539
  net = tmp;
#line 2544
  tmp___0 = xfrm_sa_len(x);
#line 2544
  len = (int )tmp___0;
#line 2547
  headlen = 224;
  }
#line 2548
  if ((unsigned int )c->event == 17U) {
    {
#line 2549
    tmp___1 = nla_total_size(headlen);
#line 2549
    len = len + tmp___1;
#line 2550
    headlen = 24;
#line 2551
    tmp___2 = nla_total_size(8);
#line 2551
    len = len + tmp___2;
    }
  } else {

  }
  {
#line 2553
  len = (int )((unsigned int )len + (((unsigned int )headlen + 3U) & 4294967292U));
#line 2555
  skb = nlmsg_new((size_t )len, 32U);
  }
#line 2556
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2557
    return (-12);
  } else {

  }
  {
#line 2559
  nlh = nlmsg_put(skb, c->portid, c->seq, (int )c->event, headlen, 0);
#line 2560
  err = -90;
  }
#line 2561
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2562
    goto out_free_skb;
  } else {

  }
  {
#line 2564
  tmp___3 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2564
  p = (struct xfrm_usersa_info *)tmp___3;
  }
#line 2565
  if ((unsigned int )c->event == 17U) {
    {
#line 2568
    tmp___4 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2568
    id = (struct xfrm_usersa_id *)tmp___4;
#line 2569
    memcpy((void *)(& id->daddr), (void const   *)(& x->id.daddr), 16UL);
#line 2570
    id->spi = x->id.spi;
#line 2571
    id->family = x->props.family;
#line 2572
    id->proto = x->id.proto;
#line 2574
    attr = nla_reserve(skb, 6, 224);
#line 2575
    err = -90;
    }
#line 2576
    if ((unsigned long )attr == (unsigned long )((struct nlattr *)0)) {
#line 2577
      goto out_free_skb;
    } else {

    }
    {
#line 2579
    tmp___5 = nla_data((struct nlattr  const  *)attr);
#line 2579
    p = (struct xfrm_usersa_info *)tmp___5;
    }
  } else {

  }
  {
#line 2581
  err = copy_to_user_state_extra(x, p, skb);
  }
#line 2582
  if (err != 0) {
#line 2583
    goto out_free_skb;
  } else {

  }
  {
#line 2585
  nlmsg_end(skb, nlh);
#line 2587
  tmp___6 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 3U, 32U);
  }
#line 2587
  return (tmp___6);
  out_free_skb: 
  {
#line 2590
  kfree_skb(skb);
  }
#line 2591
  return (err);
}
}
#line 2594 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_send_state_notify(struct xfrm_state *x , struct km_event  const  *c ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2598
  if (c->event == 24U) {
#line 2598
    goto case_24;
  } else {

  }
#line 2600
  if (c->event == 30U) {
#line 2600
    goto case_30;
  } else {

  }
#line 2602
  if (c->event == 17U) {
#line 2602
    goto case_17;
  } else {

  }
#line 2603
  if (c->event == 26U) {
#line 2603
    goto case_26;
  } else {

  }
#line 2604
  if (c->event == 16U) {
#line 2604
    goto case_16;
  } else {

  }
#line 2606
  if (c->event == 28U) {
#line 2606
    goto case_28;
  } else {

  }
#line 2608
  goto switch_default;
  case_24: /* CIL Label */ 
  {
#line 2599
  tmp = xfrm_exp_state_notify(x, c);
  }
#line 2599
  return (tmp);
  case_30: /* CIL Label */ 
  {
#line 2601
  tmp___0 = xfrm_aevent_state_notify(x, c);
  }
#line 2601
  return (tmp___0);
  case_17: /* CIL Label */ ;
  case_26: /* CIL Label */ ;
  case_16: /* CIL Label */ 
  {
#line 2605
  tmp___1 = xfrm_notify_sa(x, c);
  }
#line 2605
  return (tmp___1);
  case_28: /* CIL Label */ 
  {
#line 2607
  tmp___2 = xfrm_notify_sa_flush(c);
  }
#line 2607
  return (tmp___2);
  switch_default: /* CIL Label */ 
  {
#line 2609
  printk("\rxfrm_user: Unknown SA event %d\n", c->event);
  }
#line 2611
  goto ldv_51495;
  switch_break: /* CIL Label */ ;
  }
  ldv_51495: ;
#line 2614
  return (0);
}
}
#line 2618 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_acquire_msgsize(struct xfrm_state *x , struct xfrm_policy *xp ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  size_t tmp___3 ;

  {
  {
#line 2621
  tmp = nla_total_size((int )((unsigned int )xp->xfrm_nr * 64U));
#line 2621
  tmp___0 = nla_total_size(8);
#line 2621
  tmp___1 = xfrm_user_sec_ctx_size(x->security);
#line 2621
  tmp___2 = nla_total_size(tmp___1);
#line 2621
  tmp___3 = userpolicy_type_attrsize();
  }
#line 2621
  return (((((unsigned long )tmp + (unsigned long )tmp___0) + (unsigned long )tmp___2) + tmp___3) + 280UL);
}
}
#line 2628 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_acquire(struct sk_buff *skb , struct xfrm_state *x , struct xfrm_tmpl *xt ,
                         struct xfrm_policy *xp ) 
{ 
  __u32 seq ;
  u32 tmp ;
  struct xfrm_user_acquire *ua ;
  struct nlmsghdr *nlh ;
  int err ;
  void *tmp___0 ;
  u32 tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2631
  tmp = xfrm_get_acqseq();
#line 2631
  seq = tmp;
#line 2636
  nlh = nlmsg_put(skb, 0U, 0U, 23, 280, 0);
  }
#line 2637
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2638
    return (-90);
  } else {

  }
  {
#line 2640
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2640
  ua = (struct xfrm_user_acquire *)tmp___0;
#line 2641
  memcpy((void *)(& ua->id), (void const   *)(& x->id), 24UL);
#line 2642
  memcpy((void *)(& ua->saddr), (void const   *)(& x->props.saddr), 16UL);
#line 2643
  memcpy((void *)(& ua->sel), (void const   *)(& x->sel), 56UL);
#line 2644
  copy_to_user_policy(xp, & ua->policy, 1);
#line 2645
  ua->aalgos = xt->aalgos;
#line 2646
  ua->ealgos = xt->ealgos;
#line 2647
  ua->calgos = xt->calgos;
#line 2648
  tmp___1 = seq;
#line 2648
  x->km.seq = tmp___1;
#line 2648
  ua->seq = tmp___1;
#line 2650
  err = copy_to_user_tmpl(xp, skb);
  }
#line 2651
  if (err == 0) {
    {
#line 2652
    err = copy_to_user_state_sec_ctx(x, skb);
    }
  } else {

  }
#line 2653
  if (err == 0) {
    {
#line 2654
    err = copy_to_user_policy_type((int )xp->type, skb);
    }
  } else {

  }
#line 2655
  if (err == 0) {
    {
#line 2656
    err = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& xp->mark));
    }
  } else {

  }
#line 2657
  if (err != 0) {
    {
#line 2658
    nlmsg_cancel(skb, nlh);
    }
#line 2659
    return (err);
  } else {

  }
  {
#line 2662
  tmp___2 = nlmsg_end(skb, nlh);
  }
#line 2662
  return (tmp___2);
}
}
#line 2665 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_send_acquire(struct xfrm_state *x , struct xfrm_tmpl *xt , struct xfrm_policy *xp ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *skb ;
  size_t tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2668
  tmp = xs_net(x);
#line 2668
  net = tmp;
#line 2671
  tmp___0 = xfrm_acquire_msgsize(x, xp);
#line 2671
  skb = nlmsg_new(tmp___0, 32U);
  }
#line 2672
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2673
    return (-12);
  } else {

  }
  {
#line 2675
  tmp___1 = build_acquire(skb, x, xt, xp);
  }
#line 2675
  if (tmp___1 < 0) {
    {
#line 2676
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (2676), "i" (12UL));
#line 2676
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 2678
  tmp___2 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 1U, 32U);
  }
#line 2678
  return (tmp___2);
}
}
#line 2684 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct xfrm_policy *xfrm_compile_policy(struct sock *sk , int opt , u8 *data ,
                                               int len , int *dir ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct xfrm_userpolicy_info *p ;
  struct xfrm_user_tmpl *ut ;
  struct xfrm_policy *xp ;
  int nr ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2687
  tmp = sock_net((struct sock  const  *)sk);
#line 2687
  net = tmp;
#line 2688
  p = (struct xfrm_userpolicy_info *)data;
#line 2689
  ut = (struct xfrm_user_tmpl *)(p + 1UL);
  }
  {
#line 2694
  if ((int )sk->__sk_common.skc_family == 2) {
#line 2694
    goto case_2;
  } else {

  }
#line 2701
  if ((int )sk->__sk_common.skc_family == 10) {
#line 2701
    goto case_10;
  } else {

  }
#line 2708
  goto switch_default;
  case_2: /* CIL Label */ ;
#line 2695
  if (opt != 17) {
#line 2696
    *dir = -95;
#line 2697
    return ((struct xfrm_policy *)0);
  } else {

  }
#line 2699
  goto ldv_51530;
  case_10: /* CIL Label */ ;
#line 2702
  if (opt != 35) {
#line 2703
    *dir = -95;
#line 2704
    return ((struct xfrm_policy *)0);
  } else {

  }
#line 2706
  goto ldv_51530;
  switch_default: /* CIL Label */ 
#line 2709
  *dir = -22;
#line 2710
  return ((struct xfrm_policy *)0);
  switch_break: /* CIL Label */ ;
  }
  ldv_51530: 
#line 2713
  *dir = -22;
#line 2715
  if ((unsigned int )len <= 167U) {
#line 2717
    return ((struct xfrm_policy *)0);
  } else {
    {
#line 2715
    tmp___0 = verify_newpolicy_info(p);
    }
#line 2715
    if (tmp___0 != 0) {
#line 2717
      return ((struct xfrm_policy *)0);
    } else {

    }
  }
  {
#line 2719
  nr = (int )(((unsigned long )len - 168UL) / 64UL);
#line 2720
  tmp___1 = validate_tmpl(nr, ut, (int )p->sel.family);
  }
#line 2720
  if (tmp___1 != 0) {
#line 2721
    return ((struct xfrm_policy *)0);
  } else {

  }
#line 2723
  if ((unsigned int )p->dir > 1U) {
#line 2724
    return ((struct xfrm_policy *)0);
  } else {

  }
  {
#line 2726
  xp = xfrm_policy_alloc(net, 32U);
  }
#line 2727
  if ((unsigned long )xp == (unsigned long )((struct xfrm_policy *)0)) {
#line 2728
    *dir = -105;
#line 2729
    return ((struct xfrm_policy *)0);
  } else {

  }
  {
#line 2732
  copy_from_user_policy(xp, p);
#line 2733
  xp->type = 0U;
#line 2734
  copy_templates(xp, ut, nr);
#line 2736
  *dir = (int )p->dir;
  }
#line 2738
  return (xp);
}
}
#line 2741 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_polexpire_msgsize(struct xfrm_policy *xp ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  size_t tmp___3 ;

  {
  {
#line 2743
  tmp = nla_total_size((int )((unsigned int )xp->xfrm_nr * 64U));
#line 2743
  tmp___0 = xfrm_user_sec_ctx_size(xp->security);
#line 2743
  tmp___1 = nla_total_size(tmp___0);
#line 2743
  tmp___2 = nla_total_size(8);
#line 2743
  tmp___3 = userpolicy_type_attrsize();
  }
#line 2743
  return (((((unsigned long )tmp + (unsigned long )tmp___1) + (unsigned long )tmp___2) + tmp___3) + 176UL);
}
}
#line 2750 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_polexpire(struct sk_buff *skb , struct xfrm_policy *xp , int dir ,
                           struct km_event  const  *c ) 
{ 
  struct xfrm_user_polexpire *upe ;
  int hard ;
  struct nlmsghdr *nlh ;
  int err ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 2754
  hard = (int )c->data.hard;
#line 2758
  nlh = nlmsg_put(skb, c->portid, 0U, 27, 176, 0);
  }
#line 2759
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2760
    return (-90);
  } else {

  }
  {
#line 2762
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2762
  upe = (struct xfrm_user_polexpire *)tmp;
#line 2763
  copy_to_user_policy(xp, & upe->pol, dir);
#line 2764
  err = copy_to_user_tmpl(xp, skb);
  }
#line 2765
  if (err == 0) {
    {
#line 2766
    err = copy_to_user_sec_ctx(xp, skb);
    }
  } else {

  }
#line 2767
  if (err == 0) {
    {
#line 2768
    err = copy_to_user_policy_type((int )xp->type, skb);
    }
  } else {

  }
#line 2769
  if (err == 0) {
    {
#line 2770
    err = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& xp->mark));
    }
  } else {

  }
#line 2771
  if (err != 0) {
    {
#line 2772
    nlmsg_cancel(skb, nlh);
    }
#line 2773
    return (err);
  } else {

  }
  {
#line 2775
  upe->hard = hard != 0;
#line 2777
  tmp___0 = nlmsg_end(skb, nlh);
  }
#line 2777
  return (tmp___0);
}
}
#line 2780 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_exp_policy_notify(struct xfrm_policy *xp , int dir , struct km_event  const  *c ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *skb ;
  size_t tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2782
  tmp = xp_net((struct xfrm_policy  const  *)xp);
#line 2782
  net = tmp;
#line 2785
  tmp___0 = xfrm_polexpire_msgsize(xp);
#line 2785
  skb = nlmsg_new(tmp___0, 32U);
  }
#line 2786
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2787
    return (-12);
  } else {

  }
  {
#line 2789
  tmp___1 = build_polexpire(skb, xp, dir, c);
  }
#line 2789
  if (tmp___1 < 0) {
    {
#line 2790
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (2790), "i" (12UL));
#line 2790
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 2792
  tmp___2 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 2U, 32U);
  }
#line 2792
  return (tmp___2);
}
}
#line 2795 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_notify_policy(struct xfrm_policy *xp , int dir , struct km_event  const  *c ) 
{ 
  int len ;
  int tmp ;
  struct net *net ;
  struct net *tmp___0 ;
  struct xfrm_userpolicy_info *p ;
  struct xfrm_userpolicy_id *id ;
  struct nlmsghdr *nlh ;
  struct sk_buff *skb ;
  int headlen ;
  int err ;
  int tmp___1 ;
  size_t tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  struct nlattr *attr ;
  void *tmp___5 ;
  void *tmp___6 ;
  int tmp___7 ;

  {
  {
#line 2797
  tmp = nla_total_size((int )((unsigned int )xp->xfrm_nr * 64U));
#line 2797
  len = tmp;
#line 2798
  tmp___0 = xp_net((struct xfrm_policy  const  *)xp);
#line 2798
  net = tmp___0;
#line 2805
  headlen = 168;
  }
#line 2806
  if ((unsigned int )c->event == 20U) {
    {
#line 2807
    tmp___1 = nla_total_size(headlen);
#line 2807
    len = len + tmp___1;
#line 2808
    headlen = 64;
    }
  } else {

  }
  {
#line 2810
  tmp___2 = userpolicy_type_attrsize();
#line 2810
  len = (int )((unsigned int )len + (unsigned int )tmp___2);
#line 2811
  tmp___3 = nla_total_size(8);
#line 2811
  len = len + tmp___3;
#line 2812
  len = (int )((unsigned int )len + (((unsigned int )headlen + 3U) & 4294967292U));
#line 2814
  skb = nlmsg_new((size_t )len, 32U);
  }
#line 2815
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2816
    return (-12);
  } else {

  }
  {
#line 2818
  nlh = nlmsg_put(skb, c->portid, c->seq, (int )c->event, headlen, 0);
#line 2819
  err = -90;
  }
#line 2820
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2821
    goto out_free_skb;
  } else {

  }
  {
#line 2823
  tmp___4 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2823
  p = (struct xfrm_userpolicy_info *)tmp___4;
  }
#line 2824
  if ((unsigned int )c->event == 20U) {
    {
#line 2827
    tmp___5 = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2827
    id = (struct xfrm_userpolicy_id *)tmp___5;
#line 2828
    memset((void *)id, 0, 64UL);
#line 2829
    id->dir = (__u8 )dir;
    }
#line 2830
    if ((unsigned int )c->data.byid != 0U) {
#line 2831
      id->index = xp->index;
    } else {
      {
#line 2833
      memcpy((void *)(& id->sel), (void const   *)(& xp->selector), 56UL);
      }
    }
    {
#line 2835
    attr = nla_reserve(skb, 7, 168);
#line 2836
    err = -90;
    }
#line 2837
    if ((unsigned long )attr == (unsigned long )((struct nlattr *)0)) {
#line 2838
      goto out_free_skb;
    } else {

    }
    {
#line 2840
    tmp___6 = nla_data((struct nlattr  const  *)attr);
#line 2840
    p = (struct xfrm_userpolicy_info *)tmp___6;
    }
  } else {

  }
  {
#line 2843
  copy_to_user_policy(xp, p, dir);
#line 2844
  err = copy_to_user_tmpl(xp, skb);
  }
#line 2845
  if (err == 0) {
    {
#line 2846
    err = copy_to_user_policy_type((int )xp->type, skb);
    }
  } else {

  }
#line 2847
  if (err == 0) {
    {
#line 2848
    err = xfrm_mark_put(skb, (struct xfrm_mark  const  *)(& xp->mark));
    }
  } else {

  }
#line 2849
  if (err != 0) {
#line 2850
    goto out_free_skb;
  } else {

  }
  {
#line 2852
  nlmsg_end(skb, nlh);
#line 2854
  tmp___7 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 4U, 32U);
  }
#line 2854
  return (tmp___7);
  out_free_skb: 
  {
#line 2857
  kfree_skb(skb);
  }
#line 2858
  return (err);
}
}
#line 2861 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_notify_policy_flush(struct km_event  const  *c ) 
{ 
  struct net *net ;
  struct nlmsghdr *nlh ;
  struct sk_buff *skb ;
  int err ;
  size_t tmp ;
  int tmp___0 ;

  {
  {
#line 2863
  net = c->net;
#line 2868
  tmp = userpolicy_type_attrsize();
#line 2868
  skb = nlmsg_new(tmp, 32U);
  }
#line 2869
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2870
    return (-12);
  } else {

  }
  {
#line 2872
  nlh = nlmsg_put(skb, c->portid, c->seq, 29, 0, 0);
#line 2873
  err = -90;
  }
#line 2874
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2875
    goto out_free_skb;
  } else {

  }
  {
#line 2876
  err = copy_to_user_policy_type((int )((u8 )c->data.type), skb);
  }
#line 2877
  if (err != 0) {
#line 2878
    goto out_free_skb;
  } else {

  }
  {
#line 2880
  nlmsg_end(skb, nlh);
#line 2882
  tmp___0 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 4U, 32U);
  }
#line 2882
  return (tmp___0);
  out_free_skb: 
  {
#line 2885
  kfree_skb(skb);
  }
#line 2886
  return (err);
}
}
#line 2889 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_send_policy_notify(struct xfrm_policy *xp , int dir , struct km_event  const  *c ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2893
  if (c->event == 19U) {
#line 2893
    goto case_19;
  } else {

  }
#line 2894
  if (c->event == 25U) {
#line 2894
    goto case_25;
  } else {

  }
#line 2895
  if (c->event == 20U) {
#line 2895
    goto case_20;
  } else {

  }
#line 2897
  if (c->event == 29U) {
#line 2897
    goto case_29;
  } else {

  }
#line 2899
  if (c->event == 27U) {
#line 2899
    goto case_27;
  } else {

  }
#line 2901
  goto switch_default;
  case_19: /* CIL Label */ ;
  case_25: /* CIL Label */ ;
  case_20: /* CIL Label */ 
  {
#line 2896
  tmp = xfrm_notify_policy(xp, dir, c);
  }
#line 2896
  return (tmp);
  case_29: /* CIL Label */ 
  {
#line 2898
  tmp___0 = xfrm_notify_policy_flush(c);
  }
#line 2898
  return (tmp___0);
  case_27: /* CIL Label */ 
  {
#line 2900
  tmp___1 = xfrm_exp_policy_notify(xp, dir, c);
  }
#line 2900
  return (tmp___1);
  switch_default: /* CIL Label */ 
  {
#line 2902
  printk("\rxfrm_user: Unknown Policy event %d\n", c->event);
  }
  switch_break: /* CIL Label */ ;
  }
#line 2906
  return (0);
}
}
#line 2910 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_report_msgsize(void) 
{ 


  {
#line 2912
  return (60UL);
}
}
#line 2915 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_report(struct sk_buff *skb , u8 proto , struct xfrm_selector *sel ,
                        xfrm_address_t *addr ) 
{ 
  struct xfrm_user_report *ur ;
  struct nlmsghdr *nlh ;
  void *tmp ;
  int err ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2921
  nlh = nlmsg_put(skb, 0U, 0U, 32, 60, 0);
  }
#line 2922
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2923
    return (-90);
  } else {

  }
  {
#line 2925
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2925
  ur = (struct xfrm_user_report *)tmp;
#line 2926
  ur->proto = proto;
#line 2927
  memcpy((void *)(& ur->sel), (void const   *)sel, 56UL);
  }
#line 2929
  if ((unsigned long )addr != (unsigned long )((xfrm_address_t *)0)) {
    {
#line 2930
    tmp___0 = nla_put(skb, 14, 16, (void const   *)addr);
#line 2930
    err = tmp___0;
    }
#line 2931
    if (err != 0) {
      {
#line 2932
      nlmsg_cancel(skb, nlh);
      }
#line 2933
      return (err);
    } else {

    }
  } else {

  }
  {
#line 2936
  tmp___1 = nlmsg_end(skb, nlh);
  }
#line 2936
  return (tmp___1);
}
}
#line 2939 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_send_report(struct net *net , u8 proto , struct xfrm_selector *sel ,
                            xfrm_address_t *addr ) 
{ 
  struct sk_buff *skb ;
  size_t tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2944
  tmp = xfrm_report_msgsize();
#line 2944
  skb = nlmsg_new(tmp, 32U);
  }
#line 2945
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2946
    return (-12);
  } else {

  }
  {
#line 2948
  tmp___0 = build_report(skb, (int )proto, sel, addr);
  }
#line 2948
  if (tmp___0 < 0) {
    {
#line 2949
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (2949), "i" (12UL));
#line 2949
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 2951
  tmp___1 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 6U, 32U);
  }
#line 2951
  return (tmp___1);
}
}
#line 2954 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
__inline static size_t xfrm_mapping_msgsize(void) 
{ 


  {
#line 2956
  return (64UL);
}
}
#line 2959 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int build_mapping(struct sk_buff *skb , struct xfrm_state *x , xfrm_address_t *new_saddr ,
                         __be16 new_sport ) 
{ 
  struct xfrm_user_mapping *um ;
  struct nlmsghdr *nlh ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 2965
  nlh = nlmsg_put(skb, 0U, 0U, 38, 64, 0);
  }
#line 2966
  if ((unsigned long )nlh == (unsigned long )((struct nlmsghdr *)0)) {
#line 2967
    return (-90);
  } else {

  }
  {
#line 2969
  tmp = nlmsg_data((struct nlmsghdr  const  *)nlh);
#line 2969
  um = (struct xfrm_user_mapping *)tmp;
#line 2971
  memcpy((void *)(& um->id.daddr), (void const   *)(& x->id.daddr), 16UL);
#line 2972
  um->id.spi = x->id.spi;
#line 2973
  um->id.family = x->props.family;
#line 2974
  um->id.proto = x->id.proto;
#line 2975
  memcpy((void *)(& um->new_saddr), (void const   *)new_saddr, 16UL);
#line 2976
  memcpy((void *)(& um->old_saddr), (void const   *)(& x->props.saddr), 16UL);
#line 2977
  um->new_sport = new_sport;
#line 2978
  um->old_sport = (x->encap)->encap_sport;
#line 2979
  um->reqid = x->props.reqid;
#line 2981
  tmp___0 = nlmsg_end(skb, nlh);
  }
#line 2981
  return (tmp___0);
}
}
#line 2984 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_send_mapping(struct xfrm_state *x , xfrm_address_t *ipaddr , __be16 sport ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sk_buff *skb ;
  size_t tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2987
  tmp = xs_net(x);
#line 2987
  net = tmp;
  }
#line 2990
  if ((unsigned int )x->id.proto != 50U) {
#line 2991
    return (-22);
  } else {

  }
#line 2993
  if ((unsigned long )x->encap == (unsigned long )((struct xfrm_encap_tmpl *)0)) {
#line 2994
    return (-22);
  } else {

  }
  {
#line 2996
  tmp___0 = xfrm_mapping_msgsize();
#line 2996
  skb = nlmsg_new(tmp___0, 32U);
  }
#line 2997
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 2998
    return (-12);
  } else {

  }
  {
#line 3000
  tmp___1 = build_mapping(skb, x, ipaddr, (int )sport);
  }
#line 3000
  if (tmp___1 < 0) {
    {
#line 3001
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/xfrm/xfrm_user.c"),
                         "i" (3001), "i" (12UL));
#line 3001
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 3003
  tmp___2 = nlmsg_multicast(net->xfrm.nlsk, skb, 0U, 8U, 32U);
  }
#line 3003
  return (tmp___2);
}
}
#line 3006 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static bool xfrm_is_alive(struct km_event  const  *c ) 
{ 
  int tmp ;

  {
  {
#line 3008
  tmp = xfrm_acquire_is_on(c->net);
  }
#line 3008
  return (tmp != 0);
}
}
#line 3011 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct xfrm_mgr netlink_mgr  = 
#line 3011
     {{0, 0}, (char *)"netlink", & xfrm_send_state_notify, & xfrm_send_acquire, & xfrm_compile_policy,
    & xfrm_send_mapping, & xfrm_send_policy_notify, & xfrm_send_report, & xfrm_send_migrate,
    & xfrm_is_alive};
#line 3023 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_user_net_init(struct net *net ) 
{ 
  struct sock *nlsk ;
  struct netlink_kernel_cfg cfg ;

  {
  {
#line 3026
  cfg.groups = 8U;
#line 3026
  cfg.flags = 0U;
#line 3026
  cfg.input = & xfrm_netlink_rcv;
#line 3026
  cfg.cb_mutex = 0;
#line 3026
  cfg.bind = 0;
#line 3026
  cfg.compare = 0;
#line 3031
  nlsk = netlink_kernel_create(net, 6, & cfg);
  }
#line 3032
  if ((unsigned long )nlsk == (unsigned long )((struct sock *)0)) {
#line 3033
    return (-12);
  } else {

  }
  {
#line 3034
  net->xfrm.nlsk_stash = nlsk;
#line 3035
  ldv_wlock_rcu();
#line 3035
  ldv_rcu_assign_pointer((void *)net->xfrm.nlsk, (void const   *)nlsk);
#line 3035
  ldv_wunlock_rcu();
  }
#line 3036
  return (0);
}
}
#line 3039 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void xfrm_user_net_exit(struct list_head *net_exit_list ) 
{ 
  struct net *net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 3042
  __mptr = (struct list_head  const  *)net_exit_list->next;
#line 3042
  net = (struct net *)((char *)__mptr + 0xffffffffffffff90UL);
#line 3042
  goto ldv_51642;
  ldv_51641: 
#line 3043
  net->xfrm.nlsk = (struct sock *)0;
#line 3042
  __mptr___0 = (struct list_head  const  *)net->exit_list.next;
#line 3042
  net = (struct net *)((char *)__mptr___0 + 0xffffffffffffff90UL);
  ldv_51642: ;
#line 3042
  if ((unsigned long )(& net->exit_list) != (unsigned long )net_exit_list) {
#line 3044
    goto ldv_51641;
  } else {

  }
  {
#line 3044
  synchronize_net();
#line 3045
  __mptr___1 = (struct list_head  const  *)net_exit_list->next;
#line 3045
  net = (struct net *)((char *)__mptr___1 + 0xffffffffffffff90UL);
  }
#line 3045
  goto ldv_51649;
  ldv_51648: 
  {
#line 3046
  netlink_kernel_release(net->xfrm.nlsk_stash);
#line 3045
  __mptr___2 = (struct list_head  const  *)net->exit_list.next;
#line 3045
  net = (struct net *)((char *)__mptr___2 + 0xffffffffffffff90UL);
  }
  ldv_51649: ;
#line 3045
  if ((unsigned long )(& net->exit_list) != (unsigned long )net_exit_list) {
#line 3047
    goto ldv_51648;
  } else {

  }

#line 3052
  return;
}
}
#line 3049 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static struct pernet_operations xfrm_user_net_ops  =    {{0, 0}, & xfrm_user_net_init, 0, & xfrm_user_net_exit, 0, 0UL};
#line 3054 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static int xfrm_user_init(void) 
{ 
  int rv ;

  {
  {
#line 3058
  printk("\016Initializing XFRM netlink socket\n");
#line 3060
  rv = register_pernet_subsys(& xfrm_user_net_ops);
  }
#line 3061
  if (rv < 0) {
#line 3062
    return (rv);
  } else {

  }
  {
#line 3063
  rv = xfrm_register_km(& netlink_mgr);
  }
#line 3064
  if (rv < 0) {
    {
#line 3065
    unregister_pernet_subsys(& xfrm_user_net_ops);
    }
  } else {

  }
#line 3066
  return (rv);
}
}
#line 3069 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/lkbce/net/xfrm/xfrm_user.c"
static void xfrm_user_exit(void) 
{ 


  {
  {
#line 3071
  xfrm_unregister_km(& netlink_mgr);
#line 3072
  unregister_pernet_subsys(& xfrm_user_net_ops);
  }
#line 3073
  return;
}
}
#line 87 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
void ldv_dispatch_insmod_deregister_3_2(void) ;
#line 88
void ldv_dispatch_insmod_register_3_3(void) ;
#line 89
void *ldv_insmod_2(void *arg0 ) ;
#line 90
void ldv_insmod_xfrm_user_exit_2_2(void (*arg0)(void) ) ;
#line 91
int ldv_insmod_xfrm_user_init_2_6(int (*arg0)(void) ) ;
#line 92
void *ldv_main_3(void *arg0 ) ;
#line 93
int main(void) ;
#line 96 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
pthread_t ldv_thread_2  ;
#line 102 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
void ldv_dispatch_insmod_deregister_3_2(void) 
{ 
  int ret ;

  {
  {
#line 105
  ret = pthread_join(ldv_thread_2, (void **)0);
#line 106
  __VERIFIER_assume(ret == 0);
  }
#line 107
  return;
}
}
#line 111 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
void ldv_dispatch_insmod_register_3_3(void) 
{ 
  int ret ;
  struct ldv_struct_main_3 *cf_arg_2 ;
  void *tmp ;

  {
  {
#line 114
  tmp = ldv_xmalloc(4UL);
#line 114
  cf_arg_2 = (struct ldv_struct_main_3 *)tmp;
#line 115
  ret = pthread_create(& ldv_thread_2, (pthread_attr_t const   *)0, & ldv_insmod_2,
                       (void *)cf_arg_2);
#line 116
  __VERIFIER_assume(ret == 0);
  }
#line 117
  return;
}
}
#line 121 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
void *ldv_insmod_2(void *arg0 ) 
{ 
  int ldv_2_ret_default ;
  void (*ldv_2_xfrm_user_exit_default)(void) ;
  int (*ldv_2_xfrm_user_init_default)(void) ;
  int tmp ;

  {
  {
#line 129
  ldv_free(arg0);
#line 134
  ldv_2_ret_default = ldv_insmod_xfrm_user_init_2_6(ldv_2_xfrm_user_init_default);
#line 136
  ldv_2_ret_default = ldv_post_init(ldv_2_ret_default);
#line 139
  tmp = ldv_undef_int();
  }
#line 139
  if (tmp != 0) {
    {
#line 141
    __VERIFIER_assume(ldv_2_ret_default != 0);
    }
#line 149
    return ((void *)0);
  } else {
    {
#line 153
    __VERIFIER_assume(ldv_2_ret_default == 0);
#line 158
    ldv_insmod_xfrm_user_exit_2_2(ldv_2_xfrm_user_exit_default);
    }
#line 166
    return ((void *)0);
  }
#line 169
  return ((void *)0);
}
}
#line 174 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
void ldv_insmod_xfrm_user_exit_2_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 175
  xfrm_user_exit();
  }
#line 176
  return;
}
}
#line 179 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
int ldv_insmod_xfrm_user_init_2_6(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 180
  tmp = xfrm_user_init();
  }
#line 180
  return (tmp);
}
}
#line 184 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
void *ldv_main_3(void *arg0 ) 
{ 


  {
  {
#line 189
  ldv_initialize();
#line 193
  ldv_dispatch_insmod_register_3_3();

  pthread_t bogus, bar;
  struct net foo;
  struct km_event foobar;
  pthread_create(& bogus, (pthread_attr_t const *)0, & xfrm_user_net_init, &foo);
  pthread_create(& bar, (pthread_attr_t const *)0, & xfrm_notify_sa_flush, &foobar);

#line 197
  ldv_dispatch_insmod_deregister_3_2();
#line 201
  ldv_check_final_state();
#line 202
  __VERIFIER_assume(0);
  }
#line 206
  return ((void *)0);
#line 208
  return ((void *)0);
}
}
#line 213 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
int main(void) 
{ 


  {
  {
#line 215
  ldv_main_3((void *)0);
  }
#line 216
  return (0);
}
}
#line 222 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static void *ERR_PTR(long error ) 
{ 
  void *tmp ;

  {
  {
#line 225
  tmp = ldv_err_ptr(error);
  }
#line 225
  return (tmp);
}
}
#line 229 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static long PTR_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 232
  tmp = ldv_ptr_err(ptr);
  }
#line 232
  return (tmp);
}
}
#line 452 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 455
  tmp = ldv_kzalloc(size, flags);
  }
#line 455
  return (tmp);
}
}
#line 1195 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static void ldv_rcu_read_lock_106(void) 
{ 


  {
  {
#line 1198
  ldv_rcu_read_lock();
  }
#line 1199
  return;
}
}
#line 1202 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static void ldv_rcu_read_unlock_107(void) 
{ 


  {
  {
#line 1205
  ldv_rcu_read_unlock();
  }
#line 1206
  return;
}
}
#line 1209 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static void ldv_spin_lock_bh_108(spinlock_t *lock ) 
{ 


  {
  {
#line 1213
  ldv_spin_model_lock((char *)"lock_of_xfrm_state");
#line 1215
  spin_lock_bh(lock);
  }
#line 1216
  return;
}
}
#line 1219 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
__inline static void ldv_spin_unlock_bh_109(spinlock_t *lock ) 
{ 


  {
  {
#line 1223
  ldv_spin_model_unlock((char *)"lock_of_xfrm_state");
#line 1225
  spin_unlock_bh(lock);
  }
#line 1226
  return;
}
}
#line 1269 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
static void ldv_mutex_lock_114(struct mutex *ldv_func_arg1 ) 
{ 


  {
  {
#line 1273
  ldv_mutex_model_lock(ldv_func_arg1, (char *)"xfrm_cfg_mutex_of_netns_xfrm");
  }
#line 1274
  return;
}
}
#line 1277 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/0/net/xfrm/xfrm_user.ko/sync-race_rcu/vtg/net/xfrm/xfrm_user.ko/sync:race_rcu/weaver/.tmp_xfrm_user.c.aux"
static void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) 
{ 


  {
  {
#line 1281
  ldv_mutex_model_unlock(ldv_func_arg1, (char *)"xfrm_cfg_mutex_of_netns_xfrm");
  }
#line 1282
  return;
}
}
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device  const  *dev ) ;
#line 24
int ldv_dev_set_drvdata(struct device *dev , void *data ) ;
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_xzalloc(size_t size ) ;
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 29
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0) && (unsigned long )dev->p != (unsigned long )((struct device_private */* const  */)0)) {
#line 30
    return ((dev->p)->driver_data);
  } else {

  }
#line 32
  return ((void *)0);
}
}
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 43
  tmp = ldv_xzalloc(8UL);
#line 43
  dev->p = (struct device_private *)tmp;
#line 44
  (dev->p)->driver_data = data;
  }
#line 46
  return (0);
}
}
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_zalloc(size_t size ) ;
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 27
  tmp = ldv_zalloc((unsigned long )size + 2256UL);
#line 27
  master = (struct spi_master *)tmp;
  }
#line 29
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 30
    return ((struct spi_master *)0);
  } else {

  }
  {
#line 32
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1UL));
  }
#line 34
  return (master);
}
}
#line 27 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err(void const   *ptr ) ;
#line 28
long ldv_is_err_or_null(void const   *ptr ) ;
#line 20 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 22
  return ((unsigned long )ptr > 4294967295UL);
}
}
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/err.c"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 27
  return ((void *)(4294967295L - error));
}
}
#line 30 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/err.c"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 32
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 35 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 37
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
#line 37
    tmp___0 = 1;
  } else {
    {
#line 37
    tmp = ldv_is_err(ptr);
    }
#line 37
    if (tmp != 0L) {
#line 37
      tmp___0 = 1;
    } else {
#line 37
      tmp___0 = 0;
    }
  }
#line 37
  return ((long )tmp___0);
}
}
#line 32 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void) ;
#line 42
void ldv_switch_to_process_context(void) ;
#line 50
bool ldv_in_interrupt_context(void) ;
#line 133
int ldv_post_probe(int probe_ret_val ) ;
#line 141
int ldv_filter_err_code(int ret_val ) ;
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
static bool __ldv_in_interrupt_context  =    0;
#line 28 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 30
  __ldv_in_interrupt_context = 1;
#line 31
  return;
}
}
#line 34 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 36
  __ldv_in_interrupt_context = 0;
#line 37
  return;
}
}
#line 39 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
bool ldv_in_interrupt_context(void) 
{ 


  {
#line 41
  return (__ldv_in_interrupt_context);
}
}
#line 44 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 46
  __VERIFIER_assume(val <= 0);
  }
#line 47
  return (val);
}
}
#line 54 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 56
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 56
  return (tmp);
}
}
#line 60 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 62
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 62
  return (tmp);
}
}
#line 66 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 68
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 68
  return (tmp);
}
}
#line 25 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/ldv/slab.h"
extern void ldv_check_alloc_flags(gfp_t  ) ;
#line 26
extern void ldv_after_alloc(void * ) ;
#line 21 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/linux/mm/kzalloc.c"
void *ldv_kzalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 25
  ldv_check_alloc_flags(flags);
#line 26
  res = ldv_zalloc(size);
#line 27
  ldv_after_alloc(res);
  }
#line 29
  return (res);
}
}
#line 22 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_error(void) ;
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/gcc.c"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 26
  return (exp);
}
}
#line 35 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/gcc.c"
void __builtin_trap(void) 
{ 


  {
  {
#line 37
  __VERIFIER_error();
  }
#line 38
  return;
}
}
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_malloc(size_t size ) ;
#line 24
void *ldv_calloc(size_t nmemb , size_t size ) ;
#line 31
extern void *external_allocated_data(void) ;
#line 33
void *ldv_malloc_unknown_size(void) ;
#line 34
void *ldv_calloc_unknown_size(void) ;
#line 35
void *ldv_zalloc_unknown_size(void) ;
#line 41
void *ldv_xmalloc_unknown_size(size_t size ) ;
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
extern void *malloc(size_t  ) ;
#line 25
extern void *calloc(size_t  , size_t  ) ;
#line 26
extern void free(void * ) ;
#line 29 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 31
  tmp___1 = ldv_undef_int();
  }
#line 31
  if (tmp___1 != 0) {
    {
#line 32
    tmp = malloc(size);
#line 32
    res = tmp;
#line 34
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 35
    tmp___0 = ldv_is_err((void const   *)res);
#line 35
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 37
    return (res);
  } else {
#line 40
    return ((void *)0);
  }
}
}
#line 43 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc(size_t nmemb , size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 45
  tmp___1 = ldv_undef_int();
  }
#line 45
  if (tmp___1 != 0) {
    {
#line 46
    tmp = calloc(nmemb, size);
#line 46
    res = tmp;
#line 48
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 49
    tmp___0 = ldv_is_err((void const   *)res);
#line 49
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 51
    return (res);
  } else {
#line 54
    return ((void *)0);
  }
}
}
#line 57 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc(size_t size ) 
{ 
  void *tmp ;

  {
  {
#line 59
  tmp = ldv_calloc(1UL, size);
  }
#line 59
  return (tmp);
}
}
#line 62 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void ldv_free(void *s ) 
{ 


  {
  {
#line 64
  free(s);
  }
#line 65
  return;
}
}
#line 67 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 69
  tmp = malloc(size);
#line 69
  res = tmp;
#line 71
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 72
  tmp___0 = ldv_is_err((void const   *)res);
#line 72
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 74
  return (res);
}
}
#line 77 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xzalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 79
  tmp = calloc(1UL, size);
#line 79
  res = tmp;
#line 81
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 82
  tmp___0 = ldv_is_err((void const   *)res);
#line 82
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 84
  return (res);
}
}
#line 87 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 89
  tmp___1 = ldv_undef_int();
  }
#line 89
  if (tmp___1 != 0) {
    {
#line 90
    tmp = external_allocated_data();
#line 90
    res = tmp;
#line 92
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 93
    tmp___0 = ldv_is_err((void const   *)res);
#line 93
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 95
    return (res);
  } else {
#line 98
    return ((void *)0);
  }
}
}
#line 101 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 103
  tmp___1 = ldv_undef_int();
  }
#line 103
  if (tmp___1 != 0) {
    {
#line 104
    tmp = external_allocated_data();
#line 104
    res = tmp;
#line 106
    memset(res, 0, 8UL);
#line 107
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 108
    tmp___0 = ldv_is_err((void const   *)res);
#line 108
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 110
    return (res);
  } else {
#line 113
    return ((void *)0);
  }
}
}
#line 116 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc_unknown_size(void) 
{ 
  void *tmp ;

  {
  {
#line 118
  tmp = ldv_calloc_unknown_size();
  }
#line 118
  return (tmp);
}
}
#line 121 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 123
  tmp = external_allocated_data();
#line 123
  res = tmp;
#line 125
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 126
  tmp___0 = ldv_is_err((void const   *)res);
#line 126
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 128
  return (res);
}
}
#line 23 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_long(void) ;
#line 24
unsigned int ldv_undef_uint(void) ;
#line 25
unsigned long ldv_undef_ulong(void) ;
#line 26
unsigned long long ldv_undef_ulonglong(void) ;
#line 27
void *ldv_undef_ptr(void) ;
#line 30
int ldv_undef_int_positive(void) ;
#line 33
int ldv_undef_int_negative(void) ;
#line 36
int ldv_undef_int_nonpositive(void) ;
#line 39
void *ldv_undef_ptr_non_null(void) ;
#line 24 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
extern int __VERIFIER_nondet_int(void) ;
#line 26
extern long __VERIFIER_nondet_long(void) ;
#line 33
extern unsigned int __VERIFIER_nondet_uint(void) ;
#line 36
extern unsigned long __VERIFIER_nondet_ulong(void) ;
#line 37
extern unsigned long long __VERIFIER_nondet_ulonglong(void) ;
#line 38
extern void *__VERIFIER_nondet_pointer(void) ;
#line 41 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 43
  tmp = __VERIFIER_nondet_int();
  }
#line 43
  return (tmp);
}
}
#line 46 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_long(void) 
{ 
  long tmp ;

  {
  {
#line 48
  tmp = __VERIFIER_nondet_long();
  }
#line 48
  return ((int )tmp);
}
}
#line 51 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned int ldv_undef_uint(void) 
{ 
  unsigned int tmp ;

  {
  {
#line 53
  tmp = __VERIFIER_nondet_uint();
  }
#line 53
  return (tmp);
}
}
#line 56 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr(void) 
{ 
  void *tmp ;

  {
  {
#line 58
  tmp = __VERIFIER_nondet_pointer();
  }
#line 58
  return (tmp);
}
}
#line 61 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 63
  tmp = __VERIFIER_nondet_ulong();
  }
#line 63
  return (tmp);
}
}
#line 66 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void) 
{ 
  unsigned long long tmp ;

  {
  {
#line 68
  tmp = __VERIFIER_nondet_ulonglong();
  }
#line 68
  return (tmp);
}
}
#line 71 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_positive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 73
  tmp = ldv_undef_int();
#line 73
  ret = tmp;
#line 75
  __VERIFIER_assume(ret > 0);
  }
#line 77
  return (ret);
}
}
#line 80 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 82
  tmp = ldv_undef_int();
#line 82
  ret = tmp;
#line 84
  __VERIFIER_assume(ret < 0);
  }
#line 86
  return (ret);
}
}
#line 89 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 91
  tmp = ldv_undef_int();
#line 91
  ret = tmp;
#line 93
  __VERIFIER_assume(ret <= 0);
  }
#line 95
  return (ret);
}
}
#line 98 "/home/volkov/Documents/klever/native-sched-dir/native-scheduler-work-dir/scheduler/jobs/e9934acfac2bd133b86fbf2507cf5adc/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void) 
{ 
  void *ret ;
  int tmp ;

  {
  {
#line 100
  tmp = ldv_undef_int();
#line 100
  ret = (void *)((long )tmp);
#line 102
  __VERIFIER_assume((unsigned long )ret != (unsigned long )((void *)0));
  }
#line 104
  return (ret);
}
}
